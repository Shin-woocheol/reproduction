  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[4, 19], [6, 9, 14, 8], [17, 15], [18, 2], [0], [10], [1], [13, 12], [3, 16, 5], [7, 11]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[4, 6, 17, 18, 0, 11, 1, 5, 3, 13], [4, 6, 17, 5, 0, 11, 1, 13, 12, 14], [5, 6, 17, 9, 0, 15, 1, 13, 10, 14], [8, 9, 17, 12, 0, 10, 1, 13, 16, 15], [5, 9, 7, 8, 0, 10, 1, 13, 16, 14], [8, 9, 11, 15, 0, 10, 1, 14, 2, 7], [19, 9, 15, 8, 0, 10, 14, 2, 11, 7], [19, 2, 15, 5, 0, 10, 8, 12, 11, 7], [19, 11, 15, 14, 2, 10, 5, 12, 8, 7], [19, 11, 2, 5, 8, 10, 14, 12, 20, 7], [8, 14, 20, 2, 11, 10, 20, 12, 5, 7], [20, 14, 8, 2, 11, 20, 20, 12, 5, 7], [20, 14, 11, 20, 20, 8, 20, 12, 5, 7], [8, 14, 20, 11, 20, 20, 20, 12, 5, 20], [20, 14, 20, 20, 11, 20, 20, 20, 5, 8], [20, 20, 20, 20, 8, 11, 20, 20, 5, 20], [8, 20, 20, 20, 20, 20, 20, 20, 20, 11], [20, 8, 20, 20, 20, 20, 20, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 1, 2, 4, 6, 9, 3, 7, 8, 5]), array([1, 2, 4, 6, 7, 3, 9, 8, 0, 5]), array([2, 4, 6, 7, 8, 3, 0, 9, 5, 1]), array([1, 4, 5, 6, 7, 8, 9, 2, 3, 0]), array([1, 4, 5, 6, 2, 7, 3, 0, 8, 9]), array([1, 4, 5, 9, 8, 3, 2, 6, 0, 7]), array([0, 2, 4, 5, 9, 8, 3, 7, 1, 6]), array([0, 2, 5, 7, 9, 8, 6, 4, 3, 1]), array([0, 5, 7, 9, 3, 2, 1, 6, 4, 8]), array([5, 7, 9, 8, 3, 1, 0, 4, 6, 2]), array([1, 3, 7, 8, 9, 4, 2, 5, 0, 6]), array([1, 7, 8, 9, 2, 5, 6, 3, 0, 4]), array([1, 7, 8, 0, 3, 6, 4, 5, 9, 2]), array([1, 8, 9, 4, 0, 6, 7, 5, 3, 2]), array([8, 4, 5, 7, 0, 6, 1, 9, 3, 2]), array([9, 0, 6, 8, 5, 2, 7, 4, 1, 3]), array([1, 6, 4, 0, 7, 9, 3, 8, 5, 2])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
        True, False]), array([False, False, False,  True,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
        True, False]), array([False, False, False,  True,  True, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
        True, False]), array([False, False, False,  True,  True, False,  True, False, False,
       False, False, False, False, False, False, False, False,  True,
        True, False]), array([False, False, False,  True,  True, False,  True, False, False,
       False, False, False, False,  True, False, False,  True,  True,
        True, False]), array([False,  True, False,  True,  True, False,  True, False, False,
       False, False, False, False,  True, False, False,  True,  True,
        True, False]), array([False,  True, False,  True,  True, False,  True, False, False,
        True, False, False, False,  True, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True,  True, False,  True, False, False,
        True, False, False, False,  True, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True,  True, False,  True, False, False,
        True, False, False, False,  True, False,  True,  True,  True,
        True, False]), array([ True,  True, False,  True,  True, False,  True, False, False,
        True, False, False, False,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True, False,  True, False, False,
        True,  True, False, False,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True, False,  True, False, False,
        True,  True, False, False,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True, False,  True,  True, False,
        True,  True, False, False,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True, False,  True,  True, False,
        True,  True, False,  True,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True, False,  True,  True, False,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [17, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 18, 17], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 4,  6, 17, 18,  0, 11,  1,  5,  3, 13],
        [ 4,  6, 17,  5,  0, 11,  1, 13, 12, 14],
        [ 5,  6, 17,  9,  0, 15,  1, 13, 10, 14],
        [ 8,  9, 17, 12,  0, 10,  1, 13, 16, 15],
        [ 5,  9,  7,  8,  0, 10,  1, 13, 16, 14],
        [ 8,  9, 11, 15,  0, 10,  1, 14,  2,  7],
        [19,  9, 15,  8,  0, 10, 14,  2, 11,  7],
        [19,  2, 15,  5,  0, 10,  8, 12, 11,  7],
        [19, 11, 15, 14,  2, 10,  5, 12,  8,  7],
        [19, 11,  2,  5,  8, 10, 14, 12, 20,  7],
        [ 8, 14, 20,  2, 11, 10, 20, 12,  5,  7],
        [20, 14,  8,  2, 11, 20, 20, 12,  5,  7],
        [20, 14, 11, 20, 20,  8, 20, 12,  5,  7],
        [ 8, 14, 20, 11, 20, 20, 20, 12,  5, 20],
        [20, 14, 20, 20, 11, 20, 20, 20,  5,  8],
        [20, 20, 20, 20,  8, 11, 20, 20,  5, 20],
        [ 8, 20, 20, 20, 20, 20, 20, 20, 20, 11],
        [20,  8, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[ 4],
        [ 6],
        [17],
        [18],
        [ 0],
        [11],
        [ 1],
        [ 5],
        [ 3],
        [13],
        [ 4],
        [ 6],
        [17],
        [ 5],
        [ 0],
        [11],
        [ 1],
        [13],
        [12],
        [14],
        [ 5],
        [ 6],
        [17],
        [ 9],
        [ 0],
        [15],
        [ 1],
        [13],
        [10],
        [14],
        [ 8],
        [ 9],
        [17],
        [12],
        [ 0],
        [10],
        [ 1],
        [13],
        [16],
        [15],
        [ 5],
        [ 9],
        [ 7],
        [ 8],
        [ 0],
        [10],
        [ 1],
        [13],
        [16],
        [14],
        [ 8],
        [ 9],
        [11],
        [15],
        [ 0],
        [10],
        [ 1],
        [14],
        [ 2],
        [ 7],
        [19],
        [ 9],
        [15],
        [ 8],
        [ 0],
        [10],
        [14],
        [ 2],
        [11],
        [ 7],
        [19],
        [ 2],
        [15],
        [ 5],
        [ 0],
        [10],
        [ 8],
        [12],
        [11],
        [ 7],
        [19],
        [11],
        [15],
        [14],
        [ 2],
        [10],
        [ 5],
        [12],
        [ 8],
        [ 7],
        [19],
        [11],
        [ 2],
        [ 5],
        [ 8],
        [10],
        [14],
        [12],
        [20],
        [ 7],
        [ 8],
        [14],
        [20],
        [ 2],
        [11],
        [10],
        [20],
        [12],
        [ 5],
        [ 7],
        [20],
        [14],
        [ 8],
        [ 2],
        [11],
        [20],
        [20],
        [12],
        [ 5],
        [ 7],
        [20],
        [14],
        [11],
        [20],
        [20],
        [ 8],
        [20],
        [12],
        [ 5],
        [ 7],
        [ 8],
        [14],
        [20],
        [11],
        [20],
        [20],
        [20],
        [12],
        [ 5],
        [20],
        [20],
        [14],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [ 5],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [11],
        [20],
        [20],
        [ 5],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -3.0445,  -3.0445,  -3.0445,  -3.0445,  -3.0445,  -3.0445,  -3.0445,
         -3.0445,  -3.0445,  -3.0445,  -2.9444,  -2.9444,  -2.9444,  -2.9444,
         -2.9444,  -2.9444,  -2.9444,  -2.9444,  -2.9444,  -2.9444,  -2.8904,
         -2.8904,  -2.8904,  -2.8904,  -2.8904,  -2.8904,  -2.8904,  -2.8904,
         -2.8904,  -2.8904,  -2.8332,  -2.8332,  -2.8332,  -2.8332,  -2.8332,
         -2.8332,  -2.8332,  -2.8332,  -2.8332,  -2.8332,  -2.7726,  -2.7726,
         -2.7726,  -2.7726,  -2.7726,  -2.7726,  -2.7726,  -2.7726,  -2.7726,
         -2.7726,  -2.6391,  -2.6391,  -2.6391,  -2.6391,  -2.6391,  -2.6391,
         -2.6391,  -2.6391,  -2.6391,  -2.6391,  -2.5649,  -2.5649,  -2.5649,
         -2.5649,  -2.5649,  -2.5649,  -2.5649,  -2.5649,  -2.5649,  -2.5649,
         -2.4849,  -2.4849,  -2.4849,  -2.4849,  -2.4849,  -2.4849,  -2.4849,
         -2.4849,  -2.4849,  -2.4849,  -2.3979,  -2.3979,  -2.3979,  -2.3979,
         -2.3979,  -2.3979,  -2.3979,  -2.3979,  -2.3979,  -2.3979,  -2.3026,
         -2.3026,  -2.3026,  -2.3026,  -2.3026,  -2.3026,  -2.3026,  -2.3026,
        -11.5129,  -2.3026,  -2.1972,  -2.1972, -11.5129,  -2.1972,  -2.1972,
         -2.1972, -11.5129,  -2.1972,  -2.1972,  -2.1972, -11.5129,  -2.0794,
         -2.0794,  -2.0794,  -2.0794, -11.5129, -11.5129,  -2.0794,  -2.0794,
         -2.0794, -11.5129,  -1.9459,  -1.9459, -11.5129, -11.5129,  -1.9459,
        -11.5129,  -1.9459,  -1.9459,  -1.9459,  -1.7918,  -1.7918, -11.5129,
         -1.7918, -11.5129, -11.5129, -11.5129,  -1.7918,  -1.7918, -11.5129,
        -11.5129,  -1.6094, -11.5129, -11.5129,  -1.6094, -11.5129, -11.5129,
        -11.5129,  -1.6094,  -1.6094, -11.5129, -11.5129, -11.5129, -11.5129,
         -1.3863,  -1.3863, -11.5129, -11.5129,  -1.3863, -11.5129,  -1.0986,
        -11.5129, -11.5129, -11.5129, -11.5129, -11.5129, -11.5129, -11.5129,
        -11.5129,  -1.0986, -11.5129,  -0.6931, -11.5129, -11.5129, -11.5129,
        -11.5129, -11.5129, -11.5129, -11.5129, -11.5129],
       grad_fn=<SumBackward1>), torch.Size([180])
Traceback (most recent call last):
  File "/home/woocheol/reproduction/LNS-PBS-representation-new/main_nn.py", line 242, in <module>
    fit_res = agent.fit() #* step.
  File "/home/woocheol/reproduction/LNS-PBS-representation-new/nn/agent.py", line 173, in fit
    _logit = (ret - baseline) * joint_log_prob
RuntimeError: The size of tensor a (18) must match the size of tensor b (180) at non-singleton dimension 0
Traceback (most recent call last):
  File "/home/woocheol/reproduction/LNS-PBS-representation-new/main_nn.py", line 242, in <module>
    fit_res = agent.fit() #* step.
  File "/home/woocheol/reproduction/LNS-PBS-representation-new/nn/agent.py", line 173, in fit
    _logit = (ret - baseline) * joint_log_prob
RuntimeError: The size of tensor a (18) must match the size of tensor b (180) at non-singleton dimension 0
