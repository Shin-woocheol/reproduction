  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[13, 12], [17, 15], [8], [16, 3, 1], [], [14, 5], [18, 19, 4, 11], [2], [9, 0], [6, 7, 10]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[13, 6, 17, 16, 15, 14, 5, 12, 1, 8], [13, 15, 8, 16, 0, 12, 5, 7, 9, 6], [10, 17, 8, 4, 11, 1, 18, 3, 9, 6], [19, 17, 8, 3, 4, 5, 18, 1, 2, 6], [12, 17, 8, 3, 10, 5, 18, 0, 1, 19], [12, 17, 8, 1, 4, 5, 18, 0, 2, 11], [12, 17, 8, 1, 2, 5, 7, 11, 4, 10], [12, 17, 8, 1, 19, 2, 7, 0, 4, 15], [12, 4, 8, 1, 2, 7, 11, 0, 10, 19], [12, 2, 4, 1, 0, 19, 10, 11, 15, 7], [12, 0, 10, 11, 7, 15, 19, 2, 20, 4], [2, 7, 10, 20, 11, 4, 19, 15, 0, 20], [20, 15, 20, 10, 2, 7, 11, 20, 0, 4], [20, 10, 20, 20, 20, 20, 4, 2, 11, 7], [20, 10, 11, 20, 20, 20, 20, 2, 20, 7], [20, 20, 20, 20, 20, 20, 11, 2, 20, 10], [20, 20, 20, 20, 20, 20, 11, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 3, 6, 7, 5, 4, 8, 2, 1, 9]), array([8, 9, 3, 2, 4, 7, 0, 5, 6, 1]), array([1, 2, 6, 9, 3, 7, 5, 8, 0, 4]), array([1, 2, 3, 5, 6, 8, 4, 0, 9, 7]), array([0, 1, 2, 5, 6, 4, 3, 9, 7, 8]), array([0, 1, 2, 3, 5, 8, 9, 7, 4, 6]), array([0, 1, 2, 3, 5, 8, 6, 4, 9, 7]), array([0, 2, 3, 7, 9, 8, 6, 5, 4, 1]), array([0, 3, 2, 7, 8, 1, 9, 5, 6, 4]), array([0, 6, 4, 5, 7, 1, 9, 2, 3, 8]), array([6, 1, 7, 4, 5, 2, 0, 8, 3, 9]), array([8, 6, 1, 3, 5, 9, 4, 2, 7, 0]), array([6, 7, 8, 1, 9, 2, 3, 5, 4, 0]), array([7, 9, 1, 2, 5, 0, 8, 4, 6, 3]), array([7, 6, 9, 4, 1, 3, 8, 0, 5, 2]), array([6, 1, 7, 9, 4, 2, 0, 8, 5, 3])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False,  True,  True, False,  True, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False,  True,  True, False,  True, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
        True, False, False, False,  True,  True, False,  True, False,
       False, False]), array([False, False, False,  True, False, False,  True, False, False,
        True, False, False, False,  True,  True, False,  True, False,
       False, False]), array([False, False, False,  True, False, False,  True, False, False,
        True, False, False, False,  True,  True, False,  True, False,
        True, False]), array([False, False, False,  True, False,  True,  True, False, False,
        True, False, False, False,  True,  True, False,  True, False,
        True, False]), array([False, False, False,  True, False,  True,  True, False, False,
        True, False, False, False,  True,  True, False,  True,  True,
        True, False]), array([False, False, False,  True, False,  True,  True, False,  True,
        True, False, False, False,  True,  True, False,  True,  True,
        True, False]), array([False,  True, False,  True, False,  True,  True, False,  True,
        True, False, False, False,  True,  True, False,  True,  True,
        True, False]), array([False,  True, False,  True, False,  True,  True, False,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
        True, False]), array([False,  True, False,  True, False,  True,  True, False,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True, False,  True, False,  True,  True, False,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True, False,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [2, 9, 3, 2, 2, 2, 3, 4, 2, 2, 2, 4, 5, 11, 3, 6, 29], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[13,  6, 17, 16, 15, 14,  5, 12,  1,  8],
        [13, 15,  8, 16,  0, 12,  5,  7,  9,  6],
        [10, 17,  8,  4, 11,  1, 18,  3,  9,  6],
        [19, 17,  8,  3,  4,  5, 18,  1,  2,  6],
        [12, 17,  8,  3, 10,  5, 18,  0,  1, 19],
        [12, 17,  8,  1,  4,  5, 18,  0,  2, 11],
        [12, 17,  8,  1,  2,  5,  7, 11,  4, 10],
        [12, 17,  8,  1, 19,  2,  7,  0,  4, 15],
        [12,  4,  8,  1,  2,  7, 11,  0, 10, 19],
        [12,  2,  4,  1,  0, 19, 10, 11, 15,  7],
        [12,  0, 10, 11,  7, 15, 19,  2, 20,  4],
        [ 2,  7, 10, 20, 11,  4, 19, 15,  0, 20],
        [20, 15, 20, 10,  2,  7, 11, 20,  0,  4],
        [20, 10, 20, 20, 20, 20,  4,  2, 11,  7],
        [20, 10, 11, 20, 20, 20, 20,  2, 20,  7],
        [20, 20, 20, 20, 20, 20, 11,  2, 20, 10],
        [20, 20, 20, 20, 20, 20, 11, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[13],
        [ 6],
        [17],
        [16],
        [15],
        [14],
        [ 5],
        [12],
        [ 1],
        [ 8],
        [13],
        [15],
        [ 8],
        [16],
        [ 0],
        [12],
        [ 5],
        [ 7],
        [ 9],
        [ 6],
        [10],
        [17],
        [ 8],
        [ 4],
        [11],
        [ 1],
        [18],
        [ 3],
        [ 9],
        [ 6],
        [19],
        [17],
        [ 8],
        [ 3],
        [ 4],
        [ 5],
        [18],
        [ 1],
        [ 2],
        [ 6],
        [12],
        [17],
        [ 8],
        [ 3],
        [10],
        [ 5],
        [18],
        [ 0],
        [ 1],
        [19],
        [12],
        [17],
        [ 8],
        [ 1],
        [ 4],
        [ 5],
        [18],
        [ 0],
        [ 2],
        [11],
        [12],
        [17],
        [ 8],
        [ 1],
        [ 2],
        [ 5],
        [ 7],
        [11],
        [ 4],
        [10],
        [12],
        [17],
        [ 8],
        [ 1],
        [19],
        [ 2],
        [ 7],
        [ 0],
        [ 4],
        [15],
        [12],
        [ 4],
        [ 8],
        [ 1],
        [ 2],
        [ 7],
        [11],
        [ 0],
        [10],
        [19],
        [12],
        [ 2],
        [ 4],
        [ 1],
        [ 0],
        [19],
        [10],
        [11],
        [15],
        [ 7],
        [12],
        [ 0],
        [10],
        [11],
        [ 7],
        [15],
        [19],
        [ 2],
        [20],
        [ 4],
        [ 2],
        [ 7],
        [10],
        [20],
        [11],
        [ 4],
        [19],
        [15],
        [ 0],
        [20],
        [20],
        [15],
        [20],
        [10],
        [ 2],
        [ 7],
        [11],
        [20],
        [ 0],
        [ 4],
        [20],
        [10],
        [20],
        [20],
        [20],
        [20],
        [ 4],
        [ 2],
        [11],
        [ 7],
        [20],
        [10],
        [11],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [ 2],
        [20],
        [10],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 2,  9,  3,  2,  2,  2,  3,  4,  2,  2,  2,  4,  5, 11,  3,  6, 29]), torch.Size([17])
 ret : tensor([75, 74, 66, 64, 63, 62, 61, 59, 56, 55, 54, 53, 50, 46, 36, 34, 29]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -28.9037,  -28.3321,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,
         -49.0949,  -66.5234,  -75.5153,  -84.7494, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[12], [16, 5], [18, 4, 7], [13, 19, 3], [6], [14], [15, 10, 17], [9, 2, 8], [0], [1, 11]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[12, 7, 18, 13, 6, 16, 1, 4, 3, 14], [1, 17, 18, 8, 6, 3, 15, 9, 0, 16], [5, 11, 18, 4, 6, 14, 10, 9, 0, 1], [17, 19, 2, 16, 6, 14, 10, 9, 0, 1], [3, 2, 11, 19, 16, 14, 10, 9, 0, 1], [17, 7, 8, 19, 16, 14, 10, 11, 0, 1], [17, 16, 3, 8, 2, 14, 10, 4, 0, 1], [7, 16, 4, 8, 3, 2, 17, 20, 5, 11], [8, 16, 7, 5, 20, 3, 17, 2, 20, 11], [8, 16, 7, 20, 2, 3, 20, 5, 20, 11], [5, 8, 7, 3, 2, 20, 20, 20, 20, 20], [20, 5, 20, 3, 20, 20, 8, 2, 20, 20], [20, 5, 20, 20, 8, 20, 20, 2, 20, 20], [20, 5, 20, 20, 20, 8, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 8, 20, 20]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 4, 0, 8, 7, 6, 1, 9, 5, 3]), array([2, 4, 7, 8, 0, 3, 6, 5, 1, 9]), array([4, 5, 6, 7, 8, 9, 2, 0, 3, 1]), array([5, 6, 7, 8, 9, 4, 2, 1, 3, 0]), array([3, 5, 6, 8, 9, 0, 4, 1, 7, 2]), array([5, 6, 8, 9, 1, 7, 2, 3, 4, 0]), array([1, 6, 8, 2, 9, 4, 3, 0, 5, 7]), array([1, 6, 9, 2, 5, 3, 0, 7, 8, 4]), array([1, 2, 9, 4, 7, 5, 0, 6, 8, 3]), array([2, 3, 1, 0, 4, 5, 9, 8, 6, 7]), array([3, 6, 7, 1, 0, 4, 9, 5, 8, 2]), array([7, 4, 1, 2, 9, 0, 8, 3, 5, 6]), array([1, 5, 4, 3, 9, 8, 2, 6, 7, 0]), array([7, 6, 2, 8, 5, 3, 4, 1, 9, 0])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True,  True, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True,  True, False,  True, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True,  True, False,  True, False, False,
        True, False]), array([False, False, False, False, False, False,  True, False, False,
       False, False, False,  True,  True, False,  True, False, False,
        True, False]), array([False, False, False, False, False, False,  True, False, False,
        True, False, False,  True,  True, False,  True, False, False,
        True, False]), array([False, False, False, False, False, False,  True, False, False,
        True, False, False,  True,  True, False,  True, False, False,
        True,  True]), array([ True,  True, False, False, False, False,  True, False, False,
        True,  True, False,  True,  True,  True,  True, False, False,
        True,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
        True,  True, False,  True,  True,  True,  True, False, False,
        True,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
        True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False, False,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 15
 next_t : [6, 7, 2, 3, 3, 4, 2, 3, 5, 3, 8, 6, 9, 5, 31], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[12,  7, 18, 13,  6, 16,  1,  4,  3, 14],
        [ 1, 17, 18,  8,  6,  3, 15,  9,  0, 16],
        [ 5, 11, 18,  4,  6, 14, 10,  9,  0,  1],
        [17, 19,  2, 16,  6, 14, 10,  9,  0,  1],
        [ 3,  2, 11, 19, 16, 14, 10,  9,  0,  1],
        [17,  7,  8, 19, 16, 14, 10, 11,  0,  1],
        [17, 16,  3,  8,  2, 14, 10,  4,  0,  1],
        [ 7, 16,  4,  8,  3,  2, 17, 20,  5, 11],
        [ 8, 16,  7,  5, 20,  3, 17,  2, 20, 11],
        [ 8, 16,  7, 20,  2,  3, 20,  5, 20, 11],
        [ 5,  8,  7,  3,  2, 20, 20, 20, 20, 20],
        [20,  5, 20,  3, 20, 20,  8,  2, 20, 20],
        [20,  5, 20, 20,  8, 20, 20,  2, 20, 20],
        [20,  5, 20, 20, 20,  8, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20,  8, 20, 20]]), torch.Size([15, 10])
 all_action : tensor([[12],
        [ 7],
        [18],
        [13],
        [ 6],
        [16],
        [ 1],
        [ 4],
        [ 3],
        [14],
        [ 1],
        [17],
        [18],
        [ 8],
        [ 6],
        [ 3],
        [15],
        [ 9],
        [ 0],
        [16],
        [ 5],
        [11],
        [18],
        [ 4],
        [ 6],
        [14],
        [10],
        [ 9],
        [ 0],
        [ 1],
        [17],
        [19],
        [ 2],
        [16],
        [ 6],
        [14],
        [10],
        [ 9],
        [ 0],
        [ 1],
        [ 3],
        [ 2],
        [11],
        [19],
        [16],
        [14],
        [10],
        [ 9],
        [ 0],
        [ 1],
        [17],
        [ 7],
        [ 8],
        [19],
        [16],
        [14],
        [10],
        [11],
        [ 0],
        [ 1],
        [17],
        [16],
        [ 3],
        [ 8],
        [ 2],
        [14],
        [10],
        [ 4],
        [ 0],
        [ 1],
        [ 7],
        [16],
        [ 4],
        [ 8],
        [ 3],
        [ 2],
        [17],
        [20],
        [ 5],
        [11],
        [ 8],
        [16],
        [ 7],
        [ 5],
        [20],
        [ 3],
        [17],
        [ 2],
        [20],
        [11],
        [ 8],
        [16],
        [ 7],
        [20],
        [ 2],
        [ 3],
        [20],
        [ 5],
        [20],
        [11],
        [ 5],
        [ 8],
        [ 7],
        [ 3],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 5],
        [20],
        [ 3],
        [20],
        [20],
        [ 8],
        [ 2],
        [20],
        [20],
        [20],
        [ 5],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [ 5],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20]]), torch.Size([150, 1])
next_t : tensor([ 6,  7,  2,  3,  3,  4,  2,  3,  5,  3,  8,  6,  9,  5, 31]), torch.Size([15])
 ret : tensor([83, 78, 72, 71, 69, 67, 64, 63, 61, 57, 55, 48, 43, 35, 31]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.9037,  -28.3321,  -27.7259,  -27.0805,
         -26.3906,  -32.2362,  -40.6036,  -49.0949,  -66.5234,  -75.5153,
         -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
[[14, 6, 8], [17, 4], [9, 3], [0, 11], [10, 5, 1], [18, 7], [15, 12], [16, 2], [19], [13]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[14, 17, 9, 0, 10, 5, 7, 16, 15, 18], [14, 17, 3, 0, 10, 5, 1, 16, 18, 6], [14, 17, 3, 18, 10, 1, 11, 16, 13, 15], [14, 7, 3, 18, 10, 8, 4, 16, 6, 13], [14, 7, 3, 11, 1, 8, 15, 5, 19, 6], [7, 4, 3, 11, 6, 18, 12, 1, 19, 13], [1, 4, 12, 11, 5, 18, 15, 6, 19, 13], [2, 4, 7, 11, 5, 18, 15, 8, 6, 13], [6, 4, 12, 1, 5, 18, 15, 2, 7, 13], [6, 4, 7, 8, 5, 1, 15, 2, 12, 13], [6, 12, 20, 20, 8, 7, 15, 2, 1, 20], [6, 20, 7, 20, 1, 8, 15, 20, 20, 12], [6, 20, 20, 8, 20, 1, 20, 20, 12, 7], [8, 12, 20, 20, 1, 20, 20, 20, 20, 7], [8, 20, 20, 20, 20, 20, 12, 7, 20, 20], [20, 20, 20, 20, 7, 20, 12, 20, 20, 20], [20, 20, 20, 20, 20, 7, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 1, 3, 4, 7, 5, 9, 2, 8, 6]), array([0, 1, 2, 4, 7, 8, 5, 9, 6, 3]), array([0, 2, 4, 7, 8, 5, 3, 9, 1, 6]), array([0, 2, 4, 3, 1, 9, 5, 8, 7, 6]), array([2, 3, 8, 0, 1, 5, 6, 9, 7, 4]), array([1, 3, 5, 8, 9, 2, 0, 4, 7, 6]), array([1, 3, 4, 5, 9, 7, 8, 6, 2, 0]), array([1, 4, 5, 9, 8, 0, 6, 2, 7, 3]), array([1, 4, 6, 7, 9, 3, 8, 0, 5, 2]), array([0, 6, 7, 5, 8, 4, 1, 9, 3, 2]), array([0, 6, 4, 9, 5, 2, 7, 1, 8, 3]), array([0, 3, 9, 5, 8, 6, 7, 4, 2, 1]), array([9, 1, 4, 0, 8, 3, 5, 6, 2, 7]), array([6, 0, 7, 2, 5, 1, 9, 3, 4, 8]), array([6, 4, 9, 2, 8, 5, 7, 0, 1, 3]), array([5, 6, 8, 2, 4, 0, 3, 1, 7, 9])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False, False,  True,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
        True,  True, False, False, False, False, False,  True,  True,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
        True,  True, False, False, False,  True, False,  True,  True,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
        True,  True, False, False, False,  True, False,  True,  True,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
        True,  True, False, False, False,  True, False,  True,  True,
       False,  True]), array([ True, False, False,  True, False, False, False, False, False,
        True,  True,  True, False, False,  True, False,  True,  True,
       False,  True]), array([ True, False, False,  True, False, False, False, False, False,
        True,  True,  True, False, False,  True, False,  True,  True,
        True,  True]), array([ True, False, False,  True,  True,  True, False, False, False,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True, False, False, False,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [5, 2, 5, 3, 2, 3, 2, 4, 5, 2, 4, 4, 4, 18, 24, 6, 36], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[14, 17,  9,  0, 10,  5,  7, 16, 15, 18],
        [14, 17,  3,  0, 10,  5,  1, 16, 18,  6],
        [14, 17,  3, 18, 10,  1, 11, 16, 13, 15],
        [14,  7,  3, 18, 10,  8,  4, 16,  6, 13],
        [14,  7,  3, 11,  1,  8, 15,  5, 19,  6],
        [ 7,  4,  3, 11,  6, 18, 12,  1, 19, 13],
        [ 1,  4, 12, 11,  5, 18, 15,  6, 19, 13],
        [ 2,  4,  7, 11,  5, 18, 15,  8,  6, 13],
        [ 6,  4, 12,  1,  5, 18, 15,  2,  7, 13],
        [ 6,  4,  7,  8,  5,  1, 15,  2, 12, 13],
        [ 6, 12, 20, 20,  8,  7, 15,  2,  1, 20],
        [ 6, 20,  7, 20,  1,  8, 15, 20, 20, 12],
        [ 6, 20, 20,  8, 20,  1, 20, 20, 12,  7],
        [ 8, 12, 20, 20,  1, 20, 20, 20, 20,  7],
        [ 8, 20, 20, 20, 20, 20, 12,  7, 20, 20],
        [20, 20, 20, 20,  7, 20, 12, 20, 20, 20],
        [20, 20, 20, 20, 20,  7, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[14],
        [17],
        [ 9],
        [ 0],
        [10],
        [ 5],
        [ 7],
        [16],
        [15],
        [18],
        [14],
        [17],
        [ 3],
        [ 0],
        [10],
        [ 5],
        [ 1],
        [16],
        [18],
        [ 6],
        [14],
        [17],
        [ 3],
        [18],
        [10],
        [ 1],
        [11],
        [16],
        [13],
        [15],
        [14],
        [ 7],
        [ 3],
        [18],
        [10],
        [ 8],
        [ 4],
        [16],
        [ 6],
        [13],
        [14],
        [ 7],
        [ 3],
        [11],
        [ 1],
        [ 8],
        [15],
        [ 5],
        [19],
        [ 6],
        [ 7],
        [ 4],
        [ 3],
        [11],
        [ 6],
        [18],
        [12],
        [ 1],
        [19],
        [13],
        [ 1],
        [ 4],
        [12],
        [11],
        [ 5],
        [18],
        [15],
        [ 6],
        [19],
        [13],
        [ 2],
        [ 4],
        [ 7],
        [11],
        [ 5],
        [18],
        [15],
        [ 8],
        [ 6],
        [13],
        [ 6],
        [ 4],
        [12],
        [ 1],
        [ 5],
        [18],
        [15],
        [ 2],
        [ 7],
        [13],
        [ 6],
        [ 4],
        [ 7],
        [ 8],
        [ 5],
        [ 1],
        [15],
        [ 2],
        [12],
        [13],
        [ 6],
        [12],
        [20],
        [20],
        [ 8],
        [ 7],
        [15],
        [ 2],
        [ 1],
        [20],
        [ 6],
        [20],
        [ 7],
        [20],
        [ 1],
        [ 8],
        [15],
        [20],
        [20],
        [12],
        [ 6],
        [20],
        [20],
        [ 8],
        [20],
        [ 1],
        [20],
        [20],
        [12],
        [ 7],
        [ 8],
        [12],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 5,  2,  5,  3,  2,  3,  2,  4,  5,  2,  4,  4,  4, 18, 24,  6, 36]), torch.Size([17])
 ret : tensor([108, 105, 105, 102, 101, 101,  99,  98,  95,  91,  90,  87,  84,  81,
         64,  41,  36]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -24.8491,  -23.9790,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[10, 12], [4, 6, 13], [8], [11], [5, 18, 2], [9, 17, 1], [14, 7], [19, 3], [16], [0, 15]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[10, 4, 12, 11, 8, 15, 13, 19, 0, 16], [10, 4, 14, 11, 17, 9, 13, 6, 18, 0], [10, 6, 13, 11, 5, 9, 1, 17, 7, 0], [10, 6, 17, 7, 5, 9, 12, 3, 15, 0], [15, 6, 8, 13, 5, 17, 12, 3, 14, 7], [15, 6, 8, 1, 13, 17, 14, 3, 16, 18], [1, 13, 2, 12, 18, 17, 14, 3, 16, 7], [12, 13, 1, 7, 18, 15, 14, 20, 16, 2], [7, 13, 20, 12, 18, 15, 14, 2, 20, 1], [1, 13, 20, 7, 18, 20, 15, 20, 2, 12], [20, 20, 12, 2, 20, 1, 7, 20, 20, 15], [12, 20, 20, 20, 2, 1, 20, 20, 20, 15], [20, 20, 20, 20, 2, 20, 20, 20, 12, 15], [20, 20, 20, 20, 2, 20, 20, 20, 12, 20], [12, 20, 20, 20, 20, 20, 20, 20, 20, 20]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 1, 3, 4, 8, 6, 9, 2, 5, 7]), array([0, 3, 5, 9, 7, 1, 2, 8, 4, 6]), array([0, 1, 4, 5, 9, 8, 2, 3, 7, 6]), array([1, 4, 7, 3, 2, 6, 0, 9, 8, 5]), array([1, 2, 5, 7, 3, 8, 9, 6, 4, 0]), array([5, 6, 7, 8, 4, 1, 3, 0, 2, 9]), array([1, 4, 6, 8, 5, 9, 3, 2, 0, 7]), array([1, 4, 6, 7, 3, 9, 5, 0, 2, 8]), array([1, 4, 3, 9, 8, 6, 0, 5, 2, 7]), array([6, 5, 2, 3, 9, 7, 8, 0, 1, 4]), array([5, 9, 4, 0, 2, 8, 3, 6, 1, 7]), array([4, 9, 8, 1, 3, 2, 7, 0, 5, 6]), array([4, 8, 2, 6, 0, 1, 3, 5, 9, 7]), array([0, 2, 3, 1, 6, 4, 8, 9, 7, 5])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False,  True, False, False, False, False,
       False, False,  True, False, False, False, False, False, False,
       False,  True]), array([ True, False, False, False,  True, False, False, False, False,
        True,  True,  True, False, False, False, False, False, False,
       False,  True]), array([ True, False, False, False,  True,  True, False, False, False,
        True,  True,  True, False, False, False, False, False, False,
       False,  True]), array([ True, False, False, False,  True,  True,  True, False,  True,
        True,  True,  True, False, False, False, False, False, False,
       False,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False, False, False, False, False,  True,
       False,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False, False, False, False,  True,  True,
       False,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False, False,  True, False,  True,  True,
       False,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True])], 15
 next_t : [8, 2, 6, 2, 2, 5, 5, 4, 3, 5, 11, 7, 4, 3, 19], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[10,  4, 12, 11,  8, 15, 13, 19,  0, 16],
        [10,  4, 14, 11, 17,  9, 13,  6, 18,  0],
        [10,  6, 13, 11,  5,  9,  1, 17,  7,  0],
        [10,  6, 17,  7,  5,  9, 12,  3, 15,  0],
        [15,  6,  8, 13,  5, 17, 12,  3, 14,  7],
        [15,  6,  8,  1, 13, 17, 14,  3, 16, 18],
        [ 1, 13,  2, 12, 18, 17, 14,  3, 16,  7],
        [12, 13,  1,  7, 18, 15, 14, 20, 16,  2],
        [ 7, 13, 20, 12, 18, 15, 14,  2, 20,  1],
        [ 1, 13, 20,  7, 18, 20, 15, 20,  2, 12],
        [20, 20, 12,  2, 20,  1,  7, 20, 20, 15],
        [12, 20, 20, 20,  2,  1, 20, 20, 20, 15],
        [20, 20, 20, 20,  2, 20, 20, 20, 12, 15],
        [20, 20, 20, 20,  2, 20, 20, 20, 12, 20],
        [12, 20, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([15, 10])
 all_action : tensor([[10],
        [ 4],
        [12],
        [11],
        [ 8],
        [15],
        [13],
        [19],
        [ 0],
        [16],
        [10],
        [ 4],
        [14],
        [11],
        [17],
        [ 9],
        [13],
        [ 6],
        [18],
        [ 0],
        [10],
        [ 6],
        [13],
        [11],
        [ 5],
        [ 9],
        [ 1],
        [17],
        [ 7],
        [ 0],
        [10],
        [ 6],
        [17],
        [ 7],
        [ 5],
        [ 9],
        [12],
        [ 3],
        [15],
        [ 0],
        [15],
        [ 6],
        [ 8],
        [13],
        [ 5],
        [17],
        [12],
        [ 3],
        [14],
        [ 7],
        [15],
        [ 6],
        [ 8],
        [ 1],
        [13],
        [17],
        [14],
        [ 3],
        [16],
        [18],
        [ 1],
        [13],
        [ 2],
        [12],
        [18],
        [17],
        [14],
        [ 3],
        [16],
        [ 7],
        [12],
        [13],
        [ 1],
        [ 7],
        [18],
        [15],
        [14],
        [20],
        [16],
        [ 2],
        [ 7],
        [13],
        [20],
        [12],
        [18],
        [15],
        [14],
        [ 2],
        [20],
        [ 1],
        [ 1],
        [13],
        [20],
        [ 7],
        [18],
        [20],
        [15],
        [20],
        [ 2],
        [12],
        [20],
        [20],
        [12],
        [ 2],
        [20],
        [ 1],
        [ 7],
        [20],
        [20],
        [15],
        [12],
        [20],
        [20],
        [20],
        [ 2],
        [ 1],
        [20],
        [20],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [12],
        [15],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [12],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([150, 1])
next_t : tensor([ 8,  2,  6,  2,  2,  5,  5,  4,  3,  5, 11,  7,  4,  3, 19]), torch.Size([15])
 ret : tensor([72, 65, 64, 59, 58, 57, 53, 49, 46, 44, 40, 30, 24, 21, 19]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.0805,  -26.3906,
         -24.8491,  -32.2362,  -40.6036,  -49.0949,  -66.5234,  -75.5153,
         -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
[[5], [15, 14], [4, 17, 16], [0], [10, 3], [2], [19, 1, 9, 8], [6, 12, 18], [11], [13, 7]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[18, 15, 3, 0, 6, 5, 19, 12, 14, 17], [8, 15, 11, 0, 2, 6, 12, 18, 13, 7], [11, 7, 8, 0, 10, 5, 18, 6, 12, 9], [5, 2, 18, 1, 10, 8, 16, 6, 9, 17], [5, 7, 4, 17, 10, 2, 1, 14, 3, 13], [5, 7, 16, 11, 10, 12, 1, 3, 18, 13], [5, 14, 12, 8, 9, 2, 1, 17, 18, 13], [5, 8, 17, 9, 16, 2, 3, 18, 11, 7], [8, 18, 16, 3, 17, 2, 9, 12, 11, 14], [16, 14, 17, 8, 7, 2, 3, 12, 11, 18], [7, 16, 17, 8, 14, 3, 18, 12, 11, 20], [18, 14, 17, 20, 3, 16, 8, 20, 11, 7], [16, 14, 17, 20, 3, 20, 8, 18, 20, 7], [18, 14, 20, 20, 3, 20, 8, 16, 20, 7], [20, 14, 18, 20, 3, 20, 20, 20, 20, 16], [20, 20, 20, 20, 3, 20, 20, 20, 16, 18], [20, 20, 16, 20, 20, 20, 20, 18, 20, 20], [20, 20, 20, 20, 20, 20, 20, 18, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 3, 0, 2, 6, 9, 4, 8, 5, 7]), array([3, 1, 6, 8, 5, 0, 2, 7, 4, 9]), array([4, 7, 8, 6, 3, 9, 2, 5, 0, 1]), array([0, 4, 2, 1, 6, 3, 9, 5, 7, 8]), array([0, 4, 6, 9, 5, 1, 7, 3, 2, 8]), array([0, 6, 9, 3, 5, 7, 8, 2, 1, 4]), array([0, 5, 8, 2, 3, 1, 6, 7, 4, 9]), array([5, 2, 4, 9, 8, 3, 0, 6, 1, 7]), array([5, 7, 8, 1, 6, 3, 4, 9, 2, 0]), array([7, 8, 3, 2, 6, 5, 0, 1, 4, 9]), array([2, 8, 9, 0, 1, 5, 6, 4, 3, 7]), array([1, 2, 4, 6, 9, 0, 7, 8, 5, 3]), array([1, 4, 6, 9, 7, 0, 3, 8, 5, 2]), array([1, 4, 9, 2, 3, 8, 5, 0, 6, 7]), array([4, 8, 9, 7, 1, 5, 2, 3, 0, 6]), array([7, 2, 0, 9, 6, 8, 3, 1, 5, 4]), array([7, 6, 9, 0, 4, 2, 8, 1, 5, 3])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False,  True, False, False,
       False,  True]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False,  True, False, False,
       False,  True]), array([ True, False, False, False, False, False,  True, False, False,
       False, False, False, False, False, False,  True, False, False,
       False,  True]), array([ True, False, False, False,  True, False,  True, False, False,
       False, False, False, False, False, False,  True, False, False,
       False,  True]), array([ True, False, False, False,  True, False,  True, False, False,
       False,  True, False, False, False, False,  True, False, False,
       False,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
       False,  True, False, False,  True, False,  True, False, False,
       False,  True]), array([ True,  True, False, False,  True,  True,  True, False, False,
       False,  True, False, False,  True, False,  True, False, False,
       False,  True]), array([ True,  True, False, False,  True,  True,  True, False, False,
        True,  True, False, False,  True, False,  True, False, False,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True, False, False,
        True,  True, False, False,  True, False,  True, False, False,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True, False, False,
        True,  True, False,  True,  True, False,  True, False, False,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True, False, False,
        True,  True,  True,  True,  True, False,  True, False, False,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True, False, False,
        True,  True,  True,  True,  True, False,  True, False,  True,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True, False,  True, False,  True,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True])], 18
 next_t : [2, 4, 2, 3, 2, 3, 3, 5, 7, 3, 2, 7, 4, 3, 2, 3, 22, 7], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[18, 15,  3,  0,  6,  5, 19, 12, 14, 17],
        [ 8, 15, 11,  0,  2,  6, 12, 18, 13,  7],
        [11,  7,  8,  0, 10,  5, 18,  6, 12,  9],
        [ 5,  2, 18,  1, 10,  8, 16,  6,  9, 17],
        [ 5,  7,  4, 17, 10,  2,  1, 14,  3, 13],
        [ 5,  7, 16, 11, 10, 12,  1,  3, 18, 13],
        [ 5, 14, 12,  8,  9,  2,  1, 17, 18, 13],
        [ 5,  8, 17,  9, 16,  2,  3, 18, 11,  7],
        [ 8, 18, 16,  3, 17,  2,  9, 12, 11, 14],
        [16, 14, 17,  8,  7,  2,  3, 12, 11, 18],
        [ 7, 16, 17,  8, 14,  3, 18, 12, 11, 20],
        [18, 14, 17, 20,  3, 16,  8, 20, 11,  7],
        [16, 14, 17, 20,  3, 20,  8, 18, 20,  7],
        [18, 14, 20, 20,  3, 20,  8, 16, 20,  7],
        [20, 14, 18, 20,  3, 20, 20, 20, 20, 16],
        [20, 20, 20, 20,  3, 20, 20, 20, 16, 18],
        [20, 20, 16, 20, 20, 20, 20, 18, 20, 20],
        [20, 20, 20, 20, 20, 20, 20, 18, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[18],
        [15],
        [ 3],
        [ 0],
        [ 6],
        [ 5],
        [19],
        [12],
        [14],
        [17],
        [ 8],
        [15],
        [11],
        [ 0],
        [ 2],
        [ 6],
        [12],
        [18],
        [13],
        [ 7],
        [11],
        [ 7],
        [ 8],
        [ 0],
        [10],
        [ 5],
        [18],
        [ 6],
        [12],
        [ 9],
        [ 5],
        [ 2],
        [18],
        [ 1],
        [10],
        [ 8],
        [16],
        [ 6],
        [ 9],
        [17],
        [ 5],
        [ 7],
        [ 4],
        [17],
        [10],
        [ 2],
        [ 1],
        [14],
        [ 3],
        [13],
        [ 5],
        [ 7],
        [16],
        [11],
        [10],
        [12],
        [ 1],
        [ 3],
        [18],
        [13],
        [ 5],
        [14],
        [12],
        [ 8],
        [ 9],
        [ 2],
        [ 1],
        [17],
        [18],
        [13],
        [ 5],
        [ 8],
        [17],
        [ 9],
        [16],
        [ 2],
        [ 3],
        [18],
        [11],
        [ 7],
        [ 8],
        [18],
        [16],
        [ 3],
        [17],
        [ 2],
        [ 9],
        [12],
        [11],
        [14],
        [16],
        [14],
        [17],
        [ 8],
        [ 7],
        [ 2],
        [ 3],
        [12],
        [11],
        [18],
        [ 7],
        [16],
        [17],
        [ 8],
        [14],
        [ 3],
        [18],
        [12],
        [11],
        [20],
        [18],
        [14],
        [17],
        [20],
        [ 3],
        [16],
        [ 8],
        [20],
        [11],
        [ 7],
        [16],
        [14],
        [17],
        [20],
        [ 3],
        [20],
        [ 8],
        [18],
        [20],
        [ 7],
        [18],
        [14],
        [20],
        [20],
        [ 3],
        [20],
        [ 8],
        [16],
        [20],
        [ 7],
        [20],
        [14],
        [18],
        [20],
        [ 3],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [ 3],
        [20],
        [20],
        [20],
        [16],
        [18],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 2,  4,  2,  3,  2,  3,  3,  5,  7,  3,  2,  7,  4,  3,  2,  3, 22,  7]), torch.Size([18])
 ret : tensor([67, 66, 63, 62, 60, 59, 57, 55, 51, 45, 43, 42, 36, 33, 31, 30, 28,  7]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,
         -49.0949,  -57.7272,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:08<00:00,  8.37s/it]
[[0, 18], [1, 6, 11], [2, 12, 10], [15, 13], [4, 19], [5], [14], [7, 17, 8], [], [9, 3, 16]]
  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[7, 10], [0, 16, 1, 3], [18, 15], [14, 9], [19], [2], [13, 12, 8, 11], [], [17, 4], [5, 6]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[7, 0, 4, 10, 19, 18, 13, 1, 12, 17], [6, 16, 5, 7, 18, 17, 12, 1, 11, 2], [7, 11, 18, 14, 8, 2, 12, 5, 19, 17], [7, 1, 18, 4, 19, 2, 8, 10, 17, 5], [17, 1, 18, 9, 19, 4, 8, 6, 3, 5], [3, 1, 9, 17, 19, 10, 8, 11, 6, 5], [11, 1, 4, 3, 19, 10, 8, 17, 15, 6], [10, 1, 15, 3, 19, 9, 11, 17, 4, 6], [10, 15, 20, 4, 9, 3, 11, 20, 17, 6], [15, 3, 20, 9, 20, 20, 11, 4, 17, 6], [4, 3, 20, 9, 20, 20, 11, 20, 17, 15], [20, 3, 15, 20, 20, 20, 11, 20, 17, 4], [20, 3, 20, 20, 20, 20, 15, 20, 4, 20], [20, 20, 15, 20, 20, 20, 20, 20, 4, 20], [20, 20, 15, 20, 20, 20, 20, 20, 20, 20]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([8, 2, 3, 7, 1, 9, 0, 5, 6, 4]), array([6, 1, 8, 5, 9, 3, 4, 0, 2, 7]), array([0, 2, 5, 7, 6, 9, 1, 4, 8, 3]), array([1, 2, 4, 6, 9, 3, 5, 0, 8, 7]), array([1, 4, 6, 9, 3, 2, 0, 8, 5, 7]), array([1, 4, 6, 9, 8, 2, 3, 5, 0, 7]), array([1, 4, 9, 3, 8, 5, 7, 6, 2, 0]), array([0, 6, 9, 3, 8, 5, 1, 4, 7, 2]), array([6, 8, 9, 1, 7, 3, 0, 2, 5, 4]), array([1, 3, 6, 8, 9, 0, 7, 2, 4, 5]), array([1, 6, 8, 2, 9, 4, 7, 5, 3, 0]), array([1, 6, 8, 2, 4, 7, 0, 9, 3, 5]), array([8, 2, 0, 3, 6, 4, 5, 9, 7, 1]), array([2, 6, 9, 0, 3, 1, 8, 7, 5, 4])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False,  True, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False,  True,  True,  True, False,  True, False,
       False, False]), array([ True, False,  True, False, False, False, False,  True, False,
       False, False, False,  True,  True,  True, False,  True, False,
       False, False]), array([ True, False,  True, False, False, False, False,  True, False,
       False, False, False,  True,  True,  True, False,  True, False,
        True, False]), array([ True, False,  True, False, False,  True, False,  True, False,
       False, False, False,  True,  True,  True, False,  True, False,
        True, False]), array([ True, False,  True, False, False,  True, False,  True,  True,
       False, False, False,  True,  True,  True, False,  True, False,
        True, False]), array([ True,  True,  True, False, False,  True, False,  True,  True,
       False, False, False,  True,  True,  True, False,  True, False,
        True,  True]), array([ True,  True,  True, False, False,  True, False,  True,  True,
       False,  True, False,  True,  True,  True, False,  True, False,
        True,  True]), array([ True,  True,  True, False, False,  True,  True,  True,  True,
       False,  True, False,  True,  True,  True, False,  True, False,
        True,  True]), array([ True,  True,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True, False,
        True,  True]), array([ True,  True,  True, False, False,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True])], 15
 next_t : [14, 5, 6, 5, 3, 2, 4, 4, 3, 2, 5, 3, 2, 12, 10], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[ 7,  0,  4, 10, 19, 18, 13,  1, 12, 17],
        [ 6, 16,  5,  7, 18, 17, 12,  1, 11,  2],
        [ 7, 11, 18, 14,  8,  2, 12,  5, 19, 17],
        [ 7,  1, 18,  4, 19,  2,  8, 10, 17,  5],
        [17,  1, 18,  9, 19,  4,  8,  6,  3,  5],
        [ 3,  1,  9, 17, 19, 10,  8, 11,  6,  5],
        [11,  1,  4,  3, 19, 10,  8, 17, 15,  6],
        [10,  1, 15,  3, 19,  9, 11, 17,  4,  6],
        [10, 15, 20,  4,  9,  3, 11, 20, 17,  6],
        [15,  3, 20,  9, 20, 20, 11,  4, 17,  6],
        [ 4,  3, 20,  9, 20, 20, 11, 20, 17, 15],
        [20,  3, 15, 20, 20, 20, 11, 20, 17,  4],
        [20,  3, 20, 20, 20, 20, 15, 20,  4, 20],
        [20, 20, 15, 20, 20, 20, 20, 20,  4, 20],
        [20, 20, 15, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([15, 10])
 all_action : tensor([[ 7],
        [ 0],
        [ 4],
        [10],
        [19],
        [18],
        [13],
        [ 1],
        [12],
        [17],
        [ 6],
        [16],
        [ 5],
        [ 7],
        [18],
        [17],
        [12],
        [ 1],
        [11],
        [ 2],
        [ 7],
        [11],
        [18],
        [14],
        [ 8],
        [ 2],
        [12],
        [ 5],
        [19],
        [17],
        [ 7],
        [ 1],
        [18],
        [ 4],
        [19],
        [ 2],
        [ 8],
        [10],
        [17],
        [ 5],
        [17],
        [ 1],
        [18],
        [ 9],
        [19],
        [ 4],
        [ 8],
        [ 6],
        [ 3],
        [ 5],
        [ 3],
        [ 1],
        [ 9],
        [17],
        [19],
        [10],
        [ 8],
        [11],
        [ 6],
        [ 5],
        [11],
        [ 1],
        [ 4],
        [ 3],
        [19],
        [10],
        [ 8],
        [17],
        [15],
        [ 6],
        [10],
        [ 1],
        [15],
        [ 3],
        [19],
        [ 9],
        [11],
        [17],
        [ 4],
        [ 6],
        [10],
        [15],
        [20],
        [ 4],
        [ 9],
        [ 3],
        [11],
        [20],
        [17],
        [ 6],
        [15],
        [ 3],
        [20],
        [ 9],
        [20],
        [20],
        [11],
        [ 4],
        [17],
        [ 6],
        [ 4],
        [ 3],
        [20],
        [ 9],
        [20],
        [20],
        [11],
        [20],
        [17],
        [15],
        [20],
        [ 3],
        [15],
        [20],
        [20],
        [20],
        [11],
        [20],
        [17],
        [ 4],
        [20],
        [ 3],
        [20],
        [20],
        [20],
        [20],
        [15],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([150, 1])
next_t : tensor([14,  5,  6,  5,  3,  2,  4,  4,  3,  2,  5,  3,  2, 12, 10]), torch.Size([15])
 ret : tensor([66, 53, 49, 44, 40, 38, 37, 34, 31, 29, 28, 24, 22, 21, 10]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.9037,  -27.7259,  -26.3906,  -25.6495,
         -24.8491,  -23.9790,  -40.6036,  -49.0949,  -57.7272,  -66.5234,
         -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
[[9, 12], [], [15, 7], [3, 13, 19], [6, 14], [17], [10, 4, 18], [1, 5], [0, 16], [11, 8, 2]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[3, 17, 15, 12, 5, 1, 2, 14, 0, 7], [8, 6, 13, 3, 12, 16, 10, 7, 1, 9], [14, 19, 7, 4, 6, 18, 10, 1, 2, 11], [9, 5, 7, 13, 6, 16, 14, 2, 4, 8], [9, 5, 7, 4, 6, 17, 16, 1, 2, 8], [9, 5, 2, 12, 6, 17, 18, 1, 16, 8], [9, 4, 12, 19, 14, 17, 2, 1, 16, 8], [12, 20, 5, 19, 14, 2, 4, 1, 16, 18], [12, 20, 18, 19, 14, 2, 4, 5, 16, 20], [12, 18, 20, 19, 14, 20, 4, 5, 20, 2], [20, 20, 18, 19, 20, 2, 4, 5, 20, 20], [20, 20, 20, 20, 2, 20, 4, 5, 18, 20], [20, 20, 20, 20, 2, 20, 18, 5, 20, 20], [20, 20, 20, 20, 20, 20, 18, 20, 20, 2], [20, 20, 20, 20, 20, 20, 20, 20, 20, 2]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 2, 7, 6, 3, 5, 4, 0, 9, 8]), array([6, 2, 4, 8, 5, 7, 1, 0, 3, 9]), array([2, 4, 7, 1, 5, 9, 3, 6, 8, 0]), array([0, 2, 4, 9, 6, 5, 8, 1, 7, 3]), array([0, 4, 5, 7, 9, 1, 2, 8, 6, 3]), array([0, 5, 7, 8, 9, 4, 1, 3, 6, 2]), array([3, 4, 7, 8, 2, 6, 0, 5, 9, 1]), array([0, 3, 4, 6, 8, 5, 2, 7, 9, 1]), array([0, 3, 4, 6, 7, 1, 9, 2, 8, 5]), array([3, 6, 7, 5, 2, 0, 4, 8, 9, 1]), array([6, 7, 4, 8, 5, 9, 3, 1, 0, 2]), array([7, 6, 4, 9, 1, 3, 2, 5, 0, 8]), array([6, 9, 1, 8, 4, 7, 5, 0, 2, 3]), array([9, 8, 4, 1, 0, 2, 5, 7, 6, 3])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
       False, False, False, False, False, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
       False,  True,  True, False, False, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
       False,  True,  True, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False,  True, False,
       False,  True,  True, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False,  True,  True, False,
       False,  True,  True, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False,  True,  True,  True,
        True,  True,  True, False,  True, False,  True, False,  True,
       False, False]), array([ True,  True, False,  True, False, False,  True,  True,  True,
        True,  True,  True, False,  True, False,  True, False,  True,
       False, False]), array([ True,  True, False,  True, False, False,  True,  True,  True,
        True,  True,  True, False,  True, False,  True,  True,  True,
       False, False]), array([ True,  True, False,  True, False, False,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False, False]), array([ True,  True, False,  True, False, False,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True, False,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 15
 next_t : [13, 3, 9, 4, 5, 2, 2, 2, 2, 3, 3, 5, 2, 8, 19], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[ 3, 17, 15, 12,  5,  1,  2, 14,  0,  7],
        [ 8,  6, 13,  3, 12, 16, 10,  7,  1,  9],
        [14, 19,  7,  4,  6, 18, 10,  1,  2, 11],
        [ 9,  5,  7, 13,  6, 16, 14,  2,  4,  8],
        [ 9,  5,  7,  4,  6, 17, 16,  1,  2,  8],
        [ 9,  5,  2, 12,  6, 17, 18,  1, 16,  8],
        [ 9,  4, 12, 19, 14, 17,  2,  1, 16,  8],
        [12, 20,  5, 19, 14,  2,  4,  1, 16, 18],
        [12, 20, 18, 19, 14,  2,  4,  5, 16, 20],
        [12, 18, 20, 19, 14, 20,  4,  5, 20,  2],
        [20, 20, 18, 19, 20,  2,  4,  5, 20, 20],
        [20, 20, 20, 20,  2, 20,  4,  5, 18, 20],
        [20, 20, 20, 20,  2, 20, 18,  5, 20, 20],
        [20, 20, 20, 20, 20, 20, 18, 20, 20,  2],
        [20, 20, 20, 20, 20, 20, 20, 20, 20,  2]]), torch.Size([15, 10])
 all_action : tensor([[ 3],
        [17],
        [15],
        [12],
        [ 5],
        [ 1],
        [ 2],
        [14],
        [ 0],
        [ 7],
        [ 8],
        [ 6],
        [13],
        [ 3],
        [12],
        [16],
        [10],
        [ 7],
        [ 1],
        [ 9],
        [14],
        [19],
        [ 7],
        [ 4],
        [ 6],
        [18],
        [10],
        [ 1],
        [ 2],
        [11],
        [ 9],
        [ 5],
        [ 7],
        [13],
        [ 6],
        [16],
        [14],
        [ 2],
        [ 4],
        [ 8],
        [ 9],
        [ 5],
        [ 7],
        [ 4],
        [ 6],
        [17],
        [16],
        [ 1],
        [ 2],
        [ 8],
        [ 9],
        [ 5],
        [ 2],
        [12],
        [ 6],
        [17],
        [18],
        [ 1],
        [16],
        [ 8],
        [ 9],
        [ 4],
        [12],
        [19],
        [14],
        [17],
        [ 2],
        [ 1],
        [16],
        [ 8],
        [12],
        [20],
        [ 5],
        [19],
        [14],
        [ 2],
        [ 4],
        [ 1],
        [16],
        [18],
        [12],
        [20],
        [18],
        [19],
        [14],
        [ 2],
        [ 4],
        [ 5],
        [16],
        [20],
        [12],
        [18],
        [20],
        [19],
        [14],
        [20],
        [ 4],
        [ 5],
        [20],
        [ 2],
        [20],
        [20],
        [18],
        [19],
        [20],
        [ 2],
        [ 4],
        [ 5],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [ 4],
        [ 5],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [18],
        [ 5],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2]]), torch.Size([150, 1])
next_t : tensor([13,  3,  9,  4,  5,  2,  2,  2,  2,  3,  3,  5,  2,  8, 19]), torch.Size([15])
 ret : tensor([68, 56, 54, 46, 43, 39, 38, 37, 36, 35, 33, 31, 27, 26, 19]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.9037,  -27.7259,  -27.0805,  -26.3906,
         -25.6495,  -32.2362,  -40.6036,  -49.0949,  -66.5234,  -75.5153,
         -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
[[5, 11, 3], [15, 10, 18, 1, 4], [2], [9, 19], [13, 14], [0, 17], [6], [7], [8], [16, 12]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[4, 15, 3, 6, 13, 7, 18, 12, 9, 1], [5, 15, 4, 9, 14, 0, 6, 8, 17, 1], [11, 15, 12, 9, 14, 0, 6, 8, 16, 7], [11, 10, 17, 9, 14, 0, 4, 8, 16, 18], [11, 10, 17, 6, 14, 0, 2, 18, 16, 4], [11, 18, 19, 4, 2, 1, 3, 8, 6, 16], [8, 18, 3, 6, 4, 2, 1, 7, 12, 16], [3, 4, 2, 8, 7, 19, 6, 1, 12, 16], [3, 1, 2, 17, 19, 6, 4, 12, 8, 7], [3, 20, 1, 19, 17, 6, 4, 7, 12, 8], [4, 1, 12, 19, 17, 20, 20, 7, 8, 6], [4, 1, 12, 20, 19, 20, 6, 17, 8, 20], [20, 1, 4, 19, 20, 12, 6, 20, 20, 17], [20, 20, 12, 19, 20, 20, 6, 4, 20, 17], [20, 20, 4, 19, 20, 17, 20, 20, 20, 12], [17, 4, 20, 20, 20, 12, 20, 20, 20, 20], [20, 20, 20, 20, 20, 17, 20, 20, 20, 12], [20, 20, 20, 20, 20, 20, 20, 20, 20, 12]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 4, 9, 2, 6, 7, 5, 8, 3, 0]), array([1, 3, 4, 5, 6, 7, 8, 0, 9, 2]), array([0, 3, 4, 5, 6, 2, 8, 7, 9, 1]), array([0, 1, 4, 5, 9, 3, 7, 2, 8, 6]), array([0, 3, 2, 9, 8, 4, 7, 1, 6, 5]), array([1, 9, 2, 8, 0, 3, 6, 5, 4, 7]), array([9, 1, 5, 7, 2, 4, 8, 0, 6, 3]), array([0, 2, 8, 5, 3, 1, 4, 9, 7, 6]), array([0, 7, 8, 6, 3, 4, 5, 9, 2, 1]), array([8, 9, 3, 1, 7, 2, 0, 4, 6, 5]), array([1, 8, 2, 6, 7, 0, 4, 3, 9, 5]), array([1, 6, 2, 5, 9, 3, 8, 7, 4, 0]), array([6, 7, 2, 3, 9, 0, 8, 4, 1, 5]), array([3, 2, 5, 9, 4, 0, 6, 7, 8, 1]), array([5, 0, 1, 6, 2, 9, 4, 3, 7, 8]), array([5, 9, 4, 2, 8, 1, 6, 3, 7, 0]), array([9, 3, 7, 4, 0, 6, 2, 5, 8, 1])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False, False, False,  True, False, False, False,
       False, False, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False, False, False,  True, False, False, False,
       False, False, False, False,  True, False,  True, False, False,
       False, False]), array([False, False, False, False, False,  True, False, False, False,
        True, False, False, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False, False, False,  True, False, False, False,
        True,  True, False, False,  True,  True,  True, False, False,
       False, False]), array([ True, False, False, False, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True, False, False,
       False, False]), array([ True, False, False, False, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True, False, False,
        True, False]), array([ True, False, False, False, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True, False,  True, False, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True, False,  True,  True, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True, False,  True,  True, False,  True, False,  True, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True, False,  True,  True, False,  True, False,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True,  True,  True,  True, False,  True, False,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [4, 5, 4, 3, 3, 5, 3, 6, 2, 7, 13, 7, 2, 4, 8, 5, 20, 8], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 4, 15,  3,  6, 13,  7, 18, 12,  9,  1],
        [ 5, 15,  4,  9, 14,  0,  6,  8, 17,  1],
        [11, 15, 12,  9, 14,  0,  6,  8, 16,  7],
        [11, 10, 17,  9, 14,  0,  4,  8, 16, 18],
        [11, 10, 17,  6, 14,  0,  2, 18, 16,  4],
        [11, 18, 19,  4,  2,  1,  3,  8,  6, 16],
        [ 8, 18,  3,  6,  4,  2,  1,  7, 12, 16],
        [ 3,  4,  2,  8,  7, 19,  6,  1, 12, 16],
        [ 3,  1,  2, 17, 19,  6,  4, 12,  8,  7],
        [ 3, 20,  1, 19, 17,  6,  4,  7, 12,  8],
        [ 4,  1, 12, 19, 17, 20, 20,  7,  8,  6],
        [ 4,  1, 12, 20, 19, 20,  6, 17,  8, 20],
        [20,  1,  4, 19, 20, 12,  6, 20, 20, 17],
        [20, 20, 12, 19, 20, 20,  6,  4, 20, 17],
        [20, 20,  4, 19, 20, 17, 20, 20, 20, 12],
        [17,  4, 20, 20, 20, 12, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 17, 20, 20, 20, 12],
        [20, 20, 20, 20, 20, 20, 20, 20, 20, 12]]), torch.Size([18, 10])
 all_action : tensor([[ 4],
        [15],
        [ 3],
        [ 6],
        [13],
        [ 7],
        [18],
        [12],
        [ 9],
        [ 1],
        [ 5],
        [15],
        [ 4],
        [ 9],
        [14],
        [ 0],
        [ 6],
        [ 8],
        [17],
        [ 1],
        [11],
        [15],
        [12],
        [ 9],
        [14],
        [ 0],
        [ 6],
        [ 8],
        [16],
        [ 7],
        [11],
        [10],
        [17],
        [ 9],
        [14],
        [ 0],
        [ 4],
        [ 8],
        [16],
        [18],
        [11],
        [10],
        [17],
        [ 6],
        [14],
        [ 0],
        [ 2],
        [18],
        [16],
        [ 4],
        [11],
        [18],
        [19],
        [ 4],
        [ 2],
        [ 1],
        [ 3],
        [ 8],
        [ 6],
        [16],
        [ 8],
        [18],
        [ 3],
        [ 6],
        [ 4],
        [ 2],
        [ 1],
        [ 7],
        [12],
        [16],
        [ 3],
        [ 4],
        [ 2],
        [ 8],
        [ 7],
        [19],
        [ 6],
        [ 1],
        [12],
        [16],
        [ 3],
        [ 1],
        [ 2],
        [17],
        [19],
        [ 6],
        [ 4],
        [12],
        [ 8],
        [ 7],
        [ 3],
        [20],
        [ 1],
        [19],
        [17],
        [ 6],
        [ 4],
        [ 7],
        [12],
        [ 8],
        [ 4],
        [ 1],
        [12],
        [19],
        [17],
        [20],
        [20],
        [ 7],
        [ 8],
        [ 6],
        [ 4],
        [ 1],
        [12],
        [20],
        [19],
        [20],
        [ 6],
        [17],
        [ 8],
        [20],
        [20],
        [ 1],
        [ 4],
        [19],
        [20],
        [12],
        [ 6],
        [20],
        [20],
        [17],
        [20],
        [20],
        [12],
        [19],
        [20],
        [20],
        [ 6],
        [ 4],
        [20],
        [17],
        [20],
        [20],
        [ 4],
        [19],
        [20],
        [17],
        [20],
        [20],
        [20],
        [12],
        [17],
        [ 4],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [17],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12]]), torch.Size([180, 1])
next_t : tensor([ 4,  5,  4,  3,  3,  5,  3,  6,  2,  7, 13,  7,  2,  4,  8,  5, 20,  8]), torch.Size([18])
 ret : tensor([92, 89, 85, 82, 80, 78, 74, 72, 67, 66, 60, 48, 42, 41, 38, 31, 27,  8]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -26.3906,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[19], [1, 11], [18, 10, 12], [13, 15], [17], [9, 6], [16, 4, 7], [3, 2], [5, 14], [0, 8]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[7, 1, 18, 13, 17, 9, 16, 3, 12, 0], [14, 1, 7, 13, 17, 9, 16, 3, 5, 0], [14, 1, 10, 13, 17, 19, 16, 3, 15, 0], [15, 1, 10, 19, 7, 11, 16, 3, 5, 0], [15, 1, 10, 14, 8, 11, 16, 3, 5, 7], [14, 19, 10, 12, 8, 2, 16, 3, 5, 11], [7, 14, 10, 15, 19, 6, 4, 12, 5, 8], [2, 11, 7, 15, 14, 6, 4, 19, 5, 8], [7, 14, 11, 15, 19, 6, 4, 2, 12, 8], [12, 2, 7, 11, 19, 6, 4, 20, 14, 8], [14, 19, 12, 20, 11, 7, 20, 20, 2, 8], [19, 11, 12, 20, 20, 20, 7, 2, 14, 20], [19, 11, 12, 20, 20, 20, 7, 20, 20, 20], [19, 11, 12, 20, 20, 20, 20, 20, 20, 20], [20, 11, 12, 20, 20, 20, 20, 20, 20, 20], [20, 11, 20, 20, 20, 20, 20, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 3, 4, 5, 6, 7, 9, 2, 0, 8]), array([1, 3, 4, 6, 7, 9, 0, 5, 2, 8]), array([1, 2, 6, 7, 9, 0, 5, 8, 4, 3]), array([1, 2, 6, 7, 9, 0, 3, 8, 4, 5]), array([2, 6, 7, 8, 3, 0, 9, 4, 5, 1]), array([2, 8, 3, 1, 6, 0, 9, 7, 4, 5]), array([3, 5, 6, 8, 9, 1, 4, 0, 7, 2]), array([3, 5, 6, 9, 7, 4, 0, 8, 2, 1]), array([5, 6, 9, 2, 1, 0, 8, 3, 4, 7]), array([9, 4, 1, 8, 2, 5, 0, 7, 6, 3]), array([0, 8, 6, 7, 1, 2, 4, 9, 3, 5]), array([0, 1, 2, 6, 7, 5, 3, 8, 4, 9]), array([0, 1, 2, 7, 9, 5, 6, 8, 3, 4]), array([1, 2, 9, 6, 3, 5, 8, 4, 7, 0]), array([1, 6, 3, 9, 8, 4, 0, 5, 2, 7])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
        True, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False, False, False,
        True, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False,  True, False, False, False,  True,
        True, False]), array([ True, False, False, False, False, False, False, False, False,
        True, False, False, False,  True, False, False, False,  True,
        True, False]), array([ True,  True, False, False, False, False, False, False, False,
        True, False, False, False,  True, False, False, False,  True,
        True, False]), array([ True,  True, False,  True, False, False, False, False, False,
        True, False, False, False,  True, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True, False, False, False, False, False,
        True,  True, False, False,  True, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True, False,  True, False, False, False,
        True,  True, False, False,  True, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True, False,  True, False, False, False,
        True,  True, False, False,  True, False,  True,  True,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True, False, False,
        True,  True, False, False,  True, False,  True,  True,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True, False, False,  True, False,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True, False, False,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False, False,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [12, 2, 2, 2, 3, 2, 5, 5, 2, 4, 2, 18, 5, 3, 3, 2], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[ 7,  1, 18, 13, 17,  9, 16,  3, 12,  0],
        [14,  1,  7, 13, 17,  9, 16,  3,  5,  0],
        [14,  1, 10, 13, 17, 19, 16,  3, 15,  0],
        [15,  1, 10, 19,  7, 11, 16,  3,  5,  0],
        [15,  1, 10, 14,  8, 11, 16,  3,  5,  7],
        [14, 19, 10, 12,  8,  2, 16,  3,  5, 11],
        [ 7, 14, 10, 15, 19,  6,  4, 12,  5,  8],
        [ 2, 11,  7, 15, 14,  6,  4, 19,  5,  8],
        [ 7, 14, 11, 15, 19,  6,  4,  2, 12,  8],
        [12,  2,  7, 11, 19,  6,  4, 20, 14,  8],
        [14, 19, 12, 20, 11,  7, 20, 20,  2,  8],
        [19, 11, 12, 20, 20, 20,  7,  2, 14, 20],
        [19, 11, 12, 20, 20, 20,  7, 20, 20, 20],
        [19, 11, 12, 20, 20, 20, 20, 20, 20, 20],
        [20, 11, 12, 20, 20, 20, 20, 20, 20, 20],
        [20, 11, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[ 7],
        [ 1],
        [18],
        [13],
        [17],
        [ 9],
        [16],
        [ 3],
        [12],
        [ 0],
        [14],
        [ 1],
        [ 7],
        [13],
        [17],
        [ 9],
        [16],
        [ 3],
        [ 5],
        [ 0],
        [14],
        [ 1],
        [10],
        [13],
        [17],
        [19],
        [16],
        [ 3],
        [15],
        [ 0],
        [15],
        [ 1],
        [10],
        [19],
        [ 7],
        [11],
        [16],
        [ 3],
        [ 5],
        [ 0],
        [15],
        [ 1],
        [10],
        [14],
        [ 8],
        [11],
        [16],
        [ 3],
        [ 5],
        [ 7],
        [14],
        [19],
        [10],
        [12],
        [ 8],
        [ 2],
        [16],
        [ 3],
        [ 5],
        [11],
        [ 7],
        [14],
        [10],
        [15],
        [19],
        [ 6],
        [ 4],
        [12],
        [ 5],
        [ 8],
        [ 2],
        [11],
        [ 7],
        [15],
        [14],
        [ 6],
        [ 4],
        [19],
        [ 5],
        [ 8],
        [ 7],
        [14],
        [11],
        [15],
        [19],
        [ 6],
        [ 4],
        [ 2],
        [12],
        [ 8],
        [12],
        [ 2],
        [ 7],
        [11],
        [19],
        [ 6],
        [ 4],
        [20],
        [14],
        [ 8],
        [14],
        [19],
        [12],
        [20],
        [11],
        [ 7],
        [20],
        [20],
        [ 2],
        [ 8],
        [19],
        [11],
        [12],
        [20],
        [20],
        [20],
        [ 7],
        [ 2],
        [14],
        [20],
        [19],
        [11],
        [12],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [19],
        [11],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([12,  2,  2,  2,  3,  2,  5,  5,  2,  4,  2, 18,  5,  3,  3,  2]), torch.Size([16])
 ret : tensor([57, 46, 45, 44, 43, 41, 40, 36, 32, 31, 28, 27, 10,  6,  4,  2]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.3321,  -27.7259,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -49.0949,  -57.7272,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[13, 4, 9], [0, 16], [17, 1], [11], [3, 7], [10, 5, 15], [19, 8], [14], [12, 6], [2, 18]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[17, 0, 16, 6, 9, 10, 7, 14, 12, 5], [13, 8, 16, 18, 3, 11, 6, 7, 12, 19], [13, 0, 17, 6, 16, 5, 19, 4, 18, 2], [14, 0, 17, 16, 7, 5, 19, 1, 6, 2], [18, 0, 17, 16, 7, 5, 8, 1, 6, 2], [4, 9, 17, 1, 7, 5, 8, 14, 6, 2], [4, 15, 17, 16, 7, 5, 8, 14, 6, 18], [4, 1, 17, 16, 7, 15, 8, 14, 6, 18], [4, 9, 17, 16, 11, 15, 8, 14, 6, 18], [1, 16, 17, 11, 9, 15, 8, 14, 6, 18], [9, 20, 1, 11, 16, 15, 8, 14, 6, 18], [9, 20, 1, 11, 16, 15, 8, 14, 20, 18], [9, 20, 1, 11, 20, 20, 8, 14, 16, 18], [9, 16, 1, 11, 20, 20, 8, 20, 20, 18], [9, 20, 1, 11, 20, 16, 20, 20, 20, 18], [9, 20, 20, 11, 20, 20, 20, 16, 20, 20], [20, 16, 20, 11, 20, 20, 20, 20, 20, 20], [20, 16, 20, 20, 20, 20, 20, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([8, 0, 3, 4, 1, 7, 5, 2, 9, 6]), array([0, 9, 3, 4, 8, 7, 5, 1, 2, 6]), array([1, 5, 6, 9, 0, 7, 8, 3, 4, 2]), array([1, 2, 4, 5, 8, 9, 3, 6, 0, 7]), array([2, 4, 5, 6, 8, 9, 1, 0, 7, 3]), array([0, 2, 4, 5, 6, 7, 8, 9, 1, 3]), array([0, 2, 4, 6, 7, 8, 9, 3, 1, 5]), array([0, 2, 5, 6, 7, 8, 9, 4, 1, 3]), array([2, 5, 6, 7, 8, 9, 1, 0, 3, 4]), array([5, 6, 7, 8, 9, 3, 0, 4, 2, 1]), array([0, 2, 5, 6, 7, 9, 3, 4, 1, 8]), array([0, 2, 3, 6, 7, 9, 8, 5, 1, 4]), array([0, 2, 3, 6, 9, 1, 4, 7, 5, 8]), array([0, 2, 3, 9, 5, 4, 6, 1, 8, 7]), array([0, 3, 7, 2, 6, 4, 1, 9, 8, 5]), array([3, 1, 0, 8, 7, 6, 9, 5, 4, 2]), array([1, 8, 4, 6, 3, 0, 7, 5, 2, 9])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True, False,  True,  True, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True, False,  True,  True, False, False, False, False,
       False,  True]), array([ True, False, False,  True, False, False, False, False, False,
       False,  True, False,  True,  True, False, False, False, False,
       False,  True]), array([ True, False,  True,  True, False, False, False, False, False,
       False,  True, False,  True,  True, False, False, False, False,
       False,  True]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True, False,  True,  True, False, False, False, False,
       False,  True]), array([ True, False,  True,  True, False,  True, False,  True, False,
       False,  True, False,  True,  True, False, False, False, False,
       False,  True]), array([ True, False,  True,  True,  True,  True, False,  True, False,
       False,  True, False,  True,  True, False, False, False, False,
       False,  True]), array([ True, False,  True,  True,  True,  True, False,  True, False,
       False,  True, False,  True,  True, False, False, False,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True, False,
       False,  True, False,  True,  True, False, False, False,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True, False,
       False,  True, False,  True,  True, False,  True, False,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True, False,
       False,  True, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
       False,  True, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 18
 next_t : [6, 7, 7, 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 2, 35], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[17,  0, 16,  6,  9, 10,  7, 14, 12,  5],
        [13,  8, 16, 18,  3, 11,  6,  7, 12, 19],
        [13,  0, 17,  6, 16,  5, 19,  4, 18,  2],
        [14,  0, 17, 16,  7,  5, 19,  1,  6,  2],
        [18,  0, 17, 16,  7,  5,  8,  1,  6,  2],
        [ 4,  9, 17,  1,  7,  5,  8, 14,  6,  2],
        [ 4, 15, 17, 16,  7,  5,  8, 14,  6, 18],
        [ 4,  1, 17, 16,  7, 15,  8, 14,  6, 18],
        [ 4,  9, 17, 16, 11, 15,  8, 14,  6, 18],
        [ 1, 16, 17, 11,  9, 15,  8, 14,  6, 18],
        [ 9, 20,  1, 11, 16, 15,  8, 14,  6, 18],
        [ 9, 20,  1, 11, 16, 15,  8, 14, 20, 18],
        [ 9, 20,  1, 11, 20, 20,  8, 14, 16, 18],
        [ 9, 16,  1, 11, 20, 20,  8, 20, 20, 18],
        [ 9, 20,  1, 11, 20, 16, 20, 20, 20, 18],
        [ 9, 20, 20, 11, 20, 20, 20, 16, 20, 20],
        [20, 16, 20, 11, 20, 20, 20, 20, 20, 20],
        [20, 16, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[17],
        [ 0],
        [16],
        [ 6],
        [ 9],
        [10],
        [ 7],
        [14],
        [12],
        [ 5],
        [13],
        [ 8],
        [16],
        [18],
        [ 3],
        [11],
        [ 6],
        [ 7],
        [12],
        [19],
        [13],
        [ 0],
        [17],
        [ 6],
        [16],
        [ 5],
        [19],
        [ 4],
        [18],
        [ 2],
        [14],
        [ 0],
        [17],
        [16],
        [ 7],
        [ 5],
        [19],
        [ 1],
        [ 6],
        [ 2],
        [18],
        [ 0],
        [17],
        [16],
        [ 7],
        [ 5],
        [ 8],
        [ 1],
        [ 6],
        [ 2],
        [ 4],
        [ 9],
        [17],
        [ 1],
        [ 7],
        [ 5],
        [ 8],
        [14],
        [ 6],
        [ 2],
        [ 4],
        [15],
        [17],
        [16],
        [ 7],
        [ 5],
        [ 8],
        [14],
        [ 6],
        [18],
        [ 4],
        [ 1],
        [17],
        [16],
        [ 7],
        [15],
        [ 8],
        [14],
        [ 6],
        [18],
        [ 4],
        [ 9],
        [17],
        [16],
        [11],
        [15],
        [ 8],
        [14],
        [ 6],
        [18],
        [ 1],
        [16],
        [17],
        [11],
        [ 9],
        [15],
        [ 8],
        [14],
        [ 6],
        [18],
        [ 9],
        [20],
        [ 1],
        [11],
        [16],
        [15],
        [ 8],
        [14],
        [ 6],
        [18],
        [ 9],
        [20],
        [ 1],
        [11],
        [16],
        [15],
        [ 8],
        [14],
        [20],
        [18],
        [ 9],
        [20],
        [ 1],
        [11],
        [20],
        [20],
        [ 8],
        [14],
        [16],
        [18],
        [ 9],
        [16],
        [ 1],
        [11],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [18],
        [ 9],
        [20],
        [ 1],
        [11],
        [20],
        [16],
        [20],
        [20],
        [20],
        [18],
        [ 9],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [16],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 6,  7,  7,  5,  3,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  6,  2, 35]), torch.Size([18])
 ret : tensor([74, 69, 63, 57, 53, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 36, 35]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -28.9037,  -28.3321,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,
         -49.0949,  -57.7272,  -66.5234,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:10<00:00, 10.86s/it]
[[0, 11], [1, 16], [2, 6, 8], [10, 12, 4], [19], [5, 15], [13], [7, 14], [17, 18], [9, 3]]
  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[17, 4], [19, 18, 11], [5, 14, 7], [3], [13, 10], [], [2, 16], [12, 15, 8], [9, 1], [6, 0]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[17, 19, 11, 3, 18, 2, 12, 7, 1, 6], [2, 19, 5, 3, 13, 4, 14, 12, 11, 6], [11, 19, 5, 8, 13, 9, 14, 12, 1, 6], [4, 19, 5, 14, 13, 1, 10, 12, 9, 15], [0, 14, 8, 11, 13, 7, 15, 12, 9, 2], [7, 11, 1, 15, 0, 18, 2, 12, 9, 10], [11, 1, 14, 7, 4, 18, 2, 15, 9, 0], [1, 10, 14, 8, 4, 7, 2, 15, 11, 0], [4, 11, 18, 8, 7, 10, 2, 15, 1, 0], [11, 16, 1, 7, 10, 8, 20, 15, 4, 18], [4, 18, 7, 20, 10, 20, 16, 8, 1, 11], [4, 18, 16, 20, 20, 11, 10, 8, 1, 20], [10, 18, 20, 11, 20, 20, 16, 8, 1, 20], [20, 18, 11, 20, 20, 20, 16, 8, 10, 20], [11, 20, 20, 20, 10, 20, 16, 8, 20, 20], [20, 20, 20, 20, 10, 20, 16, 11, 20, 20], [20, 20, 20, 20, 10, 11, 20, 20, 20, 20], [20, 11, 20, 20, 20, 20, 20, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 3, 9, 6, 0, 7, 4, 5, 2, 8]), array([1, 2, 4, 7, 9, 6, 5, 8, 3, 0]), array([1, 2, 4, 7, 3, 5, 0, 6, 9, 8]), array([4, 7, 8, 3, 0, 1, 5, 9, 6, 2]), array([7, 8, 9, 1, 5, 4, 6, 0, 3, 2]), array([6, 8, 9, 1, 3, 4, 2, 7, 5, 0]), array([2, 6, 7, 9, 4, 0, 3, 5, 1, 8]), array([6, 7, 9, 0, 4, 8, 3, 2, 5, 1]), array([7, 4, 2, 8, 3, 1, 5, 0, 9, 6]), array([9, 4, 6, 7, 8, 0, 2, 1, 3, 5]), array([0, 1, 7, 8, 5, 6, 2, 3, 4, 9]), array([1, 7, 8, 0, 6, 3, 5, 4, 2, 9]), array([1, 6, 7, 2, 8, 9, 5, 3, 4, 0]), array([6, 7, 0, 4, 5, 8, 1, 2, 9, 3]), array([4, 6, 7, 5, 2, 1, 9, 8, 3, 0]), array([4, 5, 1, 2, 6, 3, 9, 7, 0, 8]), array([1, 2, 6, 5, 8, 9, 7, 3, 4, 0])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False,  True, False, False,  True, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False,  True, False,  True,  True, False, False,
       False, False, False, False, False, False, False, False,  True,
       False,  True]), array([False, False, False,  True, False,  True,  True, False, False,
       False, False, False, False,  True, False, False, False,  True,
       False,  True]), array([False, False, False,  True, False,  True,  True, False, False,
       False, False, False,  True,  True, False, False, False,  True,
       False,  True]), array([False, False, False,  True, False,  True,  True, False, False,
        True, False, False,  True,  True, False, False, False,  True,
       False,  True]), array([False, False, False,  True, False,  True,  True, False, False,
        True, False, False,  True,  True,  True, False, False,  True,
       False,  True]), array([ True, False,  True,  True, False,  True,  True, False, False,
        True, False, False,  True,  True,  True, False, False,  True,
       False,  True]), array([ True, False,  True,  True, False,  True,  True, False, False,
        True, False, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True, False,  True,  True, False,  True,  True,  True, False,
        True, False, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True, False,
        True, False, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [6, 5, 4, 2, 3, 3, 3, 4, 4, 2, 11, 2, 2, 3, 6, 2, 6, 45], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[17, 19, 11,  3, 18,  2, 12,  7,  1,  6],
        [ 2, 19,  5,  3, 13,  4, 14, 12, 11,  6],
        [11, 19,  5,  8, 13,  9, 14, 12,  1,  6],
        [ 4, 19,  5, 14, 13,  1, 10, 12,  9, 15],
        [ 0, 14,  8, 11, 13,  7, 15, 12,  9,  2],
        [ 7, 11,  1, 15,  0, 18,  2, 12,  9, 10],
        [11,  1, 14,  7,  4, 18,  2, 15,  9,  0],
        [ 1, 10, 14,  8,  4,  7,  2, 15, 11,  0],
        [ 4, 11, 18,  8,  7, 10,  2, 15,  1,  0],
        [11, 16,  1,  7, 10,  8, 20, 15,  4, 18],
        [ 4, 18,  7, 20, 10, 20, 16,  8,  1, 11],
        [ 4, 18, 16, 20, 20, 11, 10,  8,  1, 20],
        [10, 18, 20, 11, 20, 20, 16,  8,  1, 20],
        [20, 18, 11, 20, 20, 20, 16,  8, 10, 20],
        [11, 20, 20, 20, 10, 20, 16,  8, 20, 20],
        [20, 20, 20, 20, 10, 20, 16, 11, 20, 20],
        [20, 20, 20, 20, 10, 11, 20, 20, 20, 20],
        [20, 11, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[17],
        [19],
        [11],
        [ 3],
        [18],
        [ 2],
        [12],
        [ 7],
        [ 1],
        [ 6],
        [ 2],
        [19],
        [ 5],
        [ 3],
        [13],
        [ 4],
        [14],
        [12],
        [11],
        [ 6],
        [11],
        [19],
        [ 5],
        [ 8],
        [13],
        [ 9],
        [14],
        [12],
        [ 1],
        [ 6],
        [ 4],
        [19],
        [ 5],
        [14],
        [13],
        [ 1],
        [10],
        [12],
        [ 9],
        [15],
        [ 0],
        [14],
        [ 8],
        [11],
        [13],
        [ 7],
        [15],
        [12],
        [ 9],
        [ 2],
        [ 7],
        [11],
        [ 1],
        [15],
        [ 0],
        [18],
        [ 2],
        [12],
        [ 9],
        [10],
        [11],
        [ 1],
        [14],
        [ 7],
        [ 4],
        [18],
        [ 2],
        [15],
        [ 9],
        [ 0],
        [ 1],
        [10],
        [14],
        [ 8],
        [ 4],
        [ 7],
        [ 2],
        [15],
        [11],
        [ 0],
        [ 4],
        [11],
        [18],
        [ 8],
        [ 7],
        [10],
        [ 2],
        [15],
        [ 1],
        [ 0],
        [11],
        [16],
        [ 1],
        [ 7],
        [10],
        [ 8],
        [20],
        [15],
        [ 4],
        [18],
        [ 4],
        [18],
        [ 7],
        [20],
        [10],
        [20],
        [16],
        [ 8],
        [ 1],
        [11],
        [ 4],
        [18],
        [16],
        [20],
        [20],
        [11],
        [10],
        [ 8],
        [ 1],
        [20],
        [10],
        [18],
        [20],
        [11],
        [20],
        [20],
        [16],
        [ 8],
        [ 1],
        [20],
        [20],
        [18],
        [11],
        [20],
        [20],
        [20],
        [16],
        [ 8],
        [10],
        [20],
        [11],
        [20],
        [20],
        [20],
        [10],
        [20],
        [16],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [10],
        [20],
        [16],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [10],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 6,  5,  4,  2,  3,  3,  3,  4,  4,  2, 11,  2,  2,  3,  6,  2,  6, 45]), torch.Size([18])
 ret : tensor([96, 91, 87, 84, 83, 81, 79, 77, 74, 71, 70, 60, 59, 58, 56, 51, 50, 45]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -24.8491,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[0, 12, 16, 5], [9], [1], [13, 11], [19, 8], [14, 7, 4], [18, 17], [10, 6], [15, 2], [3]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[0, 8, 16, 14, 1, 17, 18, 2, 6, 11], [12, 5, 13, 2, 1, 14, 18, 4, 8, 17], [12, 8, 3, 9, 19, 11, 18, 10, 4, 17], [12, 6, 4, 13, 19, 5, 1, 10, 16, 9], [12, 16, 8, 4, 19, 7, 1, 5, 15, 2], [16, 5, 6, 9, 19, 7, 17, 1, 15, 2], [16, 3, 11, 4, 9, 7, 17, 6, 15, 8], [16, 8, 5, 11, 4, 1, 17, 6, 15, 3], [16, 9, 4, 11, 8, 2, 17, 6, 5, 3], [5, 9, 1, 11, 8, 2, 17, 6, 4, 3], [5, 9, 20, 11, 8, 4, 1, 6, 2, 3], [20, 9, 5, 20, 8, 20, 1, 20, 2, 4], [20, 20, 4, 20, 8, 20, 5, 2, 1, 20], [5, 1, 20, 20, 20, 20, 20, 20, 2, 4], [5, 20, 20, 20, 20, 4, 1, 20, 20, 20], [20, 1, 20, 20, 20, 4, 20, 20, 20, 20], [20, 20, 1, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([6, 0, 5, 8, 3, 1, 4, 2, 9, 7]), array([0, 6, 2, 3, 4, 5, 7, 9, 8, 1]), array([0, 4, 7, 6, 8, 9, 2, 5, 1, 3]), array([0, 4, 6, 1, 8, 9, 5, 3, 7, 2]), array([4, 5, 8, 7, 0, 9, 6, 1, 3, 2]), array([0, 5, 6, 8, 1, 9, 3, 2, 7, 4]), array([0, 6, 7, 8, 9, 2, 4, 1, 3, 5]), array([0, 3, 6, 7, 9, 1, 2, 4, 8, 5]), array([1, 3, 6, 7, 9, 0, 2, 4, 5, 8]), array([1, 3, 7, 9, 5, 4, 8, 6, 0, 2]), array([1, 4, 9, 6, 8, 2, 5, 7, 3, 0]), array([4, 7, 6, 2, 8, 0, 3, 9, 5, 1]), array([0, 1, 8, 9, 5, 2, 4, 7, 3, 6]), array([0, 6, 5, 3, 7, 4, 8, 1, 9, 2]), array([5, 1, 0, 4, 9, 7, 6, 3, 8, 2]), array([2, 8, 6, 7, 1, 9, 5, 4, 3, 0])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
        True, False]), array([ True, False, False, False, False, False, False, False, False,
       False,  True, False, False,  True,  True, False, False, False,
        True, False]), array([ True, False, False, False, False, False, False, False, False,
       False,  True, False,  True,  True,  True, False, False, False,
        True, False]), array([ True, False, False, False, False, False, False, False, False,
       False,  True, False,  True,  True,  True, False, False, False,
        True,  True]), array([ True, False, False, False, False, False, False,  True, False,
       False,  True, False,  True,  True,  True, False, False, False,
        True,  True]), array([ True, False, False, False, False, False, False,  True, False,
       False,  True, False,  True,  True,  True,  True, False, False,
        True,  True]), array([ True, False, False, False, False, False, False,  True, False,
       False,  True, False,  True,  True,  True,  True,  True, False,
        True,  True]), array([ True, False, False, False, False, False, False,  True, False,
       False,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False, False,  True, False, False,  True,  True, False,
       False,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False, False,  True, False, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False, False,  True, False, False,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True, False, False,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [7, 3, 6, 3, 3, 3, 3, 2, 2, 2, 6, 4, 5, 12, 8, 5, 14], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 0,  8, 16, 14,  1, 17, 18,  2,  6, 11],
        [12,  5, 13,  2,  1, 14, 18,  4,  8, 17],
        [12,  8,  3,  9, 19, 11, 18, 10,  4, 17],
        [12,  6,  4, 13, 19,  5,  1, 10, 16,  9],
        [12, 16,  8,  4, 19,  7,  1,  5, 15,  2],
        [16,  5,  6,  9, 19,  7, 17,  1, 15,  2],
        [16,  3, 11,  4,  9,  7, 17,  6, 15,  8],
        [16,  8,  5, 11,  4,  1, 17,  6, 15,  3],
        [16,  9,  4, 11,  8,  2, 17,  6,  5,  3],
        [ 5,  9,  1, 11,  8,  2, 17,  6,  4,  3],
        [ 5,  9, 20, 11,  8,  4,  1,  6,  2,  3],
        [20,  9,  5, 20,  8, 20,  1, 20,  2,  4],
        [20, 20,  4, 20,  8, 20,  5,  2,  1, 20],
        [ 5,  1, 20, 20, 20, 20, 20, 20,  2,  4],
        [ 5, 20, 20, 20, 20,  4,  1, 20, 20, 20],
        [20,  1, 20, 20, 20,  4, 20, 20, 20, 20],
        [20, 20,  1, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 0],
        [ 8],
        [16],
        [14],
        [ 1],
        [17],
        [18],
        [ 2],
        [ 6],
        [11],
        [12],
        [ 5],
        [13],
        [ 2],
        [ 1],
        [14],
        [18],
        [ 4],
        [ 8],
        [17],
        [12],
        [ 8],
        [ 3],
        [ 9],
        [19],
        [11],
        [18],
        [10],
        [ 4],
        [17],
        [12],
        [ 6],
        [ 4],
        [13],
        [19],
        [ 5],
        [ 1],
        [10],
        [16],
        [ 9],
        [12],
        [16],
        [ 8],
        [ 4],
        [19],
        [ 7],
        [ 1],
        [ 5],
        [15],
        [ 2],
        [16],
        [ 5],
        [ 6],
        [ 9],
        [19],
        [ 7],
        [17],
        [ 1],
        [15],
        [ 2],
        [16],
        [ 3],
        [11],
        [ 4],
        [ 9],
        [ 7],
        [17],
        [ 6],
        [15],
        [ 8],
        [16],
        [ 8],
        [ 5],
        [11],
        [ 4],
        [ 1],
        [17],
        [ 6],
        [15],
        [ 3],
        [16],
        [ 9],
        [ 4],
        [11],
        [ 8],
        [ 2],
        [17],
        [ 6],
        [ 5],
        [ 3],
        [ 5],
        [ 9],
        [ 1],
        [11],
        [ 8],
        [ 2],
        [17],
        [ 6],
        [ 4],
        [ 3],
        [ 5],
        [ 9],
        [20],
        [11],
        [ 8],
        [ 4],
        [ 1],
        [ 6],
        [ 2],
        [ 3],
        [20],
        [ 9],
        [ 5],
        [20],
        [ 8],
        [20],
        [ 1],
        [20],
        [ 2],
        [ 4],
        [20],
        [20],
        [ 4],
        [20],
        [ 8],
        [20],
        [ 5],
        [ 2],
        [ 1],
        [20],
        [ 5],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [ 4],
        [ 5],
        [20],
        [20],
        [20],
        [20],
        [ 4],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 7,  3,  6,  3,  3,  3,  3,  2,  2,  2,  6,  4,  5, 12,  8,  5, 14]), torch.Size([17])
 ret : tensor([72, 66, 64, 59, 57, 55, 53, 51, 50, 49, 48, 43, 40, 36, 25, 18, 14]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 5.0000e-01, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 5.0000e-01, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 5.0000e-01, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[11, 17], [2, 18], [5, 12], [3, 0], [14, 8], [16, 9], [7], [15, 13], [19, 6, 1], [10, 4]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[8, 2, 5, 3, 16, 4, 11, 15, 18, 17], [14, 2, 5, 13, 8, 16, 19, 15, 7, 6], [4, 18, 5, 0, 14, 16, 12, 15, 9, 7], [4, 18, 17, 0, 14, 16, 9, 15, 1, 19], [11, 18, 7, 0, 14, 12, 17, 15, 6, 10], [11, 18, 12, 1, 14, 4, 7, 13, 19, 10], [11, 6, 17, 7, 12, 8, 9, 13, 19, 10], [11, 7, 8, 17, 12, 9, 6, 13, 19, 1], [11, 1, 7, 6, 12, 9, 8, 13, 4, 17], [20, 12, 7, 8, 6, 9, 1, 13, 17, 4], [17, 12, 1, 7, 8, 9, 20, 4, 6, 20], [17, 1, 20, 12, 7, 20, 20, 8, 6, 4], [17, 8, 1, 7, 20, 20, 12, 20, 20, 4], [20, 12, 20, 7, 20, 8, 20, 1, 20, 4], [20, 12, 20, 20, 20, 8, 7, 20, 1, 20], [20, 20, 8, 20, 20, 20, 7, 20, 20, 12], [20, 20, 20, 20, 8, 20, 20, 20, 20, 12], [20, 20, 12, 20, 20, 20, 20, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 2, 7, 3, 5, 8, 6, 4, 0, 9]), array([2, 5, 7, 0, 9, 4, 3, 8, 6, 1]), array([1, 3, 4, 5, 7, 8, 2, 6, 0, 9]), array([1, 3, 4, 7, 0, 8, 2, 9, 6, 5]), array([0, 1, 4, 9, 5, 3, 7, 8, 6, 2]), array([0, 7, 8, 9, 1, 5, 2, 6, 4, 3]), array([0, 7, 8, 3, 6, 1, 9, 4, 2, 5]), array([0, 5, 7, 1, 6, 9, 3, 8, 2, 4]), array([5, 7, 2, 4, 8, 6, 9, 3, 1, 0]), array([5, 3, 0, 8, 2, 1, 4, 7, 9, 6]), array([3, 1, 8, 9, 4, 0, 7, 2, 6, 5]), array([0, 9, 1, 6, 2, 3, 8, 7, 4, 5]), array([9, 5, 7, 1, 3, 4, 0, 8, 2, 6]), array([6, 1, 5, 8, 9, 4, 3, 0, 7, 2]), array([6, 9, 2, 8, 1, 4, 0, 7, 3, 5]), array([9, 4, 8, 5, 7, 0, 1, 2, 6, 3]), array([2, 1, 0, 5, 7, 4, 3, 8, 9, 6])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True,  True, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True,  True, False,  True, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True,  True, False,  True, False, False, False,
       False, False, False, False, False, False, False,  True, False,
       False, False]), array([ True, False,  True,  True, False,  True, False, False, False,
       False, False, False, False, False, False,  True,  True, False,
       False, False]), array([ True, False,  True,  True, False,  True, False, False, False,
       False, False, False, False, False,  True,  True,  True, False,
        True, False]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True, False, False, False,  True,  True,  True, False,
        True, False]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True, False, False, False,  True,  True,  True, False,
        True,  True]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True,  True, False, False,  True,  True,  True, False,
        True,  True]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True,  True, False,  True,  True,  True,  True, False,
        True,  True]), array([ True, False,  True,  True, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True,  True]), array([ True, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True,  True]), array([ True, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [5, 6, 3, 2, 2, 4, 4, 3, 2, 4, 3, 14, 4, 4, 13, 3, 13, 18], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 8,  2,  5,  3, 16,  4, 11, 15, 18, 17],
        [14,  2,  5, 13,  8, 16, 19, 15,  7,  6],
        [ 4, 18,  5,  0, 14, 16, 12, 15,  9,  7],
        [ 4, 18, 17,  0, 14, 16,  9, 15,  1, 19],
        [11, 18,  7,  0, 14, 12, 17, 15,  6, 10],
        [11, 18, 12,  1, 14,  4,  7, 13, 19, 10],
        [11,  6, 17,  7, 12,  8,  9, 13, 19, 10],
        [11,  7,  8, 17, 12,  9,  6, 13, 19,  1],
        [11,  1,  7,  6, 12,  9,  8, 13,  4, 17],
        [20, 12,  7,  8,  6,  9,  1, 13, 17,  4],
        [17, 12,  1,  7,  8,  9, 20,  4,  6, 20],
        [17,  1, 20, 12,  7, 20, 20,  8,  6,  4],
        [17,  8,  1,  7, 20, 20, 12, 20, 20,  4],
        [20, 12, 20,  7, 20,  8, 20,  1, 20,  4],
        [20, 12, 20, 20, 20,  8,  7, 20,  1, 20],
        [20, 20,  8, 20, 20, 20,  7, 20, 20, 12],
        [20, 20, 20, 20,  8, 20, 20, 20, 20, 12],
        [20, 20, 12, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[ 8],
        [ 2],
        [ 5],
        [ 3],
        [16],
        [ 4],
        [11],
        [15],
        [18],
        [17],
        [14],
        [ 2],
        [ 5],
        [13],
        [ 8],
        [16],
        [19],
        [15],
        [ 7],
        [ 6],
        [ 4],
        [18],
        [ 5],
        [ 0],
        [14],
        [16],
        [12],
        [15],
        [ 9],
        [ 7],
        [ 4],
        [18],
        [17],
        [ 0],
        [14],
        [16],
        [ 9],
        [15],
        [ 1],
        [19],
        [11],
        [18],
        [ 7],
        [ 0],
        [14],
        [12],
        [17],
        [15],
        [ 6],
        [10],
        [11],
        [18],
        [12],
        [ 1],
        [14],
        [ 4],
        [ 7],
        [13],
        [19],
        [10],
        [11],
        [ 6],
        [17],
        [ 7],
        [12],
        [ 8],
        [ 9],
        [13],
        [19],
        [10],
        [11],
        [ 7],
        [ 8],
        [17],
        [12],
        [ 9],
        [ 6],
        [13],
        [19],
        [ 1],
        [11],
        [ 1],
        [ 7],
        [ 6],
        [12],
        [ 9],
        [ 8],
        [13],
        [ 4],
        [17],
        [20],
        [12],
        [ 7],
        [ 8],
        [ 6],
        [ 9],
        [ 1],
        [13],
        [17],
        [ 4],
        [17],
        [12],
        [ 1],
        [ 7],
        [ 8],
        [ 9],
        [20],
        [ 4],
        [ 6],
        [20],
        [17],
        [ 1],
        [20],
        [12],
        [ 7],
        [20],
        [20],
        [ 8],
        [ 6],
        [ 4],
        [17],
        [ 8],
        [ 1],
        [ 7],
        [20],
        [20],
        [12],
        [20],
        [20],
        [ 4],
        [20],
        [12],
        [20],
        [ 7],
        [20],
        [ 8],
        [20],
        [ 1],
        [20],
        [ 4],
        [20],
        [12],
        [20],
        [20],
        [20],
        [ 8],
        [ 7],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 5,  6,  3,  2,  2,  4,  4,  3,  2,  4,  3, 14,  4,  4, 13,  3, 13, 18]), torch.Size([18])
 ret : tensor([90, 86, 81, 79, 78, 77, 74, 71, 69, 68, 65, 63, 50, 47, 44, 32, 30, 18]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[5, 6, 3], [10, 19], [13, 0], [8, 17, 7], [16, 1], [12, 9], [11], [18, 15], [4], [14, 2]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[17, 16, 9, 8, 2, 4, 11, 0, 12, 7], [5, 10, 13, 7, 16, 12, 11, 18, 6, 2], [5, 10, 13, 17, 16, 12, 11, 1, 0, 2], [5, 10, 13, 17, 15, 12, 11, 19, 0, 7], [5, 10, 13, 17, 3, 12, 19, 6, 9, 7], [5, 10, 13, 17, 14, 1, 4, 15, 3, 7], [6, 10, 13, 17, 7, 9, 0, 15, 19, 14], [6, 3, 13, 1, 15, 9, 19, 0, 4, 14], [6, 2, 1, 7, 15, 9, 0, 19, 4, 14], [3, 19, 1, 7, 2, 9, 0, 15, 4, 20], [3, 19, 0, 20, 7, 1, 20, 15, 20, 2], [20, 19, 20, 20, 2, 20, 1, 20, 7, 20], [20, 20, 20, 20, 1, 2, 20, 7, 20, 20], [20, 20, 2, 7, 20, 20, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 2]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([6, 5, 7, 3, 8, 0, 9, 1, 4, 2]), array([0, 1, 2, 4, 5, 6, 8, 9, 7, 3]), array([0, 1, 2, 3, 5, 6, 9, 7, 8, 4]), array([0, 1, 2, 3, 5, 8, 6, 9, 4, 7]), array([0, 1, 2, 3, 7, 9, 5, 4, 8, 6]), array([1, 2, 3, 9, 0, 6, 8, 4, 7, 5]), array([0, 2, 5, 9, 8, 3, 7, 1, 4, 6]), array([0, 5, 8, 9, 1, 3, 6, 2, 7, 4]), array([5, 8, 0, 7, 3, 1, 2, 4, 6, 9]), array([0, 7, 4, 1, 5, 9, 2, 3, 6, 8]), array([1, 4, 8, 6, 0, 2, 9, 5, 7, 3]), array([5, 7, 4, 0, 6, 9, 8, 3, 1, 2]), array([3, 2, 1, 0, 7, 8, 5, 9, 4, 6]), array([9, 1, 8, 0, 5, 6, 2, 4, 7, 3])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False,  True,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False,  True,
       False, False, False, False, False, False, False, False, False,
        True, False]), array([False, False, False, False, False, False, False, False,  True,
       False, False, False, False, False, False, False,  True, False,
        True, False]), array([False, False, False, False, False, False, False, False,  True,
       False, False,  True, False, False, False, False,  True, False,
        True, False]), array([False, False, False, False, False, False, False, False,  True,
       False, False,  True,  True, False, False, False,  True, False,
        True, False]), array([False, False, False, False, False,  True, False, False,  True,
       False, False,  True,  True, False, False, False,  True, False,
        True, False]), array([False, False, False, False, False,  True, False, False,  True,
       False,  True,  True,  True, False, False, False,  True,  True,
        True, False]), array([False, False, False, False, False,  True, False, False,  True,
       False,  True,  True,  True,  True, False, False,  True,  True,
        True, False]), array([False, False, False, False, False,  True,  True, False,  True,
       False,  True,  True,  True,  True,  True, False,  True,  True,
        True, False]), array([False, False, False, False,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 15
 next_t : [6, 6, 3, 2, 2, 2, 4, 2, 3, 4, 8, 9, 24, 15, 38], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[17, 16,  9,  8,  2,  4, 11,  0, 12,  7],
        [ 5, 10, 13,  7, 16, 12, 11, 18,  6,  2],
        [ 5, 10, 13, 17, 16, 12, 11,  1,  0,  2],
        [ 5, 10, 13, 17, 15, 12, 11, 19,  0,  7],
        [ 5, 10, 13, 17,  3, 12, 19,  6,  9,  7],
        [ 5, 10, 13, 17, 14,  1,  4, 15,  3,  7],
        [ 6, 10, 13, 17,  7,  9,  0, 15, 19, 14],
        [ 6,  3, 13,  1, 15,  9, 19,  0,  4, 14],
        [ 6,  2,  1,  7, 15,  9,  0, 19,  4, 14],
        [ 3, 19,  1,  7,  2,  9,  0, 15,  4, 20],
        [ 3, 19,  0, 20,  7,  1, 20, 15, 20,  2],
        [20, 19, 20, 20,  2, 20,  1, 20,  7, 20],
        [20, 20, 20, 20,  1,  2, 20,  7, 20, 20],
        [20, 20,  2,  7, 20, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20, 20, 20,  2]]), torch.Size([15, 10])
 all_action : tensor([[17],
        [16],
        [ 9],
        [ 8],
        [ 2],
        [ 4],
        [11],
        [ 0],
        [12],
        [ 7],
        [ 5],
        [10],
        [13],
        [ 7],
        [16],
        [12],
        [11],
        [18],
        [ 6],
        [ 2],
        [ 5],
        [10],
        [13],
        [17],
        [16],
        [12],
        [11],
        [ 1],
        [ 0],
        [ 2],
        [ 5],
        [10],
        [13],
        [17],
        [15],
        [12],
        [11],
        [19],
        [ 0],
        [ 7],
        [ 5],
        [10],
        [13],
        [17],
        [ 3],
        [12],
        [19],
        [ 6],
        [ 9],
        [ 7],
        [ 5],
        [10],
        [13],
        [17],
        [14],
        [ 1],
        [ 4],
        [15],
        [ 3],
        [ 7],
        [ 6],
        [10],
        [13],
        [17],
        [ 7],
        [ 9],
        [ 0],
        [15],
        [19],
        [14],
        [ 6],
        [ 3],
        [13],
        [ 1],
        [15],
        [ 9],
        [19],
        [ 0],
        [ 4],
        [14],
        [ 6],
        [ 2],
        [ 1],
        [ 7],
        [15],
        [ 9],
        [ 0],
        [19],
        [ 4],
        [14],
        [ 3],
        [19],
        [ 1],
        [ 7],
        [ 2],
        [ 9],
        [ 0],
        [15],
        [ 4],
        [20],
        [ 3],
        [19],
        [ 0],
        [20],
        [ 7],
        [ 1],
        [20],
        [15],
        [20],
        [ 2],
        [20],
        [19],
        [20],
        [20],
        [ 2],
        [20],
        [ 1],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [ 2],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2]]), torch.Size([150, 1])
next_t : tensor([ 6,  6,  3,  2,  2,  2,  4,  2,  3,  4,  8,  9, 24, 15, 38]), torch.Size([15])
 ret : tensor([110, 106, 102, 101, 101, 100,  99,  96,  95,  93,  90,  83,  75,  52,
         38]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -25.6495,  -24.8491,  -32.2362,  -49.0949,  -75.5153,
         -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
[[4, 9], [14, 17], [3, 0, 18, 7], [5, 12], [13], [10, 2, 19], [8], [16, 1], [6, 11], [15]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[7, 17, 3, 8, 16, 9, 2, 14, 6, 15], [4, 17, 3, 5, 14, 9, 8, 16, 7, 15], [4, 14, 0, 5, 19, 10, 8, 16, 17, 15], [4, 14, 0, 5, 19, 10, 12, 16, 17, 15], [19, 18, 0, 5, 12, 10, 11, 16, 13, 15], [7, 2, 0, 5, 1, 10, 11, 16, 9, 17], [19, 7, 0, 5, 9, 10, 17, 12, 13, 1], [9, 17, 0, 5, 1, 2, 18, 13, 7, 12], [9, 17, 18, 12, 13, 2, 7, 19, 1, 11], [9, 17, 18, 12, 13, 11, 7, 1, 19, 20], [11, 20, 18, 12, 13, 20, 7, 1, 20, 19], [20, 20, 11, 20, 13, 7, 20, 1, 19, 20], [20, 20, 20, 20, 20, 20, 11, 1, 19, 7], [20, 20, 7, 20, 20, 19, 20, 20, 11, 20], [20, 20, 20, 20, 20, 19, 20, 20, 11, 20], [20, 20, 20, 20, 20, 19, 20, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 9, 1, 7, 3, 5, 4, 8, 6, 0]), array([0, 3, 6, 7, 9, 5, 4, 8, 1, 2]), array([0, 1, 2, 3, 5, 7, 9, 6, 4, 8]), array([2, 3, 5, 7, 9, 1, 4, 0, 8, 6]), array([2, 3, 5, 7, 0, 1, 6, 4, 8, 9]), array([2, 3, 5, 6, 0, 9, 4, 1, 8, 7]), array([2, 3, 6, 1, 0, 5, 4, 9, 8, 7]), array([0, 1, 5, 7, 6, 3, 4, 9, 2, 8]), array([0, 1, 2, 3, 4, 6, 7, 8, 5, 9]), array([2, 3, 4, 7, 0, 9, 6, 8, 5, 1]), array([4, 7, 5, 2, 8, 1, 9, 6, 0, 3]), array([7, 6, 8, 9, 1, 2, 0, 4, 5, 3]), array([5, 2, 8, 0, 7, 4, 6, 1, 3, 9]), array([5, 8, 2, 3, 9, 4, 1, 6, 0, 7]), array([5, 0, 4, 2, 3, 8, 7, 6, 1, 9])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False,  True, False,  True,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True,  True, False,  True, False,  True,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False,  True,  True, False,  True, False,  True,
       False, False, False, False, False,  True,  True, False, False,
       False, False]), array([False, False, False,  True,  True, False,  True, False,  True,
       False, False, False, False, False,  True,  True,  True, False,
       False, False]), array([False, False, False,  True,  True, False,  True, False,  True,
       False,  True, False, False, False,  True,  True,  True, False,
       False, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
       False,  True, False, False, False,  True,  True,  True, False,
       False, False]), array([ True, False,  True,  True,  True,  True,  True, False,  True,
       False,  True, False, False, False,  True,  True,  True, False,
       False, False]), array([ True, False,  True,  True,  True,  True,  True, False,  True,
        True,  True, False, False, False,  True,  True,  True,  True,
       False, False]), array([ True, False,  True,  True,  True,  True,  True, False,  True,
        True,  True, False,  True, False,  True,  True,  True,  True,
        True, False]), array([ True, False,  True,  True,  True,  True,  True, False,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False])], 16
 next_t : [8, 6, 3, 2, 2, 3, 2, 3, 6, 5, 4, 3, 7, 15, 4, 6], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[ 7, 17,  3,  8, 16,  9,  2, 14,  6, 15],
        [ 4, 17,  3,  5, 14,  9,  8, 16,  7, 15],
        [ 4, 14,  0,  5, 19, 10,  8, 16, 17, 15],
        [ 4, 14,  0,  5, 19, 10, 12, 16, 17, 15],
        [19, 18,  0,  5, 12, 10, 11, 16, 13, 15],
        [ 7,  2,  0,  5,  1, 10, 11, 16,  9, 17],
        [19,  7,  0,  5,  9, 10, 17, 12, 13,  1],
        [ 9, 17,  0,  5,  1,  2, 18, 13,  7, 12],
        [ 9, 17, 18, 12, 13,  2,  7, 19,  1, 11],
        [ 9, 17, 18, 12, 13, 11,  7,  1, 19, 20],
        [11, 20, 18, 12, 13, 20,  7,  1, 20, 19],
        [20, 20, 11, 20, 13,  7, 20,  1, 19, 20],
        [20, 20, 20, 20, 20, 20, 11,  1, 19,  7],
        [20, 20,  7, 20, 20, 19, 20, 20, 11, 20],
        [20, 20, 20, 20, 20, 19, 20, 20, 11, 20],
        [20, 20, 20, 20, 20, 19, 20, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[ 7],
        [17],
        [ 3],
        [ 8],
        [16],
        [ 9],
        [ 2],
        [14],
        [ 6],
        [15],
        [ 4],
        [17],
        [ 3],
        [ 5],
        [14],
        [ 9],
        [ 8],
        [16],
        [ 7],
        [15],
        [ 4],
        [14],
        [ 0],
        [ 5],
        [19],
        [10],
        [ 8],
        [16],
        [17],
        [15],
        [ 4],
        [14],
        [ 0],
        [ 5],
        [19],
        [10],
        [12],
        [16],
        [17],
        [15],
        [19],
        [18],
        [ 0],
        [ 5],
        [12],
        [10],
        [11],
        [16],
        [13],
        [15],
        [ 7],
        [ 2],
        [ 0],
        [ 5],
        [ 1],
        [10],
        [11],
        [16],
        [ 9],
        [17],
        [19],
        [ 7],
        [ 0],
        [ 5],
        [ 9],
        [10],
        [17],
        [12],
        [13],
        [ 1],
        [ 9],
        [17],
        [ 0],
        [ 5],
        [ 1],
        [ 2],
        [18],
        [13],
        [ 7],
        [12],
        [ 9],
        [17],
        [18],
        [12],
        [13],
        [ 2],
        [ 7],
        [19],
        [ 1],
        [11],
        [ 9],
        [17],
        [18],
        [12],
        [13],
        [11],
        [ 7],
        [ 1],
        [19],
        [20],
        [11],
        [20],
        [18],
        [12],
        [13],
        [20],
        [ 7],
        [ 1],
        [20],
        [19],
        [20],
        [20],
        [11],
        [20],
        [13],
        [ 7],
        [20],
        [ 1],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [ 1],
        [19],
        [ 7],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [19],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 8,  6,  3,  2,  2,  3,  2,  3,  6,  5,  4,  3,  7, 15,  4,  6]), torch.Size([16])
 ret : tensor([64, 57, 52, 50, 49, 48, 46, 45, 43, 38, 34, 31, 29, 23,  9,  6]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -23.9790,  -32.2362,  -49.0949,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:08<00:00,  8.31s/it]
[[0], [1, 6], [2, 11, 8], [12, 19], [13, 10], [5, 4, 3], [15], [7, 14, 18], [], [9, 16, 17]]
  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[17], [1, 16], [2, 13], [3, 5], [12, 11], [6, 0], [10], [4, 19, 18], [7, 8, 15], [14, 9]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[17, 16, 2, 6, 18, 11, 14, 4, 7, 3], [17, 1, 2, 3, 19, 0, 16, 18, 7, 14], [11, 1, 2, 3, 12, 6, 9, 0, 7, 14], [19, 1, 2, 18, 12, 6, 11, 8, 7, 14], [19, 1, 2, 10, 12, 6, 9, 16, 7, 11], [16, 1, 5, 8, 12, 18, 15, 19, 13, 0], [9, 16, 11, 18, 12, 0, 15, 19, 8, 10], [10, 16, 13, 5, 11, 0, 18, 15, 8, 9], [11, 16, 13, 5, 18, 15, 10, 9, 8, 20], [11, 20, 13, 20, 10, 20, 18, 15, 8, 9], [18, 20, 13, 15, 10, 20, 20, 11, 20, 9], [20, 11, 20, 10, 20, 20, 20, 15, 18, 9], [20, 20, 20, 20, 11, 20, 10, 18, 15, 20], [20, 20, 20, 20, 11, 20, 10, 20, 15, 20], [20, 20, 20, 20, 20, 20, 10, 20, 15, 20], [20, 20, 20, 20, 20, 20, 10, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 2, 8, 7, 1, 6, 3, 4, 5, 9]), array([1, 2, 3, 8, 9, 4, 5, 7, 6, 0]), array([1, 2, 4, 5, 8, 9, 0, 6, 3, 7]), array([1, 2, 4, 5, 8, 9, 7, 3, 0, 6]), array([1, 4, 0, 6, 7, 9, 3, 5, 2, 8]), array([4, 7, 8, 9, 0, 1, 5, 6, 3, 2]), array([1, 5, 8, 3, 2, 9, 7, 6, 0, 4]), array([1, 2, 3, 8, 6, 5, 7, 0, 4, 9]), array([2, 8, 4, 0, 9, 6, 7, 1, 5, 3]), array([2, 9, 3, 0, 7, 4, 6, 8, 1, 5]), array([9, 8, 7, 3, 1, 0, 2, 5, 6, 4]), array([8, 4, 6, 7, 9, 2, 3, 0, 1, 5]), array([4, 6, 8, 7, 3, 5, 2, 0, 9, 1]), array([6, 8, 4, 9, 7, 1, 0, 3, 5, 2]), array([6, 0, 9, 7, 2, 8, 5, 1, 3, 4])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False,  True,  True, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False,  True,  True, False, False, False, False,
       False, False, False, False, False,  True, False, False,  True,
       False, False]), array([False, False,  True,  True,  True, False,  True,  True, False,
       False, False, False, False, False,  True, False, False,  True,
       False, False]), array([False,  True,  True,  True,  True, False,  True,  True, False,
       False, False, False, False, False,  True, False, False,  True,
       False, False]), array([False,  True,  True,  True,  True, False,  True,  True, False,
       False, False, False,  True, False,  True, False, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True, False,  True,  True, False,
       False, False, False,  True, False,  True, False, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
       False, False, False,  True, False,  True, False,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
       False, False, False,  True, False,  True, False,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
       False, False, False,  True,  True,  True, False,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [3, 4, 5, 2, 2, 3, 4, 3, 4, 3, 5, 5, 15, 2, 5, 4], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[17, 16,  2,  6, 18, 11, 14,  4,  7,  3],
        [17,  1,  2,  3, 19,  0, 16, 18,  7, 14],
        [11,  1,  2,  3, 12,  6,  9,  0,  7, 14],
        [19,  1,  2, 18, 12,  6, 11,  8,  7, 14],
        [19,  1,  2, 10, 12,  6,  9, 16,  7, 11],
        [16,  1,  5,  8, 12, 18, 15, 19, 13,  0],
        [ 9, 16, 11, 18, 12,  0, 15, 19,  8, 10],
        [10, 16, 13,  5, 11,  0, 18, 15,  8,  9],
        [11, 16, 13,  5, 18, 15, 10,  9,  8, 20],
        [11, 20, 13, 20, 10, 20, 18, 15,  8,  9],
        [18, 20, 13, 15, 10, 20, 20, 11, 20,  9],
        [20, 11, 20, 10, 20, 20, 20, 15, 18,  9],
        [20, 20, 20, 20, 11, 20, 10, 18, 15, 20],
        [20, 20, 20, 20, 11, 20, 10, 20, 15, 20],
        [20, 20, 20, 20, 20, 20, 10, 20, 15, 20],
        [20, 20, 20, 20, 20, 20, 10, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[17],
        [16],
        [ 2],
        [ 6],
        [18],
        [11],
        [14],
        [ 4],
        [ 7],
        [ 3],
        [17],
        [ 1],
        [ 2],
        [ 3],
        [19],
        [ 0],
        [16],
        [18],
        [ 7],
        [14],
        [11],
        [ 1],
        [ 2],
        [ 3],
        [12],
        [ 6],
        [ 9],
        [ 0],
        [ 7],
        [14],
        [19],
        [ 1],
        [ 2],
        [18],
        [12],
        [ 6],
        [11],
        [ 8],
        [ 7],
        [14],
        [19],
        [ 1],
        [ 2],
        [10],
        [12],
        [ 6],
        [ 9],
        [16],
        [ 7],
        [11],
        [16],
        [ 1],
        [ 5],
        [ 8],
        [12],
        [18],
        [15],
        [19],
        [13],
        [ 0],
        [ 9],
        [16],
        [11],
        [18],
        [12],
        [ 0],
        [15],
        [19],
        [ 8],
        [10],
        [10],
        [16],
        [13],
        [ 5],
        [11],
        [ 0],
        [18],
        [15],
        [ 8],
        [ 9],
        [11],
        [16],
        [13],
        [ 5],
        [18],
        [15],
        [10],
        [ 9],
        [ 8],
        [20],
        [11],
        [20],
        [13],
        [20],
        [10],
        [20],
        [18],
        [15],
        [ 8],
        [ 9],
        [18],
        [20],
        [13],
        [15],
        [10],
        [20],
        [20],
        [11],
        [20],
        [ 9],
        [20],
        [11],
        [20],
        [10],
        [20],
        [20],
        [20],
        [15],
        [18],
        [ 9],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [10],
        [18],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [10],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [10],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [10],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 3,  4,  5,  2,  2,  3,  4,  3,  4,  3,  5,  5, 15,  2,  5,  4]), torch.Size([16])
 ret : tensor([54, 52, 49, 45, 44, 43, 41, 38, 36, 33, 31, 27, 23,  9,  8,  4]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -26.3906,
         -25.6495,  -23.9790,  -32.2362,  -49.0949,  -57.7272,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[12, 16, 3, 8], [9, 0], [14, 7], [19, 15, 13], [4, 17, 18], [], [11], [10, 6], [2], [1, 5]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[12, 9, 14, 19, 4, 17, 7, 10, 11, 6], [11, 9, 14, 19, 4, 16, 5, 10, 0, 1], [16, 9, 14, 5, 4, 3, 7, 10, 6, 1], [16, 5, 14, 15, 4, 13, 8, 10, 2, 1], [16, 7, 14, 15, 2, 13, 5, 8, 6, 1], [16, 2, 18, 15, 17, 13, 8, 7, 3, 5], [7, 8, 0, 15, 17, 13, 3, 6, 11, 5], [3, 18, 7, 15, 13, 2, 11, 6, 8, 5], [3, 2, 7, 13, 8, 0, 11, 6, 18, 5], [3, 18, 7, 13, 0, 2, 11, 6, 20, 8], [3, 0, 7, 13, 20, 2, 11, 8, 20, 18], [3, 0, 20, 13, 20, 2, 20, 20, 8, 18], [8, 0, 20, 13, 18, 20, 20, 20, 2, 20], [20, 0, 2, 20, 18, 8, 20, 20, 20, 20], [20, 20, 20, 8, 18, 2, 20, 20, 20, 20], [8, 20, 20, 20, 20, 20, 20, 20, 2, 20], [8, 20, 20, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 2, 3, 4, 7, 0, 5, 9, 8, 6]), array([1, 2, 4, 7, 9, 5, 8, 0, 6, 3]), array([0, 2, 4, 7, 9, 8, 6, 5, 3, 1]), array([0, 2, 3, 9, 6, 7, 8, 5, 1, 4]), array([0, 3, 6, 8, 9, 5, 7, 4, 2, 1]), array([3, 4, 9, 6, 7, 8, 1, 2, 0, 5]), array([3, 7, 9, 8, 6, 0, 1, 2, 5, 4]), array([0, 2, 6, 7, 9, 3, 4, 8, 1, 5]), array([0, 2, 3, 6, 7, 5, 4, 1, 9, 8]), array([0, 2, 3, 6, 9, 1, 7, 5, 8, 4]), array([0, 1, 3, 5, 9, 8, 7, 4, 6, 2]), array([1, 3, 4, 8, 0, 2, 6, 5, 7, 9]), array([1, 4, 5, 2, 9, 0, 8, 3, 7, 6]), array([4, 5, 3, 6, 9, 2, 8, 0, 7, 1]), array([0, 8, 4, 5, 6, 7, 2, 9, 1, 3]), array([0, 5, 7, 4, 3, 6, 1, 2, 9, 8])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False, False, False, False, False,
        True, False, False,  True, False, False, False, False, False,
       False,  True]), array([False, False, False, False,  True, False, False, False, False,
        True,  True, False,  True, False, False, False, False, False,
       False,  True]), array([False,  True, False, False,  True, False, False, False, False,
        True,  True, False,  True, False,  True, False, False, False,
       False,  True]), array([False,  True, False, False,  True, False, False, False, False,
        True,  True, False,  True, False,  True, False,  True, False,
       False,  True]), array([False,  True, False, False,  True, False, False, False, False,
        True,  True, False,  True, False,  True, False,  True,  True,
       False,  True]), array([False,  True, False, False,  True, False, False, False, False,
        True,  True, False,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False, False,  True,  True, False, False, False,
        True,  True, False,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False, False,  True,  True,  True, False, False,
        True,  True, False,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False, False,  True,  True,  True,  True, False,
        True,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [6, 5, 2, 2, 2, 2, 4, 4, 4, 2, 5, 2, 4, 3, 6, 15, 10], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[12,  9, 14, 19,  4, 17,  7, 10, 11,  6],
        [11,  9, 14, 19,  4, 16,  5, 10,  0,  1],
        [16,  9, 14,  5,  4,  3,  7, 10,  6,  1],
        [16,  5, 14, 15,  4, 13,  8, 10,  2,  1],
        [16,  7, 14, 15,  2, 13,  5,  8,  6,  1],
        [16,  2, 18, 15, 17, 13,  8,  7,  3,  5],
        [ 7,  8,  0, 15, 17, 13,  3,  6, 11,  5],
        [ 3, 18,  7, 15, 13,  2, 11,  6,  8,  5],
        [ 3,  2,  7, 13,  8,  0, 11,  6, 18,  5],
        [ 3, 18,  7, 13,  0,  2, 11,  6, 20,  8],
        [ 3,  0,  7, 13, 20,  2, 11,  8, 20, 18],
        [ 3,  0, 20, 13, 20,  2, 20, 20,  8, 18],
        [ 8,  0, 20, 13, 18, 20, 20, 20,  2, 20],
        [20,  0,  2, 20, 18,  8, 20, 20, 20, 20],
        [20, 20, 20,  8, 18,  2, 20, 20, 20, 20],
        [ 8, 20, 20, 20, 20, 20, 20, 20,  2, 20],
        [ 8, 20, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[12],
        [ 9],
        [14],
        [19],
        [ 4],
        [17],
        [ 7],
        [10],
        [11],
        [ 6],
        [11],
        [ 9],
        [14],
        [19],
        [ 4],
        [16],
        [ 5],
        [10],
        [ 0],
        [ 1],
        [16],
        [ 9],
        [14],
        [ 5],
        [ 4],
        [ 3],
        [ 7],
        [10],
        [ 6],
        [ 1],
        [16],
        [ 5],
        [14],
        [15],
        [ 4],
        [13],
        [ 8],
        [10],
        [ 2],
        [ 1],
        [16],
        [ 7],
        [14],
        [15],
        [ 2],
        [13],
        [ 5],
        [ 8],
        [ 6],
        [ 1],
        [16],
        [ 2],
        [18],
        [15],
        [17],
        [13],
        [ 8],
        [ 7],
        [ 3],
        [ 5],
        [ 7],
        [ 8],
        [ 0],
        [15],
        [17],
        [13],
        [ 3],
        [ 6],
        [11],
        [ 5],
        [ 3],
        [18],
        [ 7],
        [15],
        [13],
        [ 2],
        [11],
        [ 6],
        [ 8],
        [ 5],
        [ 3],
        [ 2],
        [ 7],
        [13],
        [ 8],
        [ 0],
        [11],
        [ 6],
        [18],
        [ 5],
        [ 3],
        [18],
        [ 7],
        [13],
        [ 0],
        [ 2],
        [11],
        [ 6],
        [20],
        [ 8],
        [ 3],
        [ 0],
        [ 7],
        [13],
        [20],
        [ 2],
        [11],
        [ 8],
        [20],
        [18],
        [ 3],
        [ 0],
        [20],
        [13],
        [20],
        [ 2],
        [20],
        [20],
        [ 8],
        [18],
        [ 8],
        [ 0],
        [20],
        [13],
        [18],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [ 0],
        [ 2],
        [20],
        [18],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [18],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 6,  5,  2,  2,  2,  2,  4,  4,  4,  2,  5,  2,  4,  3,  6, 15, 10]), torch.Size([17])
 ret : tensor([62, 57, 53, 52, 51, 50, 49, 46, 43, 40, 39, 35, 34, 31, 29, 24, 10]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -26.3906,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[18, 2], [], [13, 8, 19], [], [17, 4, 1], [16, 11, 5, 0], [12], [15, 3], [14], [9, 10, 6, 7]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[18, 4, 6, 1, 12, 17, 2, 15, 11, 9], [18, 5, 8, 13, 1, 16, 7, 15, 17, 12], [18, 1, 12, 6, 2, 11, 4, 15, 13, 10], [18, 3, 0, 6, 1, 11, 13, 4, 14, 10], [18, 0, 8, 1, 17, 5, 12, 6, 14, 10], [8, 1, 13, 4, 17, 5, 3, 0, 14, 19], [2, 7, 13, 1, 12, 5, 19, 3, 0, 6], [2, 3, 13, 19, 4, 0, 7, 1, 8, 6], [0, 7, 13, 12, 4, 1, 19, 3, 8, 6], [1, 7, 0, 20, 4, 12, 8, 3, 19, 6], [20, 20, 8, 0, 4, 7, 1, 3, 12, 19], [20, 1, 12, 19, 20, 20, 0, 3, 7, 8], [19, 20, 0, 20, 1, 7, 12, 20, 20, 8], [19, 20, 8, 20, 0, 20, 12, 20, 20, 7], [0, 20, 8, 20, 19, 20, 20, 20, 20, 7], [20, 20, 20, 0, 20, 20, 19, 20, 20, 7], [20, 20, 20, 20, 20, 0, 20, 19, 20, 20], [20, 20, 19, 20, 20, 20, 20, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([7, 8, 5, 3, 2, 1, 6, 0, 9, 4]), array([0, 7, 6, 3, 4, 1, 2, 5, 8, 9]), array([0, 5, 9, 3, 1, 8, 4, 7, 6, 2]), array([0, 8, 9, 4, 2, 6, 7, 3, 1, 5]), array([4, 5, 8, 2, 6, 7, 3, 9, 0, 1]), array([2, 5, 6, 9, 4, 1, 7, 8, 0, 3]), array([0, 2, 9, 8, 1, 3, 4, 5, 7, 6]), array([2, 4, 9, 7, 0, 6, 8, 1, 3, 5]), array([4, 7, 9, 0, 5, 1, 2, 6, 8, 3]), array([4, 7, 9, 3, 2, 8, 6, 5, 1, 0]), array([7, 2, 9, 3, 8, 1, 6, 5, 0, 4]), array([4, 0, 9, 6, 5, 2, 1, 8, 3, 7]), array([4, 2, 0, 9, 6, 5, 7, 3, 8, 1]), array([2, 9, 0, 4, 1, 7, 8, 6, 3, 5]), array([9, 6, 3, 8, 0, 4, 2, 5, 1, 7]), array([5, 7, 6, 9, 8, 4, 1, 3, 0, 2]), array([2, 6, 0, 9, 7, 4, 5, 1, 3, 8])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False,  True, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False,  True,  True, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False,  True, False, False, False,  True,  True, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True,  True,  True, False, False, False,  True,  True, False,
        True, False]), array([False, False, False, False, False, False, False, False, False,
        True,  True,  True, False, False,  True,  True,  True,  True,
        True, False]), array([False, False, False, False, False,  True, False, False, False,
        True,  True,  True, False, False,  True,  True,  True,  True,
        True, False]), array([False, False,  True, False, False,  True, False, False, False,
        True,  True,  True, False, False,  True,  True,  True,  True,
        True, False]), array([False, False,  True, False, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([False, False,  True, False, False,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([False, False,  True, False,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([False, False,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([False,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([False,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([False,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([False,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False])], 18
 next_t : [7, 7, 2, 7, 3, 8, 3, 3, 6, 2, 3, 7, 5, 20, 10, 7, 29, 30], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[18,  4,  6,  1, 12, 17,  2, 15, 11,  9],
        [18,  5,  8, 13,  1, 16,  7, 15, 17, 12],
        [18,  1, 12,  6,  2, 11,  4, 15, 13, 10],
        [18,  3,  0,  6,  1, 11, 13,  4, 14, 10],
        [18,  0,  8,  1, 17,  5, 12,  6, 14, 10],
        [ 8,  1, 13,  4, 17,  5,  3,  0, 14, 19],
        [ 2,  7, 13,  1, 12,  5, 19,  3,  0,  6],
        [ 2,  3, 13, 19,  4,  0,  7,  1,  8,  6],
        [ 0,  7, 13, 12,  4,  1, 19,  3,  8,  6],
        [ 1,  7,  0, 20,  4, 12,  8,  3, 19,  6],
        [20, 20,  8,  0,  4,  7,  1,  3, 12, 19],
        [20,  1, 12, 19, 20, 20,  0,  3,  7,  8],
        [19, 20,  0, 20,  1,  7, 12, 20, 20,  8],
        [19, 20,  8, 20,  0, 20, 12, 20, 20,  7],
        [ 0, 20,  8, 20, 19, 20, 20, 20, 20,  7],
        [20, 20, 20,  0, 20, 20, 19, 20, 20,  7],
        [20, 20, 20, 20, 20,  0, 20, 19, 20, 20],
        [20, 20, 19, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[18],
        [ 4],
        [ 6],
        [ 1],
        [12],
        [17],
        [ 2],
        [15],
        [11],
        [ 9],
        [18],
        [ 5],
        [ 8],
        [13],
        [ 1],
        [16],
        [ 7],
        [15],
        [17],
        [12],
        [18],
        [ 1],
        [12],
        [ 6],
        [ 2],
        [11],
        [ 4],
        [15],
        [13],
        [10],
        [18],
        [ 3],
        [ 0],
        [ 6],
        [ 1],
        [11],
        [13],
        [ 4],
        [14],
        [10],
        [18],
        [ 0],
        [ 8],
        [ 1],
        [17],
        [ 5],
        [12],
        [ 6],
        [14],
        [10],
        [ 8],
        [ 1],
        [13],
        [ 4],
        [17],
        [ 5],
        [ 3],
        [ 0],
        [14],
        [19],
        [ 2],
        [ 7],
        [13],
        [ 1],
        [12],
        [ 5],
        [19],
        [ 3],
        [ 0],
        [ 6],
        [ 2],
        [ 3],
        [13],
        [19],
        [ 4],
        [ 0],
        [ 7],
        [ 1],
        [ 8],
        [ 6],
        [ 0],
        [ 7],
        [13],
        [12],
        [ 4],
        [ 1],
        [19],
        [ 3],
        [ 8],
        [ 6],
        [ 1],
        [ 7],
        [ 0],
        [20],
        [ 4],
        [12],
        [ 8],
        [ 3],
        [19],
        [ 6],
        [20],
        [20],
        [ 8],
        [ 0],
        [ 4],
        [ 7],
        [ 1],
        [ 3],
        [12],
        [19],
        [20],
        [ 1],
        [12],
        [19],
        [20],
        [20],
        [ 0],
        [ 3],
        [ 7],
        [ 8],
        [19],
        [20],
        [ 0],
        [20],
        [ 1],
        [ 7],
        [12],
        [20],
        [20],
        [ 8],
        [19],
        [20],
        [ 8],
        [20],
        [ 0],
        [20],
        [12],
        [20],
        [20],
        [ 7],
        [ 0],
        [20],
        [ 8],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [ 0],
        [20],
        [20],
        [19],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 0],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 7,  7,  2,  7,  3,  8,  3,  3,  6,  2,  3,  7,  5, 20, 10,  7, 29, 30]), torch.Size([18])
 ret : tensor([131, 126, 121, 121, 116, 115, 109, 108, 107, 103, 103, 102,  96,  92,
         73,  64,  58,  30]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[5, 8], [16], [6, 3, 15], [9, 2], [17], [1, 7, 12, 14], [4], [19, 18, 13], [11], [10, 0]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[5, 19, 6, 12, 1, 2, 14, 10, 11, 15], [7, 16, 18, 17, 0, 1, 2, 19, 11, 10], [5, 16, 3, 18, 15, 14, 2, 19, 11, 10], [5, 16, 3, 0, 15, 7, 14, 18, 11, 10], [5, 16, 3, 9, 17, 7, 4, 18, 2, 10], [8, 16, 3, 13, 12, 7, 4, 18, 14, 10], [8, 16, 3, 9, 15, 7, 4, 18, 12, 0], [8, 16, 9, 12, 2, 7, 4, 18, 14, 0], [8, 14, 12, 15, 2, 7, 4, 13, 9, 0], [8, 2, 12, 14, 20, 15, 20, 13, 9, 0], [15, 14, 2, 9, 20, 12, 20, 13, 20, 0], [15, 2, 20, 9, 20, 14, 20, 13, 20, 20], [20, 15, 20, 9, 20, 14, 2, 20, 20, 20], [20, 2, 15, 20, 20, 14, 20, 20, 20, 20], [20, 20, 15, 20, 20, 2, 20, 20, 20, 20], [20, 20, 20, 2, 20, 20, 20, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([8, 4, 1, 2, 5, 3, 6, 9, 7, 0]), array([7, 8, 9, 4, 3, 1, 5, 6, 0, 2]), array([0, 1, 2, 8, 9, 5, 6, 3, 4, 7]), array([0, 1, 2, 5, 7, 9, 8, 4, 6, 3]), array([1, 2, 5, 6, 7, 9, 8, 0, 4, 3]), array([0, 1, 2, 5, 6, 7, 3, 4, 8, 9]), array([0, 1, 5, 6, 7, 4, 3, 9, 8, 2]), array([0, 5, 6, 9, 7, 1, 3, 4, 8, 2]), array([0, 7, 9, 5, 3, 8, 1, 2, 6, 4]), array([7, 9, 2, 3, 0, 1, 5, 8, 6, 4]), array([3, 7, 1, 5, 0, 2, 6, 9, 4, 8]), array([3, 5, 1, 6, 8, 9, 7, 4, 2, 0]), array([5, 1, 2, 0, 6, 7, 8, 9, 4, 3]), array([2, 5, 9, 8, 1, 3, 4, 7, 0, 6]), array([3, 9, 1, 0, 6, 7, 8, 2, 5, 4])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False,  True, False, False, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False,  True, False, False, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False,  True, False, False, False, False,  True, False, False,
       False, False,  True, False, False, False, False, False, False,
       False,  True]), array([False,  True, False, False, False,  True,  True, False, False,
       False, False,  True, False, False, False, False, False,  True,
       False,  True]), array([False,  True, False, False, False,  True,  True, False, False,
       False,  True,  True, False, False, False, False, False,  True,
       False,  True]), array([False,  True, False,  True, False,  True,  True, False, False,
       False,  True,  True, False, False, False, False, False,  True,
       False,  True]), array([False,  True, False,  True, False,  True,  True, False, False,
       False,  True,  True, False, False, False, False,  True,  True,
        True,  True]), array([False,  True, False,  True,  True,  True,  True,  True, False,
       False,  True,  True, False, False, False, False,  True,  True,
        True,  True]), array([False,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True,  True, False, False, False, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True,  True,  True, False, False, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True,  True,  True,  True, False, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True, False, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [5, 5, 4, 2, 4, 2, 3, 3, 2, 4, 5, 3, 4, 5, 5, 44], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[ 5, 19,  6, 12,  1,  2, 14, 10, 11, 15],
        [ 7, 16, 18, 17,  0,  1,  2, 19, 11, 10],
        [ 5, 16,  3, 18, 15, 14,  2, 19, 11, 10],
        [ 5, 16,  3,  0, 15,  7, 14, 18, 11, 10],
        [ 5, 16,  3,  9, 17,  7,  4, 18,  2, 10],
        [ 8, 16,  3, 13, 12,  7,  4, 18, 14, 10],
        [ 8, 16,  3,  9, 15,  7,  4, 18, 12,  0],
        [ 8, 16,  9, 12,  2,  7,  4, 18, 14,  0],
        [ 8, 14, 12, 15,  2,  7,  4, 13,  9,  0],
        [ 8,  2, 12, 14, 20, 15, 20, 13,  9,  0],
        [15, 14,  2,  9, 20, 12, 20, 13, 20,  0],
        [15,  2, 20,  9, 20, 14, 20, 13, 20, 20],
        [20, 15, 20,  9, 20, 14,  2, 20, 20, 20],
        [20,  2, 15, 20, 20, 14, 20, 20, 20, 20],
        [20, 20, 15, 20, 20,  2, 20, 20, 20, 20],
        [20, 20, 20,  2, 20, 20, 20, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[ 5],
        [19],
        [ 6],
        [12],
        [ 1],
        [ 2],
        [14],
        [10],
        [11],
        [15],
        [ 7],
        [16],
        [18],
        [17],
        [ 0],
        [ 1],
        [ 2],
        [19],
        [11],
        [10],
        [ 5],
        [16],
        [ 3],
        [18],
        [15],
        [14],
        [ 2],
        [19],
        [11],
        [10],
        [ 5],
        [16],
        [ 3],
        [ 0],
        [15],
        [ 7],
        [14],
        [18],
        [11],
        [10],
        [ 5],
        [16],
        [ 3],
        [ 9],
        [17],
        [ 7],
        [ 4],
        [18],
        [ 2],
        [10],
        [ 8],
        [16],
        [ 3],
        [13],
        [12],
        [ 7],
        [ 4],
        [18],
        [14],
        [10],
        [ 8],
        [16],
        [ 3],
        [ 9],
        [15],
        [ 7],
        [ 4],
        [18],
        [12],
        [ 0],
        [ 8],
        [16],
        [ 9],
        [12],
        [ 2],
        [ 7],
        [ 4],
        [18],
        [14],
        [ 0],
        [ 8],
        [14],
        [12],
        [15],
        [ 2],
        [ 7],
        [ 4],
        [13],
        [ 9],
        [ 0],
        [ 8],
        [ 2],
        [12],
        [14],
        [20],
        [15],
        [20],
        [13],
        [ 9],
        [ 0],
        [15],
        [14],
        [ 2],
        [ 9],
        [20],
        [12],
        [20],
        [13],
        [20],
        [ 0],
        [15],
        [ 2],
        [20],
        [ 9],
        [20],
        [14],
        [20],
        [13],
        [20],
        [20],
        [20],
        [15],
        [20],
        [ 9],
        [20],
        [14],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [15],
        [20],
        [20],
        [14],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [15],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 5,  5,  4,  2,  4,  2,  3,  3,  2,  4,  5,  3,  4,  5,  5, 44]), torch.Size([16])
 ret : tensor([85, 81, 77, 74, 73, 70, 69, 67, 65, 64, 61, 57, 55, 52, 48, 44]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.0805,
         -26.3906,  -25.6495,  -23.9790,  -40.6036,  -49.0949,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[15], [5, 3], [10, 0], [9, 19, 16], [13, 2], [6, 12], [4, 7], [11], [14, 8], [1, 17, 18]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[2, 7, 10, 1, 19, 8, 3, 14, 9, 15], [15, 16, 8, 9, 19, 6, 4, 2, 13, 1], [18, 11, 14, 9, 13, 6, 4, 16, 8, 17], [14, 5, 0, 18, 2, 6, 8, 12, 11, 17], [8, 5, 0, 19, 2, 7, 18, 16, 14, 17], [8, 5, 0, 19, 2, 12, 16, 18, 14, 7], [8, 11, 0, 19, 2, 12, 7, 16, 14, 18], [16, 8, 0, 19, 7, 12, 11, 18, 14, 3], [3, 7, 0, 19, 8, 20, 18, 11, 14, 16], [18, 11, 0, 20, 20, 8, 16, 7, 14, 3], [18, 3, 16, 20, 20, 20, 7, 11, 8, 20], [20, 3, 20, 20, 16, 18, 7, 11, 20, 20], [18, 3, 20, 20, 16, 20, 7, 20, 20, 20], [20, 20, 20, 16, 20, 20, 20, 20, 20, 18], [20, 20, 20, 16, 20, 20, 20, 20, 20, 20]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([7, 3, 5, 2, 6, 4, 9, 8, 1, 0]), array([3, 5, 6, 0, 8, 7, 4, 1, 9, 2]), array([5, 9, 0, 2, 8, 4, 1, 7, 3, 6]), array([1, 2, 4, 9, 8, 3, 5, 6, 0, 7]), array([1, 2, 3, 4, 8, 7, 6, 0, 5, 9]), array([2, 3, 4, 5, 8, 9, 0, 7, 1, 6]), array([2, 3, 5, 8, 6, 0, 1, 9, 4, 7]), array([2, 3, 8, 1, 9, 0, 7, 6, 4, 5]), array([2, 8, 9, 1, 5, 6, 0, 7, 3, 4]), array([2, 6, 8, 0, 7, 1, 4, 3, 9, 5]), array([1, 6, 7, 4, 5, 3, 9, 0, 8, 2]), array([1, 6, 0, 4, 9, 7, 5, 8, 2, 3]), array([3, 9, 4, 5, 0, 7, 1, 2, 8, 6]), array([3, 1, 4, 6, 8, 7, 5, 2, 0, 9])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False,  True, False, False, False, False,  True, False, False,
       False, False]), array([False,  True, False, False,  True, False, False, False, False,
        True,  True, False, False,  True, False,  True, False, False,
       False, False]), array([False,  True, False, False,  True, False,  True, False, False,
        True,  True, False, False,  True, False,  True, False, False,
       False, False]), array([False,  True, False, False,  True, False,  True, False, False,
        True,  True, False, False,  True, False,  True, False,  True,
       False, False]), array([False,  True, False, False,  True,  True,  True, False, False,
        True,  True, False, False,  True, False,  True, False,  True,
       False, False]), array([False,  True,  True, False,  True,  True,  True, False, False,
        True,  True, False, False,  True, False,  True, False,  True,
       False, False]), array([False,  True,  True, False,  True,  True,  True, False, False,
        True,  True, False,  True,  True, False,  True, False,  True,
       False, False]), array([False,  True,  True, False,  True,  True,  True, False, False,
        True,  True, False,  True,  True, False,  True, False,  True,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True, False, False,
        True,  True, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True, False,  True,
        True,  True, False,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True, False,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 15
 next_t : [6, 13, 3, 3, 2, 2, 3, 3, 2, 2, 17, 7, 2, 25, 3], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[ 2,  7, 10,  1, 19,  8,  3, 14,  9, 15],
        [15, 16,  8,  9, 19,  6,  4,  2, 13,  1],
        [18, 11, 14,  9, 13,  6,  4, 16,  8, 17],
        [14,  5,  0, 18,  2,  6,  8, 12, 11, 17],
        [ 8,  5,  0, 19,  2,  7, 18, 16, 14, 17],
        [ 8,  5,  0, 19,  2, 12, 16, 18, 14,  7],
        [ 8, 11,  0, 19,  2, 12,  7, 16, 14, 18],
        [16,  8,  0, 19,  7, 12, 11, 18, 14,  3],
        [ 3,  7,  0, 19,  8, 20, 18, 11, 14, 16],
        [18, 11,  0, 20, 20,  8, 16,  7, 14,  3],
        [18,  3, 16, 20, 20, 20,  7, 11,  8, 20],
        [20,  3, 20, 20, 16, 18,  7, 11, 20, 20],
        [18,  3, 20, 20, 16, 20,  7, 20, 20, 20],
        [20, 20, 20, 16, 20, 20, 20, 20, 20, 18],
        [20, 20, 20, 16, 20, 20, 20, 20, 20, 20]]), torch.Size([15, 10])
 all_action : tensor([[ 2],
        [ 7],
        [10],
        [ 1],
        [19],
        [ 8],
        [ 3],
        [14],
        [ 9],
        [15],
        [15],
        [16],
        [ 8],
        [ 9],
        [19],
        [ 6],
        [ 4],
        [ 2],
        [13],
        [ 1],
        [18],
        [11],
        [14],
        [ 9],
        [13],
        [ 6],
        [ 4],
        [16],
        [ 8],
        [17],
        [14],
        [ 5],
        [ 0],
        [18],
        [ 2],
        [ 6],
        [ 8],
        [12],
        [11],
        [17],
        [ 8],
        [ 5],
        [ 0],
        [19],
        [ 2],
        [ 7],
        [18],
        [16],
        [14],
        [17],
        [ 8],
        [ 5],
        [ 0],
        [19],
        [ 2],
        [12],
        [16],
        [18],
        [14],
        [ 7],
        [ 8],
        [11],
        [ 0],
        [19],
        [ 2],
        [12],
        [ 7],
        [16],
        [14],
        [18],
        [16],
        [ 8],
        [ 0],
        [19],
        [ 7],
        [12],
        [11],
        [18],
        [14],
        [ 3],
        [ 3],
        [ 7],
        [ 0],
        [19],
        [ 8],
        [20],
        [18],
        [11],
        [14],
        [16],
        [18],
        [11],
        [ 0],
        [20],
        [20],
        [ 8],
        [16],
        [ 7],
        [14],
        [ 3],
        [18],
        [ 3],
        [16],
        [20],
        [20],
        [20],
        [ 7],
        [11],
        [ 8],
        [20],
        [20],
        [ 3],
        [20],
        [20],
        [16],
        [18],
        [ 7],
        [11],
        [20],
        [20],
        [18],
        [ 3],
        [20],
        [20],
        [16],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([150, 1])
next_t : tensor([ 6, 13,  3,  3,  2,  2,  3,  3,  2,  2, 17,  7,  2, 25,  3]), torch.Size([15])
 ret : tensor([79, 74, 62, 60, 58, 57, 56, 54, 52, 51, 50, 34, 28, 27,  3]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -28.9037,  -27.0805,  -26.3906,  -25.6495,
         -24.8491,  -23.9790,  -32.2362,  -40.6036,  -57.7272,  -66.5234,
         -75.5153,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:10<00:00, 10.14s/it]
[[0, 8], [1, 13, 12, 11], [2, 6, 4], [10, 19], [], [5, 17], [15], [7, 18], [16], [9, 3, 14]]
  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[12, 17], [5, 3], [7, 10], [18], [14, 8], [13], [2, 19], [4, 15, 11], [16, 9, 6, 1], [0]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[12, 5, 17, 11, 9, 2, 14, 4, 0, 13], [18, 5, 7, 19, 14, 2, 9, 8, 16, 1], [6, 2, 7, 18, 14, 15, 11, 10, 16, 17], [8, 1, 7, 18, 19, 10, 2, 9, 16, 15], [17, 3, 7, 18, 10, 15, 1, 8, 16, 0], [17, 3, 7, 18, 13, 8, 19, 1, 10, 0], [17, 3, 1, 18, 10, 6, 19, 8, 9, 0], [17, 3, 11, 15, 8, 10, 19, 6, 9, 0], [17, 10, 1, 11, 8, 13, 19, 15, 6, 0], [17, 20, 1, 10, 8, 13, 20, 15, 6, 11], [10, 20, 20, 20, 8, 13, 20, 15, 1, 11], [20, 20, 10, 20, 1, 13, 20, 11, 20, 20], [20, 20, 10, 20, 1, 11, 20, 20, 20, 20], [20, 20, 20, 11, 20, 20, 20, 20, 1, 20], [20, 20, 20, 20, 20, 20, 20, 11, 20, 20]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 6, 0, 2, 9, 3, 4, 7, 5, 8]), array([2, 4, 8, 3, 7, 0, 6, 1, 5, 9]), array([2, 3, 8, 4, 1, 6, 7, 0, 9, 5]), array([2, 3, 8, 0, 1, 6, 7, 5, 4, 9]), array([0, 1, 2, 3, 9, 4, 7, 8, 6, 5]), array([0, 1, 3, 6, 9, 2, 7, 4, 8, 5]), array([0, 1, 6, 8, 9, 2, 4, 5, 7, 3]), array([0, 4, 6, 9, 3, 8, 5, 1, 2, 7]), array([0, 4, 5, 7, 8, 9, 3, 2, 1, 6]), array([4, 5, 6, 7, 9, 0, 8, 1, 2, 3]), array([5, 7, 2, 4, 3, 6, 8, 0, 9, 1]), array([2, 4, 5, 9, 8, 6, 3, 7, 1, 0]), array([8, 3, 5, 1, 0, 6, 2, 4, 9, 7]), array([7, 1, 6, 9, 8, 5, 2, 3, 0, 4])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True,  True, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True,  True, False, False, False,
       False, False, False,  True, False,  True, False, False, False,
       False, False]), array([False, False,  True, False,  True,  True, False, False, False,
       False, False, False,  True, False,  True, False, False, False,
       False, False]), array([False, False,  True, False,  True,  True, False, False, False,
       False, False, False,  True, False,  True, False,  True, False,
       False, False]), array([False, False,  True, False,  True,  True, False,  True, False,
       False, False, False,  True, False,  True, False,  True, False,
       False, False]), array([False, False,  True, False,  True,  True, False,  True, False,
       False, False, False,  True, False,  True, False,  True, False,
        True, False]), array([False, False,  True,  True,  True,  True, False,  True, False,
        True, False, False,  True, False,  True, False,  True, False,
        True, False]), array([ True, False,  True,  True,  True,  True, False,  True, False,
        True, False, False,  True, False,  True, False,  True, False,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True, False,
        True, False, False,  True, False,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True, False,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 15
 next_t : [3, 10, 2, 4, 2, 3, 3, 2, 3, 3, 6, 3, 9, 13, 18], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[12,  5, 17, 11,  9,  2, 14,  4,  0, 13],
        [18,  5,  7, 19, 14,  2,  9,  8, 16,  1],
        [ 6,  2,  7, 18, 14, 15, 11, 10, 16, 17],
        [ 8,  1,  7, 18, 19, 10,  2,  9, 16, 15],
        [17,  3,  7, 18, 10, 15,  1,  8, 16,  0],
        [17,  3,  7, 18, 13,  8, 19,  1, 10,  0],
        [17,  3,  1, 18, 10,  6, 19,  8,  9,  0],
        [17,  3, 11, 15,  8, 10, 19,  6,  9,  0],
        [17, 10,  1, 11,  8, 13, 19, 15,  6,  0],
        [17, 20,  1, 10,  8, 13, 20, 15,  6, 11],
        [10, 20, 20, 20,  8, 13, 20, 15,  1, 11],
        [20, 20, 10, 20,  1, 13, 20, 11, 20, 20],
        [20, 20, 10, 20,  1, 11, 20, 20, 20, 20],
        [20, 20, 20, 11, 20, 20, 20, 20,  1, 20],
        [20, 20, 20, 20, 20, 20, 20, 11, 20, 20]]), torch.Size([15, 10])
 all_action : tensor([[12],
        [ 5],
        [17],
        [11],
        [ 9],
        [ 2],
        [14],
        [ 4],
        [ 0],
        [13],
        [18],
        [ 5],
        [ 7],
        [19],
        [14],
        [ 2],
        [ 9],
        [ 8],
        [16],
        [ 1],
        [ 6],
        [ 2],
        [ 7],
        [18],
        [14],
        [15],
        [11],
        [10],
        [16],
        [17],
        [ 8],
        [ 1],
        [ 7],
        [18],
        [19],
        [10],
        [ 2],
        [ 9],
        [16],
        [15],
        [17],
        [ 3],
        [ 7],
        [18],
        [10],
        [15],
        [ 1],
        [ 8],
        [16],
        [ 0],
        [17],
        [ 3],
        [ 7],
        [18],
        [13],
        [ 8],
        [19],
        [ 1],
        [10],
        [ 0],
        [17],
        [ 3],
        [ 1],
        [18],
        [10],
        [ 6],
        [19],
        [ 8],
        [ 9],
        [ 0],
        [17],
        [ 3],
        [11],
        [15],
        [ 8],
        [10],
        [19],
        [ 6],
        [ 9],
        [ 0],
        [17],
        [10],
        [ 1],
        [11],
        [ 8],
        [13],
        [19],
        [15],
        [ 6],
        [ 0],
        [17],
        [20],
        [ 1],
        [10],
        [ 8],
        [13],
        [20],
        [15],
        [ 6],
        [11],
        [10],
        [20],
        [20],
        [20],
        [ 8],
        [13],
        [20],
        [15],
        [ 1],
        [11],
        [20],
        [20],
        [10],
        [20],
        [ 1],
        [13],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [10],
        [20],
        [ 1],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20]]), torch.Size([150, 1])
next_t : tensor([ 3, 10,  2,  4,  2,  3,  3,  2,  3,  3,  6,  3,  9, 13, 18]), torch.Size([15])
 ret : tensor([70, 68, 59, 58, 55, 54, 52, 50, 49, 47, 45, 40, 38, 30, 18]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.9037,  -28.3321,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -23.9790,  -40.6036,  -57.7272,  -75.5153,
         -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
[[3, 2], [9], [10, 0], [11, 8], [5], [6], [12, 16, 13], [17, 14, 7], [19, 4, 18], [1, 15]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[3, 11, 13, 8, 2, 0, 12, 17, 7, 1], [3, 11, 10, 5, 4, 16, 12, 17, 19, 15], [3, 18, 10, 5, 2, 13, 12, 7, 19, 15], [3, 14, 10, 0, 11, 13, 16, 2, 19, 15], [3, 4, 2, 8, 9, 6, 16, 0, 19, 15], [18, 0, 2, 8, 14, 6, 16, 11, 19, 7], [2, 13, 5, 11, 7, 6, 0, 14, 4, 18], [2, 0, 9, 11, 13, 5, 7, 14, 4, 18], [8, 9, 18, 11, 7, 13, 5, 14, 0, 4], [18, 9, 20, 0, 8, 13, 5, 14, 4, 7], [18, 9, 8, 20, 0, 4, 13, 7, 20, 5], [20, 5, 18, 20, 20, 8, 13, 7, 4, 0], [8, 18, 20, 20, 5, 20, 13, 0, 4, 20], [20, 20, 0, 8, 5, 20, 20, 20, 4, 18], [20, 20, 0, 8, 20, 20, 20, 18, 4, 20], [20, 20, 0, 8, 20, 20, 20, 18, 20, 20], [20, 20, 0, 20, 20, 20, 20, 20, 18, 20], [20, 20, 20, 20, 20, 20, 20, 20, 18, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([6, 7, 0, 1, 3, 5, 8, 9, 2, 4]), array([0, 2, 6, 8, 9, 4, 1, 7, 3, 5]), array([0, 2, 8, 9, 1, 3, 6, 7, 4, 5]), array([0, 6, 8, 9, 7, 1, 3, 4, 5, 2]), array([5, 6, 8, 1, 9, 0, 3, 4, 2, 7]), array([5, 4, 9, 2, 6, 3, 0, 1, 7, 8]), array([0, 3, 7, 9, 2, 6, 8, 4, 1, 5]), array([3, 7, 9, 6, 8, 5, 1, 0, 4, 2]), array([1, 7, 4, 5, 8, 9, 0, 6, 3, 2]), array([1, 2, 6, 9, 7, 4, 5, 0, 8, 3]), array([6, 7, 8, 9, 5, 1, 2, 4, 3, 0]), array([6, 1, 4, 7, 8, 0, 9, 3, 2, 5]), array([4, 2, 8, 9, 3, 5, 6, 0, 1, 7]), array([2, 3, 8, 7, 6, 5, 0, 1, 9, 4]), array([2, 3, 7, 5, 9, 8, 4, 1, 0, 6]), array([2, 8, 4, 7, 5, 3, 1, 0, 6, 9]), array([8, 2, 4, 7, 3, 9, 5, 0, 1, 6])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False,  True,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False,  True, False,  True, False, False, False, False,  True,
       False, False]), array([False,  True, False,  True, False, False, False, False, False,
       False,  True, False,  True, False, False,  True, False,  True,
       False, False]), array([False,  True, False,  True, False, False, False, False, False,
       False,  True, False,  True, False, False,  True,  True,  True,
       False,  True]), array([False,  True, False,  True, False, False,  True, False, False,
       False,  True, False,  True, False, False,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True, False, False,  True, False, False,
       False,  True, False,  True, False, False,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True, False, False,  True, False, False,
       False,  True,  True,  True, False, False,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True, False, False,  True, False, False,
       False,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True, False, False,  True, False, False,
        True,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True, False, False,  True,  True, False,
        True,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True, False, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True, False,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([False,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True])], 18
 next_t : [13, 4, 3, 5, 2, 2, 3, 2, 3, 3, 5, 4, 7, 10, 2, 2, 8, 2], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 3, 11, 13,  8,  2,  0, 12, 17,  7,  1],
        [ 3, 11, 10,  5,  4, 16, 12, 17, 19, 15],
        [ 3, 18, 10,  5,  2, 13, 12,  7, 19, 15],
        [ 3, 14, 10,  0, 11, 13, 16,  2, 19, 15],
        [ 3,  4,  2,  8,  9,  6, 16,  0, 19, 15],
        [18,  0,  2,  8, 14,  6, 16, 11, 19,  7],
        [ 2, 13,  5, 11,  7,  6,  0, 14,  4, 18],
        [ 2,  0,  9, 11, 13,  5,  7, 14,  4, 18],
        [ 8,  9, 18, 11,  7, 13,  5, 14,  0,  4],
        [18,  9, 20,  0,  8, 13,  5, 14,  4,  7],
        [18,  9,  8, 20,  0,  4, 13,  7, 20,  5],
        [20,  5, 18, 20, 20,  8, 13,  7,  4,  0],
        [ 8, 18, 20, 20,  5, 20, 13,  0,  4, 20],
        [20, 20,  0,  8,  5, 20, 20, 20,  4, 18],
        [20, 20,  0,  8, 20, 20, 20, 18,  4, 20],
        [20, 20,  0,  8, 20, 20, 20, 18, 20, 20],
        [20, 20,  0, 20, 20, 20, 20, 20, 18, 20],
        [20, 20, 20, 20, 20, 20, 20, 20, 18, 20]]), torch.Size([18, 10])
 all_action : tensor([[ 3],
        [11],
        [13],
        [ 8],
        [ 2],
        [ 0],
        [12],
        [17],
        [ 7],
        [ 1],
        [ 3],
        [11],
        [10],
        [ 5],
        [ 4],
        [16],
        [12],
        [17],
        [19],
        [15],
        [ 3],
        [18],
        [10],
        [ 5],
        [ 2],
        [13],
        [12],
        [ 7],
        [19],
        [15],
        [ 3],
        [14],
        [10],
        [ 0],
        [11],
        [13],
        [16],
        [ 2],
        [19],
        [15],
        [ 3],
        [ 4],
        [ 2],
        [ 8],
        [ 9],
        [ 6],
        [16],
        [ 0],
        [19],
        [15],
        [18],
        [ 0],
        [ 2],
        [ 8],
        [14],
        [ 6],
        [16],
        [11],
        [19],
        [ 7],
        [ 2],
        [13],
        [ 5],
        [11],
        [ 7],
        [ 6],
        [ 0],
        [14],
        [ 4],
        [18],
        [ 2],
        [ 0],
        [ 9],
        [11],
        [13],
        [ 5],
        [ 7],
        [14],
        [ 4],
        [18],
        [ 8],
        [ 9],
        [18],
        [11],
        [ 7],
        [13],
        [ 5],
        [14],
        [ 0],
        [ 4],
        [18],
        [ 9],
        [20],
        [ 0],
        [ 8],
        [13],
        [ 5],
        [14],
        [ 4],
        [ 7],
        [18],
        [ 9],
        [ 8],
        [20],
        [ 0],
        [ 4],
        [13],
        [ 7],
        [20],
        [ 5],
        [20],
        [ 5],
        [18],
        [20],
        [20],
        [ 8],
        [13],
        [ 7],
        [ 4],
        [ 0],
        [ 8],
        [18],
        [20],
        [20],
        [ 5],
        [20],
        [13],
        [ 0],
        [ 4],
        [20],
        [20],
        [20],
        [ 0],
        [ 8],
        [ 5],
        [20],
        [20],
        [20],
        [ 4],
        [18],
        [20],
        [20],
        [ 0],
        [ 8],
        [20],
        [20],
        [20],
        [18],
        [ 4],
        [20],
        [20],
        [20],
        [ 0],
        [ 8],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [20],
        [20],
        [ 0],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20]]), torch.Size([180, 1])
next_t : tensor([13,  4,  3,  5,  2,  2,  3,  2,  3,  3,  5,  4,  7, 10,  2,  2,  8,  2]), torch.Size([18])
 ret : tensor([63, 51, 48, 46, 42, 41, 40, 38, 37, 35, 33, 29, 26, 20, 11, 10,  9,  2]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[15], [13], [11, 3], [0, 8, 7], [17, 6, 4], [2, 12], [5, 14], [9, 10], [19, 1], [16, 18]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 19
 joint_action : [[7, 4, 1, 19, 17, 8, 2, 18, 3, 16], [12, 13, 19, 0, 17, 7, 5, 2, 14, 1], [11, 13, 4, 0, 19, 2, 5, 9, 15, 1], [4, 15, 11, 0, 6, 2, 5, 9, 19, 14], [15, 3, 11, 7, 6, 2, 5, 9, 19, 1], [15, 3, 11, 8, 6, 2, 5, 12, 19, 18], [15, 1, 11, 12, 6, 8, 14, 7, 19, 18], [15, 4, 11, 10, 7, 3, 14, 12, 19, 18], [15, 12, 11, 8, 7, 3, 14, 1, 10, 18], [15, 1, 12, 10, 4, 7, 14, 8, 3, 18], [15, 12, 3, 8, 4, 1, 14, 10, 7, 20], [15, 12, 20, 7, 4, 20, 1, 10, 8, 3], [12, 20, 3, 8, 4, 20, 20, 10, 1, 7], [8, 20, 3, 20, 4, 7, 20, 12, 1, 20], [20, 20, 3, 8, 20, 20, 12, 20, 1, 7], [20, 20, 20, 8, 12, 7, 20, 20, 1, 20], [20, 20, 20, 8, 20, 12, 7, 20, 20, 20], [20, 7, 20, 20, 20, 12, 20, 20, 20, 20], [20, 20, 20, 7, 20, 20, 20, 20, 20, 20]], 19
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([4, 3, 9, 8, 2, 7, 0, 5, 6, 1]), array([1, 3, 6, 9, 7, 0, 8, 2, 5, 4]), array([3, 5, 6, 7, 8, 1, 0, 2, 9, 4]), array([2, 4, 5, 6, 7, 8, 9, 3, 0, 1]), array([0, 2, 4, 5, 6, 8, 3, 9, 1, 7]), array([0, 2, 4, 8, 9, 6, 7, 3, 1, 5]), array([0, 2, 6, 8, 9, 5, 7, 1, 3, 4]), array([0, 2, 6, 9, 1, 5, 7, 8, 4, 3]), array([0, 6, 9, 2, 1, 4, 3, 8, 5, 7]), array([0, 4, 6, 7, 2, 8, 1, 5, 3, 9]), array([0, 4, 7, 1, 3, 6, 8, 9, 2, 5]), array([4, 7, 9, 0, 2, 8, 3, 6, 5, 1]), array([2, 4, 8, 0, 7, 5, 9, 3, 6, 1]), array([2, 8, 6, 9, 3, 4, 0, 5, 7, 1]), array([8, 3, 5, 4, 1, 2, 6, 7, 9, 0]), array([5, 6, 3, 4, 0, 8, 2, 1, 7, 9]), array([1, 5, 6, 9, 0, 2, 4, 3, 7, 8]), array([3, 5, 7, 9, 8, 6, 2, 1, 4, 0])], 19
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False,  True, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False,  True,  True,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False,  True,  True,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False,  True,  True,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
        True, False, False, False,  True, False, False,  True,  True,
       False, False]), array([ True, False,  True, False, False,  True, False, False, False,
        True, False, False, False,  True, False, False,  True,  True,
       False, False]), array([ True, False,  True, False, False,  True,  True, False, False,
        True, False, False, False,  True, False, False,  True,  True,
       False, False]), array([ True, False,  True, False, False,  True,  True, False, False,
        True, False, False, False,  True, False, False,  True,  True,
       False,  True]), array([ True, False,  True, False, False,  True,  True, False, False,
        True, False,  True, False,  True, False, False,  True,  True,
       False,  True]), array([ True, False,  True, False, False,  True,  True, False, False,
        True, False,  True, False,  True, False, False,  True,  True,
        True,  True]), array([ True, False,  True, False, False,  True,  True, False, False,
        True, False,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True, False,  True, False, False,  True,  True, False, False,
        True, False,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True, False, False,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True, False,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 19
 next_t : [6, 2, 5, 2, 4, 2, 2, 4, 2, 2, 2, 2, 7, 2, 6, 2, 12, 20, 7], 19
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 19
iteration : 19
joint_action : tensor([[ 7,  4,  1, 19, 17,  8,  2, 18,  3, 16],
        [12, 13, 19,  0, 17,  7,  5,  2, 14,  1],
        [11, 13,  4,  0, 19,  2,  5,  9, 15,  1],
        [ 4, 15, 11,  0,  6,  2,  5,  9, 19, 14],
        [15,  3, 11,  7,  6,  2,  5,  9, 19,  1],
        [15,  3, 11,  8,  6,  2,  5, 12, 19, 18],
        [15,  1, 11, 12,  6,  8, 14,  7, 19, 18],
        [15,  4, 11, 10,  7,  3, 14, 12, 19, 18],
        [15, 12, 11,  8,  7,  3, 14,  1, 10, 18],
        [15,  1, 12, 10,  4,  7, 14,  8,  3, 18],
        [15, 12,  3,  8,  4,  1, 14, 10,  7, 20],
        [15, 12, 20,  7,  4, 20,  1, 10,  8,  3],
        [12, 20,  3,  8,  4, 20, 20, 10,  1,  7],
        [ 8, 20,  3, 20,  4,  7, 20, 12,  1, 20],
        [20, 20,  3,  8, 20, 20, 12, 20,  1,  7],
        [20, 20, 20,  8, 12,  7, 20, 20,  1, 20],
        [20, 20, 20,  8, 20, 12,  7, 20, 20, 20],
        [20,  7, 20, 20, 20, 12, 20, 20, 20, 20],
        [20, 20, 20,  7, 20, 20, 20, 20, 20, 20]]), torch.Size([19, 10])
 all_action : tensor([[ 7],
        [ 4],
        [ 1],
        [19],
        [17],
        [ 8],
        [ 2],
        [18],
        [ 3],
        [16],
        [12],
        [13],
        [19],
        [ 0],
        [17],
        [ 7],
        [ 5],
        [ 2],
        [14],
        [ 1],
        [11],
        [13],
        [ 4],
        [ 0],
        [19],
        [ 2],
        [ 5],
        [ 9],
        [15],
        [ 1],
        [ 4],
        [15],
        [11],
        [ 0],
        [ 6],
        [ 2],
        [ 5],
        [ 9],
        [19],
        [14],
        [15],
        [ 3],
        [11],
        [ 7],
        [ 6],
        [ 2],
        [ 5],
        [ 9],
        [19],
        [ 1],
        [15],
        [ 3],
        [11],
        [ 8],
        [ 6],
        [ 2],
        [ 5],
        [12],
        [19],
        [18],
        [15],
        [ 1],
        [11],
        [12],
        [ 6],
        [ 8],
        [14],
        [ 7],
        [19],
        [18],
        [15],
        [ 4],
        [11],
        [10],
        [ 7],
        [ 3],
        [14],
        [12],
        [19],
        [18],
        [15],
        [12],
        [11],
        [ 8],
        [ 7],
        [ 3],
        [14],
        [ 1],
        [10],
        [18],
        [15],
        [ 1],
        [12],
        [10],
        [ 4],
        [ 7],
        [14],
        [ 8],
        [ 3],
        [18],
        [15],
        [12],
        [ 3],
        [ 8],
        [ 4],
        [ 1],
        [14],
        [10],
        [ 7],
        [20],
        [15],
        [12],
        [20],
        [ 7],
        [ 4],
        [20],
        [ 1],
        [10],
        [ 8],
        [ 3],
        [12],
        [20],
        [ 3],
        [ 8],
        [ 4],
        [20],
        [20],
        [10],
        [ 1],
        [ 7],
        [ 8],
        [20],
        [ 3],
        [20],
        [ 4],
        [ 7],
        [20],
        [12],
        [ 1],
        [20],
        [20],
        [20],
        [ 3],
        [ 8],
        [20],
        [20],
        [12],
        [20],
        [ 1],
        [ 7],
        [20],
        [20],
        [20],
        [ 8],
        [12],
        [ 7],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [12],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([190, 1])
next_t : tensor([ 6,  2,  5,  2,  4,  2,  2,  4,  2,  2,  2,  2,  7,  2,  6,  2, 12, 20,
         7]), torch.Size([19])
 ret : tensor([73, 68, 67, 63, 62, 59, 58, 57, 54, 53, 52, 51, 50, 44, 43, 38, 37, 26,
         7]), torch.Size([19])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([190, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([190, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -26.3906,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,
         -49.0949,  -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006,
        -104.3095], grad_fn=<SumBackward1>), torch.Size([19])
[[10], [4], [3, 2], [8, 19], [5], [0, 13, 15], [16, 6, 1], [18], [11, 7], [14, 17, 9, 12]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[0, 2, 11, 12, 19, 10, 5, 18, 6, 14], [3, 13, 9, 8, 5, 0, 12, 18, 19, 1], [3, 11, 9, 1, 5, 0, 16, 18, 4, 10], [10, 19, 9, 2, 5, 0, 16, 17, 6, 11], [10, 2, 3, 19, 5, 13, 16, 7, 12, 1], [10, 4, 3, 19, 9, 2, 16, 1, 11, 6], [9, 4, 3, 19, 2, 13, 16, 12, 11, 17], [1, 4, 3, 2, 15, 13, 6, 19, 11, 17], [15, 4, 3, 7, 2, 13, 6, 12, 11, 9], [19, 12, 3, 2, 7, 13, 6, 1, 11, 9], [15, 1, 19, 2, 12, 13, 20, 7, 20, 9], [20, 19, 20, 12, 15, 7, 1, 2, 20, 9], [20, 15, 20, 19, 20, 20, 12, 1, 7, 2], [20, 12, 2, 7, 20, 20, 1, 20, 20, 15], [7, 20, 2, 12, 20, 15, 20, 20, 20, 20], [7, 20, 12, 20, 20, 15, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 20, 7, 12], [20, 20, 20, 20, 20, 20, 20, 20, 7, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([7, 1, 8, 2, 9, 4, 5, 6, 0, 3]), array([4, 5, 7, 1, 2, 9, 6, 3, 8, 0]), array([4, 5, 6, 8, 0, 2, 1, 7, 3, 9]), array([0, 4, 6, 3, 9, 1, 5, 8, 7, 2]), array([0, 2, 6, 5, 3, 9, 4, 7, 1, 8]), array([1, 2, 6, 8, 5, 9, 7, 0, 3, 4]), array([1, 2, 5, 8, 9, 4, 3, 6, 0, 7]), array([1, 2, 5, 6, 8, 7, 3, 4, 0, 9]), array([2, 5, 6, 8, 9, 7, 1, 4, 3, 0]), array([5, 9, 0, 3, 1, 2, 7, 4, 6, 8]), array([9, 3, 4, 7, 1, 6, 5, 0, 2, 8]), array([9, 7, 6, 8, 3, 1, 4, 0, 5, 2]), array([1, 9, 6, 3, 2, 8, 0, 5, 7, 4]), array([2, 3, 5, 0, 4, 1, 9, 7, 6, 8]), array([5, 0, 2, 7, 3, 8, 1, 4, 9, 6]), array([9, 8, 3, 7, 4, 6, 1, 2, 5, 0]), array([8, 4, 2, 1, 0, 7, 3, 6, 5, 9])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False,  True,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False,  True,
       False, False, False, False, False,  True, False, False, False,
        True, False]), array([ True, False, False, False, False, False, False, False,  True,
       False, False, False, False, False,  True, False, False, False,
        True, False]), array([ True, False, False, False, False,  True, False, False,  True,
       False, False, False, False, False,  True, False, False, False,
        True, False]), array([ True, False, False, False, False,  True, False, False,  True,
       False,  True, False, False, False,  True, False, False, False,
        True, False]), array([ True, False, False, False, False,  True, False, False,  True,
       False,  True, False, False, False,  True, False,  True, False,
        True, False]), array([ True, False, False, False, False,  True, False, False,  True,
       False,  True, False, False, False,  True, False,  True,  True,
        True, False]), array([ True, False, False, False,  True,  True, False, False,  True,
       False,  True, False, False, False,  True, False,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
       False,  True,  True, False, False,  True, False,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
       False,  True,  True, False,  True,  True, False,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [8, 3, 2, 5, 2, 2, 2, 3, 4, 3, 3, 3, 13, 10, 8, 3, 26, 7], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 0,  2, 11, 12, 19, 10,  5, 18,  6, 14],
        [ 3, 13,  9,  8,  5,  0, 12, 18, 19,  1],
        [ 3, 11,  9,  1,  5,  0, 16, 18,  4, 10],
        [10, 19,  9,  2,  5,  0, 16, 17,  6, 11],
        [10,  2,  3, 19,  5, 13, 16,  7, 12,  1],
        [10,  4,  3, 19,  9,  2, 16,  1, 11,  6],
        [ 9,  4,  3, 19,  2, 13, 16, 12, 11, 17],
        [ 1,  4,  3,  2, 15, 13,  6, 19, 11, 17],
        [15,  4,  3,  7,  2, 13,  6, 12, 11,  9],
        [19, 12,  3,  2,  7, 13,  6,  1, 11,  9],
        [15,  1, 19,  2, 12, 13, 20,  7, 20,  9],
        [20, 19, 20, 12, 15,  7,  1,  2, 20,  9],
        [20, 15, 20, 19, 20, 20, 12,  1,  7,  2],
        [20, 12,  2,  7, 20, 20,  1, 20, 20, 15],
        [ 7, 20,  2, 12, 20, 15, 20, 20, 20, 20],
        [ 7, 20, 12, 20, 20, 15, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20, 20,  7, 12],
        [20, 20, 20, 20, 20, 20, 20, 20,  7, 20]]), torch.Size([18, 10])
 all_action : tensor([[ 0],
        [ 2],
        [11],
        [12],
        [19],
        [10],
        [ 5],
        [18],
        [ 6],
        [14],
        [ 3],
        [13],
        [ 9],
        [ 8],
        [ 5],
        [ 0],
        [12],
        [18],
        [19],
        [ 1],
        [ 3],
        [11],
        [ 9],
        [ 1],
        [ 5],
        [ 0],
        [16],
        [18],
        [ 4],
        [10],
        [10],
        [19],
        [ 9],
        [ 2],
        [ 5],
        [ 0],
        [16],
        [17],
        [ 6],
        [11],
        [10],
        [ 2],
        [ 3],
        [19],
        [ 5],
        [13],
        [16],
        [ 7],
        [12],
        [ 1],
        [10],
        [ 4],
        [ 3],
        [19],
        [ 9],
        [ 2],
        [16],
        [ 1],
        [11],
        [ 6],
        [ 9],
        [ 4],
        [ 3],
        [19],
        [ 2],
        [13],
        [16],
        [12],
        [11],
        [17],
        [ 1],
        [ 4],
        [ 3],
        [ 2],
        [15],
        [13],
        [ 6],
        [19],
        [11],
        [17],
        [15],
        [ 4],
        [ 3],
        [ 7],
        [ 2],
        [13],
        [ 6],
        [12],
        [11],
        [ 9],
        [19],
        [12],
        [ 3],
        [ 2],
        [ 7],
        [13],
        [ 6],
        [ 1],
        [11],
        [ 9],
        [15],
        [ 1],
        [19],
        [ 2],
        [12],
        [13],
        [20],
        [ 7],
        [20],
        [ 9],
        [20],
        [19],
        [20],
        [12],
        [15],
        [ 7],
        [ 1],
        [ 2],
        [20],
        [ 9],
        [20],
        [15],
        [20],
        [19],
        [20],
        [20],
        [12],
        [ 1],
        [ 7],
        [ 2],
        [20],
        [12],
        [ 2],
        [ 7],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [15],
        [ 7],
        [20],
        [ 2],
        [12],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [12],
        [20],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 8,  3,  2,  5,  2,  2,  2,  3,  4,  3,  3,  3, 13, 10,  8,  3, 26,  7]), torch.Size([18])
 ret : tensor([90, 83, 81, 80, 76, 75, 74, 73, 71, 68, 66, 64, 62, 50, 41, 34, 32,  7]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -26.3906,  -25.6495,  -24.8491,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[15, 6, 12], [10, 3, 16], [9, 17], [7], [4], [0, 18], [13], [14, 19], [11, 5], [2, 1, 8]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[12, 10, 9, 7, 1, 8, 0, 14, 11, 2], [17, 10, 9, 7, 18, 16, 6, 14, 11, 19], [15, 10, 9, 8, 18, 0, 6, 14, 11, 16], [18, 10, 9, 6, 5, 0, 13, 14, 11, 17], [19, 12, 18, 8, 17, 0, 13, 14, 11, 3], [6, 19, 3, 1, 4, 8, 13, 14, 17, 18], [6, 8, 3, 18, 4, 1, 13, 19, 12, 17], [6, 17, 3, 19, 16, 18, 5, 8, 12, 1], [12, 3, 17, 20, 19, 18, 8, 16, 5, 1], [20, 3, 17, 20, 16, 18, 8, 19, 5, 1], [20, 3, 20, 8, 16, 18, 20, 19, 5, 1], [20, 3, 16, 20, 20, 18, 8, 19, 5, 20], [20, 16, 8, 20, 20, 18, 20, 19, 5, 20], [20, 20, 20, 16, 20, 18, 20, 19, 20, 8], [20, 20, 20, 20, 16, 20, 20, 19, 20, 8], [20, 20, 20, 20, 16, 20, 20, 20, 20, 8], [20, 16, 20, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 2, 3, 7, 8, 9, 0, 6, 4, 5]), array([1, 2, 7, 8, 9, 0, 4, 5, 3, 6]), array([1, 2, 5, 7, 8, 6, 3, 0, 4, 9]), array([5, 6, 7, 8, 0, 9, 1, 2, 4, 3]), array([6, 7, 2, 0, 9, 5, 4, 8, 3, 1]), array([0, 4, 6, 1, 5, 2, 7, 9, 8, 3]), array([0, 3, 4, 9, 8, 2, 1, 7, 6, 5]), array([9, 1, 5, 2, 8, 0, 4, 7, 6, 3]), array([1, 2, 5, 8, 9, 4, 6, 7, 0, 3]), array([1, 5, 7, 8, 9, 3, 4, 6, 2, 0]), array([1, 5, 7, 8, 2, 6, 0, 4, 3, 9]), array([5, 7, 8, 2, 1, 3, 6, 9, 4, 0]), array([5, 7, 3, 9, 8, 4, 6, 1, 0, 2]), array([7, 9, 4, 1, 6, 2, 0, 5, 8, 3]), array([9, 4, 8, 7, 0, 5, 3, 6, 1, 2]), array([1, 0, 7, 8, 9, 5, 2, 4, 6, 3])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False,  True, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False,  True, False,
       False, False, False, False, False, False,  True, False, False,
       False, False]), array([False, False,  True, False, False, False, False,  True, False,
        True,  True, False, False, False, False,  True, False, False,
       False, False]), array([ True, False,  True, False, False, False, False,  True, False,
        True,  True,  True, False, False, False,  True, False, False,
       False, False]), array([ True, False,  True, False, False, False, False,  True, False,
        True,  True,  True, False, False,  True,  True, False, False,
       False, False]), array([ True, False,  True, False,  True, False, False,  True, False,
        True,  True,  True, False,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True, False,  True, False,  True,  True, False,
        True,  True,  True, False,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True, False,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True, False,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False, False]), array([ True,  True,  True, False,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False, False]), array([ True,  True,  True,  True,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 17
 next_t : [11, 2, 3, 3, 3, 3, 5, 2, 7, 3, 2, 4, 2, 3, 2, 8, 34], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[12, 10,  9,  7,  1,  8,  0, 14, 11,  2],
        [17, 10,  9,  7, 18, 16,  6, 14, 11, 19],
        [15, 10,  9,  8, 18,  0,  6, 14, 11, 16],
        [18, 10,  9,  6,  5,  0, 13, 14, 11, 17],
        [19, 12, 18,  8, 17,  0, 13, 14, 11,  3],
        [ 6, 19,  3,  1,  4,  8, 13, 14, 17, 18],
        [ 6,  8,  3, 18,  4,  1, 13, 19, 12, 17],
        [ 6, 17,  3, 19, 16, 18,  5,  8, 12,  1],
        [12,  3, 17, 20, 19, 18,  8, 16,  5,  1],
        [20,  3, 17, 20, 16, 18,  8, 19,  5,  1],
        [20,  3, 20,  8, 16, 18, 20, 19,  5,  1],
        [20,  3, 16, 20, 20, 18,  8, 19,  5, 20],
        [20, 16,  8, 20, 20, 18, 20, 19,  5, 20],
        [20, 20, 20, 16, 20, 18, 20, 19, 20,  8],
        [20, 20, 20, 20, 16, 20, 20, 19, 20,  8],
        [20, 20, 20, 20, 16, 20, 20, 20, 20,  8],
        [20, 16, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[12],
        [10],
        [ 9],
        [ 7],
        [ 1],
        [ 8],
        [ 0],
        [14],
        [11],
        [ 2],
        [17],
        [10],
        [ 9],
        [ 7],
        [18],
        [16],
        [ 6],
        [14],
        [11],
        [19],
        [15],
        [10],
        [ 9],
        [ 8],
        [18],
        [ 0],
        [ 6],
        [14],
        [11],
        [16],
        [18],
        [10],
        [ 9],
        [ 6],
        [ 5],
        [ 0],
        [13],
        [14],
        [11],
        [17],
        [19],
        [12],
        [18],
        [ 8],
        [17],
        [ 0],
        [13],
        [14],
        [11],
        [ 3],
        [ 6],
        [19],
        [ 3],
        [ 1],
        [ 4],
        [ 8],
        [13],
        [14],
        [17],
        [18],
        [ 6],
        [ 8],
        [ 3],
        [18],
        [ 4],
        [ 1],
        [13],
        [19],
        [12],
        [17],
        [ 6],
        [17],
        [ 3],
        [19],
        [16],
        [18],
        [ 5],
        [ 8],
        [12],
        [ 1],
        [12],
        [ 3],
        [17],
        [20],
        [19],
        [18],
        [ 8],
        [16],
        [ 5],
        [ 1],
        [20],
        [ 3],
        [17],
        [20],
        [16],
        [18],
        [ 8],
        [19],
        [ 5],
        [ 1],
        [20],
        [ 3],
        [20],
        [ 8],
        [16],
        [18],
        [20],
        [19],
        [ 5],
        [ 1],
        [20],
        [ 3],
        [16],
        [20],
        [20],
        [18],
        [ 8],
        [19],
        [ 5],
        [20],
        [20],
        [16],
        [ 8],
        [20],
        [20],
        [18],
        [20],
        [19],
        [ 5],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [18],
        [20],
        [19],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [19],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([11,  2,  3,  3,  3,  3,  5,  2,  7,  3,  2,  4,  2,  3,  2,  8, 34]), torch.Size([17])
 ret : tensor([81, 71, 70, 68, 66, 64, 62, 58, 57, 51, 49, 48, 45, 44, 42, 41, 34]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -26.3906,
         -25.6495,  -23.9790,  -32.2362,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:09<00:00,  9.08s/it]
[[0, 11], [1, 15], [2, 4, 13], [10, 19], [6], [5, 12], [14, 18], [7, 17], [16], [9, 3, 8]]
  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[15], [19, 4], [7, 10], [5, 0, 18], [6], [8, 12], [17, 13, 1], [11], [14, 9], [3, 16, 2]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[2, 19, 7, 5, 0, 8, 17, 6, 18, 3], [14, 4, 7, 5, 12, 8, 17, 10, 1, 3], [1, 4, 7, 5, 2, 12, 17, 18, 14, 3], [9, 4, 2, 5, 18, 12, 17, 15, 14, 3], [15, 4, 1, 2, 6, 12, 13, 18, 9, 3], [15, 4, 10, 2, 6, 12, 13, 0, 9, 16], [15, 18, 10, 1, 6, 12, 13, 0, 9, 2], [15, 20, 10, 2, 6, 0, 18, 1, 9, 11], [15, 0, 10, 11, 6, 20, 18, 1, 20, 2], [15, 20, 10, 0, 2, 11, 20, 1, 20, 18], [20, 20, 10, 0, 2, 20, 18, 20, 11, 1], [20, 1, 11, 0, 20, 20, 20, 20, 18, 2], [20, 20, 20, 20, 1, 11, 20, 20, 18, 2], [20, 20, 20, 18, 20, 20, 1, 20, 11, 20], [20, 20, 20, 18, 11, 20, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 11, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 3, 5, 6, 9, 1, 8, 7, 0, 4]), array([1, 2, 3, 6, 9, 5, 0, 8, 7, 4]), array([1, 3, 5, 6, 8, 9, 2, 7, 4, 0]), array([1, 5, 9, 4, 8, 7, 2, 0, 6, 3]), array([0, 1, 4, 5, 6, 8, 3, 2, 7, 9]), array([0, 2, 4, 5, 6, 8, 3, 9, 7, 1]), array([0, 2, 4, 8, 7, 3, 9, 5, 6, 1]), array([0, 2, 4, 3, 9, 7, 1, 6, 8, 5]), array([0, 2, 5, 9, 3, 4, 7, 6, 1, 8]), array([2, 3, 4, 9, 8, 6, 1, 5, 0, 7]), array([3, 1, 8, 2, 9, 0, 4, 5, 7, 6]), array([9, 4, 5, 8, 2, 6, 0, 1, 7, 3]), array([3, 6, 8, 1, 5, 2, 4, 0, 9, 7]), array([3, 4, 2, 8, 6, 9, 7, 0, 1, 5]), array([7, 9, 2, 3, 6, 1, 4, 0, 5, 8])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False, False, False, False,  True,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False, False, False,  True,  True,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False,  True, False,  True,  True,
       False, False, False, False, False,  True, False, False,  True,
       False,  True]), array([False, False, False,  True, False,  True, False,  True,  True,
       False, False, False, False, False,  True, False, False,  True,
       False,  True]), array([False, False, False,  True,  True,  True, False,  True,  True,
       False, False, False, False, False,  True, False,  True,  True,
       False,  True]), array([False, False, False,  True,  True,  True, False,  True,  True,
       False, False, False,  True,  True,  True, False,  True,  True,
       False,  True]), array([False, False, False,  True,  True,  True, False,  True,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
       False,  True]), array([False, False, False,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
       False,  True]), array([False, False, False,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
       False,  True]), array([False, False, False,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [14, 3, 2, 2, 5, 3, 3, 3, 2, 2, 3, 7, 7, 22, 5, 41], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[ 2, 19,  7,  5,  0,  8, 17,  6, 18,  3],
        [14,  4,  7,  5, 12,  8, 17, 10,  1,  3],
        [ 1,  4,  7,  5,  2, 12, 17, 18, 14,  3],
        [ 9,  4,  2,  5, 18, 12, 17, 15, 14,  3],
        [15,  4,  1,  2,  6, 12, 13, 18,  9,  3],
        [15,  4, 10,  2,  6, 12, 13,  0,  9, 16],
        [15, 18, 10,  1,  6, 12, 13,  0,  9,  2],
        [15, 20, 10,  2,  6,  0, 18,  1,  9, 11],
        [15,  0, 10, 11,  6, 20, 18,  1, 20,  2],
        [15, 20, 10,  0,  2, 11, 20,  1, 20, 18],
        [20, 20, 10,  0,  2, 20, 18, 20, 11,  1],
        [20,  1, 11,  0, 20, 20, 20, 20, 18,  2],
        [20, 20, 20, 20,  1, 11, 20, 20, 18,  2],
        [20, 20, 20, 18, 20, 20,  1, 20, 11, 20],
        [20, 20, 20, 18, 11, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20, 11, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[ 2],
        [19],
        [ 7],
        [ 5],
        [ 0],
        [ 8],
        [17],
        [ 6],
        [18],
        [ 3],
        [14],
        [ 4],
        [ 7],
        [ 5],
        [12],
        [ 8],
        [17],
        [10],
        [ 1],
        [ 3],
        [ 1],
        [ 4],
        [ 7],
        [ 5],
        [ 2],
        [12],
        [17],
        [18],
        [14],
        [ 3],
        [ 9],
        [ 4],
        [ 2],
        [ 5],
        [18],
        [12],
        [17],
        [15],
        [14],
        [ 3],
        [15],
        [ 4],
        [ 1],
        [ 2],
        [ 6],
        [12],
        [13],
        [18],
        [ 9],
        [ 3],
        [15],
        [ 4],
        [10],
        [ 2],
        [ 6],
        [12],
        [13],
        [ 0],
        [ 9],
        [16],
        [15],
        [18],
        [10],
        [ 1],
        [ 6],
        [12],
        [13],
        [ 0],
        [ 9],
        [ 2],
        [15],
        [20],
        [10],
        [ 2],
        [ 6],
        [ 0],
        [18],
        [ 1],
        [ 9],
        [11],
        [15],
        [ 0],
        [10],
        [11],
        [ 6],
        [20],
        [18],
        [ 1],
        [20],
        [ 2],
        [15],
        [20],
        [10],
        [ 0],
        [ 2],
        [11],
        [20],
        [ 1],
        [20],
        [18],
        [20],
        [20],
        [10],
        [ 0],
        [ 2],
        [20],
        [18],
        [20],
        [11],
        [ 1],
        [20],
        [ 1],
        [11],
        [ 0],
        [20],
        [20],
        [20],
        [20],
        [18],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [11],
        [20],
        [20],
        [18],
        [ 2],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [ 1],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [18],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([14,  3,  2,  2,  5,  3,  3,  3,  2,  2,  3,  7,  7, 22,  5, 41]), torch.Size([16])
 ret : tensor([109,  96,  94,  93,  92,  88,  86,  84,  82,  81,  80,  78,  72,  66,
         45,  41]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.0805,  -26.3906,
         -24.8491,  -32.2362,  -40.6036,  -49.0949,  -57.7272,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[12, 8], [9, 0], [4], [19, 3, 5], [6, 17], [14, 18], [10, 16, 2], [15], [13], [1, 11, 7]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[11, 9, 4, 19, 1, 15, 10, 12, 2, 16], [6, 9, 4, 19, 11, 14, 16, 13, 18, 15], [12, 9, 11, 19, 7, 14, 1, 5, 13, 18], [12, 9, 11, 19, 6, 5, 18, 0, 7, 15], [13, 9, 16, 8, 6, 0, 11, 17, 3, 1], [11, 0, 15, 16, 6, 18, 5, 7, 13, 1], [5, 0, 8, 3, 17, 18, 16, 15, 13, 2], [5, 11, 2, 3, 17, 18, 16, 15, 13, 8], [5, 8, 2, 3, 17, 18, 16, 15, 7, 11], [5, 20, 8, 3, 20, 2, 16, 7, 20, 11], [20, 8, 2, 3, 20, 5, 20, 7, 20, 11], [20, 7, 2, 5, 20, 20, 8, 20, 20, 11], [7, 20, 20, 5, 20, 20, 2, 20, 8, 20], [20, 7, 20, 20, 20, 8, 2, 20, 20, 20], [20, 20, 20, 8, 20, 20, 20, 20, 20, 7], [8, 20, 20, 20, 20, 20, 20, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 2, 3, 4, 0, 6, 8, 9, 5, 7]), array([1, 3, 5, 7, 6, 2, 8, 0, 4, 9]), array([0, 1, 3, 6, 8, 2, 9, 4, 7, 5]), array([1, 4, 6, 9, 5, 8, 7, 3, 2, 0]), array([4, 9, 6, 3, 0, 8, 2, 5, 1, 7]), array([1, 5, 8, 3, 0, 7, 9, 2, 6, 4]), array([3, 4, 5, 6, 7, 8, 1, 9, 0, 2]), array([3, 4, 5, 6, 7, 9, 0, 1, 2, 8]), array([3, 6, 9, 2, 7, 0, 5, 1, 8, 4]), array([3, 9, 2, 5, 1, 7, 4, 6, 0, 8]), array([9, 2, 6, 3, 1, 4, 7, 8, 5, 0]), array([3, 8, 6, 0, 9, 4, 5, 7, 1, 2]), array([6, 1, 5, 3, 4, 0, 8, 7, 9, 2]), array([9, 3, 2, 7, 6, 8, 5, 1, 0, 4]), array([0, 9, 4, 1, 7, 6, 3, 5, 8, 2])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False,  True, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False,  True, False,  True, False,  True, False, False, False,
       False,  True]), array([False, False, False, False,  True, False, False, False, False,
        True,  True, False,  True, False,  True, False, False, False,
       False,  True]), array([False,  True, False, False,  True, False,  True, False, False,
        True,  True, False,  True, False,  True, False, False, False,
       False,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
        True,  True, False,  True, False,  True, False, False, False,
       False,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
        True,  True, False,  True,  True,  True, False, False, False,
       False,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
        True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False, False,  True, False,  True, False, False,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True, False,  True, False, False,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True, False,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [3, 5, 3, 2, 2, 5, 4, 5, 2, 4, 2, 3, 10, 7, 16, 21], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[11,  9,  4, 19,  1, 15, 10, 12,  2, 16],
        [ 6,  9,  4, 19, 11, 14, 16, 13, 18, 15],
        [12,  9, 11, 19,  7, 14,  1,  5, 13, 18],
        [12,  9, 11, 19,  6,  5, 18,  0,  7, 15],
        [13,  9, 16,  8,  6,  0, 11, 17,  3,  1],
        [11,  0, 15, 16,  6, 18,  5,  7, 13,  1],
        [ 5,  0,  8,  3, 17, 18, 16, 15, 13,  2],
        [ 5, 11,  2,  3, 17, 18, 16, 15, 13,  8],
        [ 5,  8,  2,  3, 17, 18, 16, 15,  7, 11],
        [ 5, 20,  8,  3, 20,  2, 16,  7, 20, 11],
        [20,  8,  2,  3, 20,  5, 20,  7, 20, 11],
        [20,  7,  2,  5, 20, 20,  8, 20, 20, 11],
        [ 7, 20, 20,  5, 20, 20,  2, 20,  8, 20],
        [20,  7, 20, 20, 20,  8,  2, 20, 20, 20],
        [20, 20, 20,  8, 20, 20, 20, 20, 20,  7],
        [ 8, 20, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[11],
        [ 9],
        [ 4],
        [19],
        [ 1],
        [15],
        [10],
        [12],
        [ 2],
        [16],
        [ 6],
        [ 9],
        [ 4],
        [19],
        [11],
        [14],
        [16],
        [13],
        [18],
        [15],
        [12],
        [ 9],
        [11],
        [19],
        [ 7],
        [14],
        [ 1],
        [ 5],
        [13],
        [18],
        [12],
        [ 9],
        [11],
        [19],
        [ 6],
        [ 5],
        [18],
        [ 0],
        [ 7],
        [15],
        [13],
        [ 9],
        [16],
        [ 8],
        [ 6],
        [ 0],
        [11],
        [17],
        [ 3],
        [ 1],
        [11],
        [ 0],
        [15],
        [16],
        [ 6],
        [18],
        [ 5],
        [ 7],
        [13],
        [ 1],
        [ 5],
        [ 0],
        [ 8],
        [ 3],
        [17],
        [18],
        [16],
        [15],
        [13],
        [ 2],
        [ 5],
        [11],
        [ 2],
        [ 3],
        [17],
        [18],
        [16],
        [15],
        [13],
        [ 8],
        [ 5],
        [ 8],
        [ 2],
        [ 3],
        [17],
        [18],
        [16],
        [15],
        [ 7],
        [11],
        [ 5],
        [20],
        [ 8],
        [ 3],
        [20],
        [ 2],
        [16],
        [ 7],
        [20],
        [11],
        [20],
        [ 8],
        [ 2],
        [ 3],
        [20],
        [ 5],
        [20],
        [ 7],
        [20],
        [11],
        [20],
        [ 7],
        [ 2],
        [ 5],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [11],
        [ 7],
        [20],
        [20],
        [ 5],
        [20],
        [20],
        [ 2],
        [20],
        [ 8],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [ 8],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 3,  5,  3,  2,  2,  5,  4,  5,  2,  4,  2,  3, 10,  7, 16, 21]), torch.Size([16])
 ret : tensor([79, 77, 73, 71, 70, 69, 65, 62, 58, 57, 54, 53, 51, 42, 36, 21]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -49.0949,  -57.7272,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[], [5, 12, 8], [11, 10, 18], [3, 15], [13, 17, 6], [9], [0, 16], [7], [19, 4, 1], [14, 2]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[6, 12, 11, 1, 13, 14, 0, 9, 16, 4], [1, 19, 11, 3, 17, 8, 0, 4, 14, 2], [19, 8, 10, 3, 17, 4, 0, 5, 16, 6], [19, 15, 12, 3, 17, 4, 0, 7, 6, 8], [15, 8, 18, 14, 2, 9, 0, 4, 6, 1], [16, 12, 18, 5, 15, 9, 2, 4, 8, 14], [8, 5, 4, 7, 12, 1, 16, 19, 15, 14], [6, 5, 4, 15, 19, 7, 12, 2, 1, 14], [19, 7, 1, 15, 8, 6, 4, 2, 12, 14], [6, 12, 20, 15, 8, 1, 4, 7, 19, 2], [20, 12, 4, 8, 6, 1, 20, 7, 19, 2], [8, 12, 20, 20, 6, 7, 1, 20, 4, 2], [8, 12, 20, 7, 6, 20, 1, 20, 4, 20], [20, 20, 20, 7, 6, 20, 1, 20, 4, 8], [7, 8, 20, 20, 1, 20, 20, 20, 4, 20], [20, 8, 20, 20, 20, 20, 1, 7, 20, 20], [20, 20, 20, 20, 20, 7, 20, 20, 1, 20], [20, 20, 20, 20, 20, 20, 20, 7, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 6, 4, 7, 9, 8, 1, 0, 5, 3]), array([3, 4, 6, 7, 8, 0, 1, 2, 5, 9]), array([3, 4, 6, 9, 8, 2, 7, 5, 0, 1]), array([6, 3, 8, 4, 0, 1, 7, 2, 9, 5]), array([2, 5, 3, 1, 4, 9, 8, 6, 7, 0]), array([9, 1, 5, 7, 2, 3, 0, 6, 8, 4]), array([1, 9, 4, 6, 0, 3, 7, 5, 8, 2]), array([9, 4, 6, 0, 7, 3, 2, 8, 1, 5]), array([3, 0, 4, 5, 1, 9, 6, 8, 7, 2]), array([1, 8, 9, 4, 2, 5, 3, 7, 6, 0]), array([1, 4, 9, 5, 6, 8, 0, 7, 3, 2]), array([1, 4, 8, 6, 0, 3, 5, 7, 2, 9]), array([4, 8, 9, 3, 6, 0, 7, 1, 5, 2]), array([8, 1, 4, 0, 6, 3, 5, 9, 7, 2]), array([1, 6, 7, 5, 3, 2, 9, 4, 0, 8]), array([8, 5, 7, 2, 9, 6, 4, 0, 1, 3]), array([7, 6, 4, 0, 3, 8, 5, 9, 1, 2])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False,  True, False,  True, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True,  True, False,  True, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True,  True, False,  True, False, False, False,  True,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
       False,  True,  True, False,  True, False, False, False,  True,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
        True,  True,  True, False,  True, False, False, False,  True,
        True, False]), array([ True, False, False,  True, False, False, False, False, False,
        True,  True,  True, False,  True, False, False,  True,  True,
        True, False]), array([ True, False, False,  True, False,  True, False, False, False,
        True,  True,  True, False,  True, False, False,  True,  True,
        True, False]), array([ True, False, False,  True, False,  True, False, False, False,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True, False]), array([ True, False, False,  True, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True, False, False,  True, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True, False,  True, False, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [4, 2, 6, 2, 2, 7, 3, 2, 3, 10, 3, 6, 3, 3, 3, 4, 5, 13], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 6, 12, 11,  1, 13, 14,  0,  9, 16,  4],
        [ 1, 19, 11,  3, 17,  8,  0,  4, 14,  2],
        [19,  8, 10,  3, 17,  4,  0,  5, 16,  6],
        [19, 15, 12,  3, 17,  4,  0,  7,  6,  8],
        [15,  8, 18, 14,  2,  9,  0,  4,  6,  1],
        [16, 12, 18,  5, 15,  9,  2,  4,  8, 14],
        [ 8,  5,  4,  7, 12,  1, 16, 19, 15, 14],
        [ 6,  5,  4, 15, 19,  7, 12,  2,  1, 14],
        [19,  7,  1, 15,  8,  6,  4,  2, 12, 14],
        [ 6, 12, 20, 15,  8,  1,  4,  7, 19,  2],
        [20, 12,  4,  8,  6,  1, 20,  7, 19,  2],
        [ 8, 12, 20, 20,  6,  7,  1, 20,  4,  2],
        [ 8, 12, 20,  7,  6, 20,  1, 20,  4, 20],
        [20, 20, 20,  7,  6, 20,  1, 20,  4,  8],
        [ 7,  8, 20, 20,  1, 20, 20, 20,  4, 20],
        [20,  8, 20, 20, 20, 20,  1,  7, 20, 20],
        [20, 20, 20, 20, 20,  7, 20, 20,  1, 20],
        [20, 20, 20, 20, 20, 20, 20,  7, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[ 6],
        [12],
        [11],
        [ 1],
        [13],
        [14],
        [ 0],
        [ 9],
        [16],
        [ 4],
        [ 1],
        [19],
        [11],
        [ 3],
        [17],
        [ 8],
        [ 0],
        [ 4],
        [14],
        [ 2],
        [19],
        [ 8],
        [10],
        [ 3],
        [17],
        [ 4],
        [ 0],
        [ 5],
        [16],
        [ 6],
        [19],
        [15],
        [12],
        [ 3],
        [17],
        [ 4],
        [ 0],
        [ 7],
        [ 6],
        [ 8],
        [15],
        [ 8],
        [18],
        [14],
        [ 2],
        [ 9],
        [ 0],
        [ 4],
        [ 6],
        [ 1],
        [16],
        [12],
        [18],
        [ 5],
        [15],
        [ 9],
        [ 2],
        [ 4],
        [ 8],
        [14],
        [ 8],
        [ 5],
        [ 4],
        [ 7],
        [12],
        [ 1],
        [16],
        [19],
        [15],
        [14],
        [ 6],
        [ 5],
        [ 4],
        [15],
        [19],
        [ 7],
        [12],
        [ 2],
        [ 1],
        [14],
        [19],
        [ 7],
        [ 1],
        [15],
        [ 8],
        [ 6],
        [ 4],
        [ 2],
        [12],
        [14],
        [ 6],
        [12],
        [20],
        [15],
        [ 8],
        [ 1],
        [ 4],
        [ 7],
        [19],
        [ 2],
        [20],
        [12],
        [ 4],
        [ 8],
        [ 6],
        [ 1],
        [20],
        [ 7],
        [19],
        [ 2],
        [ 8],
        [12],
        [20],
        [20],
        [ 6],
        [ 7],
        [ 1],
        [20],
        [ 4],
        [ 2],
        [ 8],
        [12],
        [20],
        [ 7],
        [ 6],
        [20],
        [ 1],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [ 6],
        [20],
        [ 1],
        [20],
        [ 4],
        [ 8],
        [ 7],
        [ 8],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [ 4],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 4,  2,  6,  2,  2,  7,  3,  2,  3, 10,  3,  6,  3,  3,  3,  4,  5, 13]), torch.Size([18])
 ret : tensor([64, 61, 60, 55, 54, 53, 47, 45, 44, 42, 33, 31, 26, 24, 22, 20, 17, 13]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[11, 2], [4], [6, 10, 3, 15], [16, 0], [8, 18, 13], [17], [5, 1], [19], [7], [14, 12, 9]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[11, 13, 17, 12, 18, 0, 15, 9, 7, 14], [8, 13, 6, 1, 17, 16, 0, 7, 15, 14], [13, 4, 10, 16, 0, 8, 7, 15, 2, 14], [1, 4, 10, 16, 0, 18, 19, 3, 13, 2], [0, 4, 3, 16, 8, 15, 19, 17, 12, 1], [18, 4, 3, 0, 8, 19, 9, 7, 5, 12], [9, 2, 3, 0, 8, 17, 7, 19, 18, 12], [13, 1, 15, 0, 18, 17, 2, 19, 7, 5], [1, 13, 15, 0, 18, 17, 5, 7, 2, 9], [20, 7, 15, 0, 18, 17, 13, 1, 2, 9], [20, 7, 15, 2, 18, 20, 20, 13, 1, 9], [2, 13, 15, 1, 20, 20, 20, 20, 7, 20], [20, 7, 1, 20, 13, 2, 20, 20, 20, 20], [2, 20, 20, 20, 20, 20, 1, 20, 7, 20], [2, 20, 20, 20, 20, 20, 20, 20, 7, 20], [20, 20, 20, 20, 20, 20, 20, 20, 7, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([9, 3, 5, 4, 0, 2, 7, 1, 6, 8]), array([9, 4, 6, 8, 5, 0, 7, 2, 3, 1]), array([1, 2, 3, 0, 4, 7, 9, 8, 6, 5]), array([1, 3, 6, 2, 0, 4, 8, 7, 5, 9]), array([1, 2, 4, 9, 5, 0, 3, 7, 8, 6]), array([2, 4, 9, 1, 7, 6, 8, 5, 3, 0]), array([3, 5, 7, 0, 1, 6, 2, 8, 9, 4]), array([2, 3, 4, 5, 0, 6, 7, 9, 1, 8]), array([2, 3, 4, 5, 9, 8, 7, 1, 6, 0]), array([2, 4, 9, 1, 7, 8, 3, 0, 6, 5]), array([2, 3, 0, 1, 8, 9, 7, 4, 5, 6]), array([1, 2, 5, 4, 6, 0, 7, 3, 9, 8]), array([0, 8, 6, 1, 5, 2, 4, 7, 3, 9]), array([0, 8, 6, 4, 5, 2, 7, 3, 1, 9]), array([8, 7, 2, 1, 6, 0, 5, 9, 4, 3])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False,  True, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False, False,  True, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False, False,  True, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False,  True,  True, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False,  True,  True, False, False,  True, False,  True, False,
       False, False]), array([False, False, False, False,  True, False,  True, False, False,
       False,  True,  True, False, False,  True, False,  True, False,
       False, False]), array([False, False, False,  True,  True, False,  True, False,  True,
       False,  True,  True,  True, False,  True, False,  True, False,
       False, False]), array([False, False, False,  True,  True, False,  True, False,  True,
       False,  True,  True,  True, False,  True, False,  True, False,
       False,  True]), array([False, False, False,  True,  True,  True,  True, False,  True,
       False,  True,  True,  True, False,  True, False,  True, False,
       False,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
       False,  True,  True,  True, False,  True, False,  True,  True,
       False,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
        True,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [3, 3, 4, 3, 5, 2, 9, 4, 4, 2, 4, 3, 11, 21, 8, 3], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[11, 13, 17, 12, 18,  0, 15,  9,  7, 14],
        [ 8, 13,  6,  1, 17, 16,  0,  7, 15, 14],
        [13,  4, 10, 16,  0,  8,  7, 15,  2, 14],
        [ 1,  4, 10, 16,  0, 18, 19,  3, 13,  2],
        [ 0,  4,  3, 16,  8, 15, 19, 17, 12,  1],
        [18,  4,  3,  0,  8, 19,  9,  7,  5, 12],
        [ 9,  2,  3,  0,  8, 17,  7, 19, 18, 12],
        [13,  1, 15,  0, 18, 17,  2, 19,  7,  5],
        [ 1, 13, 15,  0, 18, 17,  5,  7,  2,  9],
        [20,  7, 15,  0, 18, 17, 13,  1,  2,  9],
        [20,  7, 15,  2, 18, 20, 20, 13,  1,  9],
        [ 2, 13, 15,  1, 20, 20, 20, 20,  7, 20],
        [20,  7,  1, 20, 13,  2, 20, 20, 20, 20],
        [ 2, 20, 20, 20, 20, 20,  1, 20,  7, 20],
        [ 2, 20, 20, 20, 20, 20, 20, 20,  7, 20],
        [20, 20, 20, 20, 20, 20, 20, 20,  7, 20]]), torch.Size([16, 10])
 all_action : tensor([[11],
        [13],
        [17],
        [12],
        [18],
        [ 0],
        [15],
        [ 9],
        [ 7],
        [14],
        [ 8],
        [13],
        [ 6],
        [ 1],
        [17],
        [16],
        [ 0],
        [ 7],
        [15],
        [14],
        [13],
        [ 4],
        [10],
        [16],
        [ 0],
        [ 8],
        [ 7],
        [15],
        [ 2],
        [14],
        [ 1],
        [ 4],
        [10],
        [16],
        [ 0],
        [18],
        [19],
        [ 3],
        [13],
        [ 2],
        [ 0],
        [ 4],
        [ 3],
        [16],
        [ 8],
        [15],
        [19],
        [17],
        [12],
        [ 1],
        [18],
        [ 4],
        [ 3],
        [ 0],
        [ 8],
        [19],
        [ 9],
        [ 7],
        [ 5],
        [12],
        [ 9],
        [ 2],
        [ 3],
        [ 0],
        [ 8],
        [17],
        [ 7],
        [19],
        [18],
        [12],
        [13],
        [ 1],
        [15],
        [ 0],
        [18],
        [17],
        [ 2],
        [19],
        [ 7],
        [ 5],
        [ 1],
        [13],
        [15],
        [ 0],
        [18],
        [17],
        [ 5],
        [ 7],
        [ 2],
        [ 9],
        [20],
        [ 7],
        [15],
        [ 0],
        [18],
        [17],
        [13],
        [ 1],
        [ 2],
        [ 9],
        [20],
        [ 7],
        [15],
        [ 2],
        [18],
        [20],
        [20],
        [13],
        [ 1],
        [ 9],
        [ 2],
        [13],
        [15],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [ 7],
        [ 1],
        [20],
        [13],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [ 7],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 3,  3,  4,  3,  5,  2,  9,  4,  4,  2,  4,  3, 11, 21,  8,  3]), torch.Size([16])
 ret : tensor([74, 72, 70, 67, 65, 61, 60, 52, 49, 46, 45, 42, 40, 30, 10,  3]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -24.8491,  -23.9790,  -32.2362,  -49.0949,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[11], [15], [18], [10, 4, 2], [0, 13], [5, 6], [19, 14, 17, 16], [8], [12, 3, 7], [9, 1]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[12, 14, 7, 10, 0, 2, 6, 8, 4, 3], [17, 3, 1, 4, 0, 6, 19, 2, 12, 9], [7, 17, 18, 4, 0, 11, 2, 1, 12, 9], [11, 7, 18, 5, 8, 3, 6, 16, 12, 9], [16, 15, 18, 2, 11, 5, 14, 13, 3, 6], [8, 15, 6, 2, 1, 5, 14, 7, 3, 13], [11, 15, 13, 6, 16, 5, 14, 8, 3, 1], [6, 15, 7, 8, 16, 5, 17, 13, 3, 1], [7, 15, 13, 16, 6, 8, 17, 11, 3, 1], [6, 7, 8, 20, 16, 11, 17, 13, 3, 1], [6, 20, 8, 7, 11, 20, 17, 16, 3, 13], [20, 8, 11, 6, 13, 20, 17, 20, 7, 16], [20, 8, 16, 20, 13, 6, 17, 20, 20, 11], [8, 20, 16, 11, 13, 6, 20, 20, 20, 20], [20, 16, 20, 20, 11, 6, 20, 20, 20, 8], [11, 20, 20, 20, 20, 20, 16, 8, 20, 20], [20, 20, 20, 20, 20, 20, 16, 8, 20, 20], [20, 20, 20, 20, 20, 20, 16, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([4, 1, 6, 9, 7, 8, 3, 5, 2, 0]), array([3, 4, 8, 9, 6, 0, 7, 1, 5, 2]), array([2, 8, 9, 3, 1, 7, 4, 5, 0, 6]), array([2, 9, 5, 1, 7, 3, 4, 6, 8, 0]), array([1, 3, 5, 6, 8, 0, 4, 2, 7, 9]), array([1, 5, 6, 8, 3, 7, 2, 9, 4, 0]), array([1, 5, 8, 9, 0, 4, 3, 2, 7, 6]), array([1, 8, 9, 0, 6, 4, 3, 2, 7, 5]), array([6, 8, 9, 5, 4, 0, 2, 7, 1, 3]), array([6, 8, 7, 3, 0, 2, 4, 9, 5, 1]), array([6, 8, 9, 2, 4, 3, 1, 5, 0, 7]), array([4, 6, 5, 9, 1, 2, 0, 3, 7, 8]), array([4, 5, 0, 2, 3, 1, 7, 6, 8, 9]), array([5, 9, 4, 1, 2, 8, 3, 7, 6, 0]), array([6, 0, 7, 1, 8, 9, 2, 5, 4, 3]), array([6, 7, 1, 9, 0, 5, 2, 4, 3, 8]), array([6, 5, 9, 1, 3, 7, 2, 8, 0, 4])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False,  True]), array([ True, False, False, False,  True, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False,  True]), array([ True, False, False, False,  True, False, False, False, False,
        True,  True, False,  True, False, False, False, False, False,
       False,  True]), array([ True, False, False, False,  True, False, False, False, False,
        True,  True, False,  True, False, False, False, False, False,
        True,  True]), array([ True, False,  True, False,  True, False, False, False, False,
        True,  True, False,  True, False, False, False, False, False,
        True,  True]), array([ True, False,  True, False,  True, False, False, False, False,
        True,  True, False,  True, False,  True, False, False, False,
        True,  True]), array([ True, False,  True, False,  True,  True, False, False, False,
        True,  True, False,  True, False,  True, False, False, False,
        True,  True]), array([ True, False,  True, False,  True,  True, False, False, False,
        True,  True, False,  True, False,  True,  True, False, False,
        True,  True]), array([ True,  True,  True, False,  True,  True, False, False, False,
        True,  True, False,  True, False,  True,  True, False, False,
        True,  True]), array([ True,  True,  True,  True,  True,  True, False, False, False,
        True,  True, False,  True, False,  True,  True, False, False,
        True,  True]), array([ True,  True,  True,  True,  True,  True, False,  True, False,
        True,  True, False,  True, False,  True,  True, False, False,
        True,  True]), array([ True,  True,  True,  True,  True,  True, False,  True, False,
        True,  True, False,  True, False,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True, False,  True, False,
        True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 18
 next_t : [2, 3, 8, 2, 7, 2, 3, 2, 2, 2, 2, 4, 5, 5, 3, 17, 8, 2], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[12, 14,  7, 10,  0,  2,  6,  8,  4,  3],
        [17,  3,  1,  4,  0,  6, 19,  2, 12,  9],
        [ 7, 17, 18,  4,  0, 11,  2,  1, 12,  9],
        [11,  7, 18,  5,  8,  3,  6, 16, 12,  9],
        [16, 15, 18,  2, 11,  5, 14, 13,  3,  6],
        [ 8, 15,  6,  2,  1,  5, 14,  7,  3, 13],
        [11, 15, 13,  6, 16,  5, 14,  8,  3,  1],
        [ 6, 15,  7,  8, 16,  5, 17, 13,  3,  1],
        [ 7, 15, 13, 16,  6,  8, 17, 11,  3,  1],
        [ 6,  7,  8, 20, 16, 11, 17, 13,  3,  1],
        [ 6, 20,  8,  7, 11, 20, 17, 16,  3, 13],
        [20,  8, 11,  6, 13, 20, 17, 20,  7, 16],
        [20,  8, 16, 20, 13,  6, 17, 20, 20, 11],
        [ 8, 20, 16, 11, 13,  6, 20, 20, 20, 20],
        [20, 16, 20, 20, 11,  6, 20, 20, 20,  8],
        [11, 20, 20, 20, 20, 20, 16,  8, 20, 20],
        [20, 20, 20, 20, 20, 20, 16,  8, 20, 20],
        [20, 20, 20, 20, 20, 20, 16, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[12],
        [14],
        [ 7],
        [10],
        [ 0],
        [ 2],
        [ 6],
        [ 8],
        [ 4],
        [ 3],
        [17],
        [ 3],
        [ 1],
        [ 4],
        [ 0],
        [ 6],
        [19],
        [ 2],
        [12],
        [ 9],
        [ 7],
        [17],
        [18],
        [ 4],
        [ 0],
        [11],
        [ 2],
        [ 1],
        [12],
        [ 9],
        [11],
        [ 7],
        [18],
        [ 5],
        [ 8],
        [ 3],
        [ 6],
        [16],
        [12],
        [ 9],
        [16],
        [15],
        [18],
        [ 2],
        [11],
        [ 5],
        [14],
        [13],
        [ 3],
        [ 6],
        [ 8],
        [15],
        [ 6],
        [ 2],
        [ 1],
        [ 5],
        [14],
        [ 7],
        [ 3],
        [13],
        [11],
        [15],
        [13],
        [ 6],
        [16],
        [ 5],
        [14],
        [ 8],
        [ 3],
        [ 1],
        [ 6],
        [15],
        [ 7],
        [ 8],
        [16],
        [ 5],
        [17],
        [13],
        [ 3],
        [ 1],
        [ 7],
        [15],
        [13],
        [16],
        [ 6],
        [ 8],
        [17],
        [11],
        [ 3],
        [ 1],
        [ 6],
        [ 7],
        [ 8],
        [20],
        [16],
        [11],
        [17],
        [13],
        [ 3],
        [ 1],
        [ 6],
        [20],
        [ 8],
        [ 7],
        [11],
        [20],
        [17],
        [16],
        [ 3],
        [13],
        [20],
        [ 8],
        [11],
        [ 6],
        [13],
        [20],
        [17],
        [20],
        [ 7],
        [16],
        [20],
        [ 8],
        [16],
        [20],
        [13],
        [ 6],
        [17],
        [20],
        [20],
        [11],
        [ 8],
        [20],
        [16],
        [11],
        [13],
        [ 6],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [11],
        [ 6],
        [20],
        [20],
        [20],
        [ 8],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 2,  3,  8,  2,  7,  2,  3,  2,  2,  2,  2,  4,  5,  5,  3, 17,  8,  2]), torch.Size([18])
 ret : tensor([62, 61, 59, 52, 51, 45, 44, 42, 41, 40, 39, 38, 35, 31, 27, 25,  9,  2]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.3321,  -27.0805,  -26.3906,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:10<00:00, 10.20s/it]
[[0], [1, 10, 6, 18], [2, 13], [4], [8], [5, 12], [15, 19, 3], [7, 14, 17, 11], [], [9, 16]]
  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[12], [16, 0], [8, 11, 10], [2, 19], [14, 7], [3, 9], [4, 18], [17, 13, 15], [6, 5, 1], []]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[0, 16, 10, 2, 14, 3, 4, 17, 1, 19], [18, 16, 19, 2, 14, 3, 1, 17, 11, 15], [12, 16, 7, 2, 14, 3, 11, 13, 8, 15], [12, 16, 10, 6, 14, 3, 1, 13, 11, 18], [12, 16, 10, 1, 8, 3, 5, 13, 6, 19], [12, 0, 10, 9, 18, 3, 15, 13, 6, 1], [12, 0, 11, 19, 7, 9, 5, 13, 6, 1], [12, 15, 8, 19, 7, 9, 18, 13, 5, 10], [12, 10, 8, 19, 7, 9, 1, 11, 5, 18], [10, 15, 8, 19, 7, 9, 1, 18, 5, 11], [18, 10, 8, 19, 7, 15, 20, 11, 5, 1], [20, 20, 8, 11, 7, 10, 18, 1, 5, 15], [20, 1, 11, 15, 20, 20, 18, 20, 20, 10], [10, 15, 11, 1, 20, 20, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 10, 20, 1, 15], [20, 20, 10, 20, 15, 20, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 15, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 3, 4, 5, 7, 2, 0, 8, 9, 6]), array([1, 3, 4, 5, 9, 8, 2, 7, 6, 0]), array([0, 1, 4, 5, 7, 6, 9, 2, 3, 8]), array([0, 1, 5, 7, 9, 3, 2, 4, 8, 6]), array([0, 5, 7, 8, 9, 3, 6, 4, 1, 2]), array([0, 1, 7, 8, 3, 9, 6, 4, 2, 5]), array([0, 3, 4, 5, 7, 9, 8, 6, 2, 1]), array([0, 2, 3, 4, 5, 8, 9, 7, 6, 1]), array([2, 3, 4, 5, 8, 7, 0, 1, 9, 6]), array([2, 3, 4, 8, 1, 0, 5, 7, 9, 6]), array([2, 4, 8, 3, 9, 5, 7, 6, 1, 0]), array([6, 3, 1, 9, 2, 8, 5, 0, 4, 7]), array([2, 0, 1, 3, 9, 8, 4, 6, 5, 7]), array([8, 6, 9, 5, 7, 4, 1, 2, 0, 3]), array([2, 4, 0, 9, 6, 1, 7, 5, 8, 3]), array([7, 3, 1, 5, 0, 8, 9, 6, 4, 2])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False,  True, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False,  True, False,  True, False, False, False, False,
       False, False, False, False, False,  True, False, False,  True,
       False, False]), array([False, False,  True, False,  True, False, False, False, False,
       False, False, False, False, False,  True, False,  True,  True,
       False, False]), array([False, False,  True,  True,  True, False, False, False, False,
       False, False, False, False, False,  True, False,  True,  True,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False, False,
       False, False, False, False, False,  True, False,  True,  True,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False, False,
       False, False, False, False,  True,  True, False,  True,  True,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False, False,
       False, False, False,  True,  True,  True, False,  True,  True,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False, False,
        True, False, False,  True,  True,  True, False,  True,  True,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False, False,
        True, False, False,  True,  True,  True, False,  True,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True, False,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True])], 17
 next_t : [8, 4, 2, 2, 2, 4, 2, 2, 3, 2, 5, 2, 7, 7, 19, 20, 9], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 0, 16, 10,  2, 14,  3,  4, 17,  1, 19],
        [18, 16, 19,  2, 14,  3,  1, 17, 11, 15],
        [12, 16,  7,  2, 14,  3, 11, 13,  8, 15],
        [12, 16, 10,  6, 14,  3,  1, 13, 11, 18],
        [12, 16, 10,  1,  8,  3,  5, 13,  6, 19],
        [12,  0, 10,  9, 18,  3, 15, 13,  6,  1],
        [12,  0, 11, 19,  7,  9,  5, 13,  6,  1],
        [12, 15,  8, 19,  7,  9, 18, 13,  5, 10],
        [12, 10,  8, 19,  7,  9,  1, 11,  5, 18],
        [10, 15,  8, 19,  7,  9,  1, 18,  5, 11],
        [18, 10,  8, 19,  7, 15, 20, 11,  5,  1],
        [20, 20,  8, 11,  7, 10, 18,  1,  5, 15],
        [20,  1, 11, 15, 20, 20, 18, 20, 20, 10],
        [10, 15, 11,  1, 20, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 10, 20,  1, 15],
        [20, 20, 10, 20, 15, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20, 15, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 0],
        [16],
        [10],
        [ 2],
        [14],
        [ 3],
        [ 4],
        [17],
        [ 1],
        [19],
        [18],
        [16],
        [19],
        [ 2],
        [14],
        [ 3],
        [ 1],
        [17],
        [11],
        [15],
        [12],
        [16],
        [ 7],
        [ 2],
        [14],
        [ 3],
        [11],
        [13],
        [ 8],
        [15],
        [12],
        [16],
        [10],
        [ 6],
        [14],
        [ 3],
        [ 1],
        [13],
        [11],
        [18],
        [12],
        [16],
        [10],
        [ 1],
        [ 8],
        [ 3],
        [ 5],
        [13],
        [ 6],
        [19],
        [12],
        [ 0],
        [10],
        [ 9],
        [18],
        [ 3],
        [15],
        [13],
        [ 6],
        [ 1],
        [12],
        [ 0],
        [11],
        [19],
        [ 7],
        [ 9],
        [ 5],
        [13],
        [ 6],
        [ 1],
        [12],
        [15],
        [ 8],
        [19],
        [ 7],
        [ 9],
        [18],
        [13],
        [ 5],
        [10],
        [12],
        [10],
        [ 8],
        [19],
        [ 7],
        [ 9],
        [ 1],
        [11],
        [ 5],
        [18],
        [10],
        [15],
        [ 8],
        [19],
        [ 7],
        [ 9],
        [ 1],
        [18],
        [ 5],
        [11],
        [18],
        [10],
        [ 8],
        [19],
        [ 7],
        [15],
        [20],
        [11],
        [ 5],
        [ 1],
        [20],
        [20],
        [ 8],
        [11],
        [ 7],
        [10],
        [18],
        [ 1],
        [ 5],
        [15],
        [20],
        [ 1],
        [11],
        [15],
        [20],
        [20],
        [18],
        [20],
        [20],
        [10],
        [10],
        [15],
        [11],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [10],
        [20],
        [ 1],
        [15],
        [20],
        [20],
        [10],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [15],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 8,  4,  2,  2,  2,  4,  2,  2,  3,  2,  5,  2,  7,  7, 19, 20,  9]), torch.Size([17])
 ret : tensor([84, 77, 74, 73, 72, 71, 68, 67, 66, 64, 63, 59, 58, 52, 46, 28,  9]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[9], [10, 4], [17, 18], [2, 1], [6, 8], [14, 3, 16], [11, 7], [15, 19, 5], [0, 12], [13]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[7, 5, 17, 6, 18, 14, 12, 8, 2, 9], [2, 6, 15, 7, 0, 14, 11, 8, 4, 10], [4, 10, 18, 2, 6, 9, 11, 15, 0, 8], [9, 10, 8, 2, 6, 5, 11, 19, 0, 4], [9, 10, 16, 8, 6, 13, 11, 19, 3, 7], [9, 10, 3, 12, 8, 1, 11, 19, 5, 4], [9, 4, 3, 1, 8, 13, 7, 19, 12, 16], [9, 4, 3, 1, 13, 7, 5, 8, 12, 16], [13, 4, 20, 1, 3, 5, 7, 8, 12, 16], [20, 4, 20, 1, 3, 13, 7, 16, 8, 5], [20, 8, 3, 1, 20, 5, 7, 16, 20, 13], [20, 20, 8, 20, 3, 5, 7, 16, 20, 13], [20, 3, 8, 20, 16, 20, 5, 20, 20, 13], [20, 3, 20, 20, 20, 20, 16, 5, 8, 20], [20, 20, 20, 16, 8, 3, 20, 20, 20, 20], [20, 20, 20, 20, 8, 16, 20, 20, 20, 20], [20, 20, 20, 20, 20, 16, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([5, 8, 6, 1, 2, 4, 9, 3, 7, 0]), array([5, 4, 3, 2, 8, 1, 6, 7, 9, 0]), array([1, 3, 4, 6, 8, 2, 9, 7, 0, 5]), array([0, 1, 4, 6, 7, 9, 8, 3, 5, 2]), array([0, 1, 6, 7, 5, 3, 2, 8, 4, 9]), array([0, 7, 9, 4, 3, 1, 6, 8, 2, 5]), array([0, 1, 3, 8, 6, 5, 9, 4, 7, 2]), array([1, 3, 8, 0, 7, 9, 4, 6, 5, 2]), array([1, 3, 6, 5, 9, 8, 7, 4, 2, 0]), array([3, 6, 2, 7, 1, 5, 9, 8, 0, 4]), array([6, 9, 4, 7, 2, 5, 1, 8, 0, 3]), array([9, 1, 6, 2, 4, 7, 0, 8, 3, 5]), array([1, 6, 8, 7, 9, 5, 0, 2, 4, 3]), array([5, 3, 4, 1, 9, 0, 2, 6, 8, 7]), array([4, 5, 2, 8, 0, 6, 7, 9, 3, 1]), array([5, 3, 4, 8, 0, 9, 1, 7, 2, 6])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False,  True,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True,  True, False,  True,
        True, False]), array([ True, False,  True, False, False, False, False, False, False,
       False, False, False, False, False,  True,  True, False,  True,
        True, False]), array([ True, False,  True, False, False, False,  True, False, False,
       False, False, False, False, False,  True,  True, False,  True,
        True, False]), array([ True, False,  True, False, False, False,  True, False, False,
       False,  True,  True, False, False,  True,  True, False,  True,
        True, False]), array([ True, False,  True, False, False, False,  True, False, False,
       False,  True,  True, False, False,  True,  True, False,  True,
        True,  True]), array([ True, False,  True, False, False, False,  True, False, False,
        True,  True,  True, False, False,  True,  True, False,  True,
        True,  True]), array([ True, False,  True, False, False, False,  True, False, False,
        True,  True,  True,  True, False,  True,  True, False,  True,
        True,  True]), array([ True, False,  True, False,  True, False,  True, False, False,
        True,  True,  True,  True, False,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True, False,  True, False,  True, False, False,
        True,  True,  True,  True, False,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True, False,  True, False,  True,  True, False,
        True,  True,  True,  True, False,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True, False,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True, False,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 17
 next_t : [4, 4, 13, 3, 3, 2, 6, 2, 3, 2, 4, 6, 3, 17, 12, 5, 10], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 7,  5, 17,  6, 18, 14, 12,  8,  2,  9],
        [ 2,  6, 15,  7,  0, 14, 11,  8,  4, 10],
        [ 4, 10, 18,  2,  6,  9, 11, 15,  0,  8],
        [ 9, 10,  8,  2,  6,  5, 11, 19,  0,  4],
        [ 9, 10, 16,  8,  6, 13, 11, 19,  3,  7],
        [ 9, 10,  3, 12,  8,  1, 11, 19,  5,  4],
        [ 9,  4,  3,  1,  8, 13,  7, 19, 12, 16],
        [ 9,  4,  3,  1, 13,  7,  5,  8, 12, 16],
        [13,  4, 20,  1,  3,  5,  7,  8, 12, 16],
        [20,  4, 20,  1,  3, 13,  7, 16,  8,  5],
        [20,  8,  3,  1, 20,  5,  7, 16, 20, 13],
        [20, 20,  8, 20,  3,  5,  7, 16, 20, 13],
        [20,  3,  8, 20, 16, 20,  5, 20, 20, 13],
        [20,  3, 20, 20, 20, 20, 16,  5,  8, 20],
        [20, 20, 20, 16,  8,  3, 20, 20, 20, 20],
        [20, 20, 20, 20,  8, 16, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 16, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 7],
        [ 5],
        [17],
        [ 6],
        [18],
        [14],
        [12],
        [ 8],
        [ 2],
        [ 9],
        [ 2],
        [ 6],
        [15],
        [ 7],
        [ 0],
        [14],
        [11],
        [ 8],
        [ 4],
        [10],
        [ 4],
        [10],
        [18],
        [ 2],
        [ 6],
        [ 9],
        [11],
        [15],
        [ 0],
        [ 8],
        [ 9],
        [10],
        [ 8],
        [ 2],
        [ 6],
        [ 5],
        [11],
        [19],
        [ 0],
        [ 4],
        [ 9],
        [10],
        [16],
        [ 8],
        [ 6],
        [13],
        [11],
        [19],
        [ 3],
        [ 7],
        [ 9],
        [10],
        [ 3],
        [12],
        [ 8],
        [ 1],
        [11],
        [19],
        [ 5],
        [ 4],
        [ 9],
        [ 4],
        [ 3],
        [ 1],
        [ 8],
        [13],
        [ 7],
        [19],
        [12],
        [16],
        [ 9],
        [ 4],
        [ 3],
        [ 1],
        [13],
        [ 7],
        [ 5],
        [ 8],
        [12],
        [16],
        [13],
        [ 4],
        [20],
        [ 1],
        [ 3],
        [ 5],
        [ 7],
        [ 8],
        [12],
        [16],
        [20],
        [ 4],
        [20],
        [ 1],
        [ 3],
        [13],
        [ 7],
        [16],
        [ 8],
        [ 5],
        [20],
        [ 8],
        [ 3],
        [ 1],
        [20],
        [ 5],
        [ 7],
        [16],
        [20],
        [13],
        [20],
        [20],
        [ 8],
        [20],
        [ 3],
        [ 5],
        [ 7],
        [16],
        [20],
        [13],
        [20],
        [ 3],
        [ 8],
        [20],
        [16],
        [20],
        [ 5],
        [20],
        [20],
        [13],
        [20],
        [ 3],
        [20],
        [20],
        [20],
        [20],
        [16],
        [ 5],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [16],
        [ 8],
        [ 3],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 4,  4, 13,  3,  3,  2,  6,  2,  3,  2,  4,  6,  3, 17, 12,  5, 10]), torch.Size([17])
 ret : tensor([83, 80, 77, 65, 63, 61, 60, 55, 54, 52, 51, 48, 43, 41, 25, 14, 10]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.3321,  -27.0805,  -26.3906,
         -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[], [18, 15, 12, 19], [], [0, 7], [13, 9], [10, 6], [16, 8], [11, 2, 3], [1], [5, 14, 4, 17]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[3, 18, 12, 8, 13, 7, 11, 2, 9, 14], [6, 15, 17, 11, 13, 1, 10, 5, 3, 14], [7, 15, 6, 4, 9, 12, 2, 11, 1, 5], [2, 0, 12, 8, 9, 6, 10, 11, 1, 5], [4, 7, 0, 12, 9, 10, 8, 11, 1, 6], [12, 4, 8, 17, 9, 10, 19, 14, 1, 7], [6, 17, 3, 4, 9, 10, 19, 0, 2, 14], [3, 19, 17, 8, 6, 10, 16, 2, 0, 14], [19, 8, 12, 17, 7, 6, 16, 3, 0, 4], [0, 20, 12, 7, 19, 6, 17, 3, 8, 4], [19, 8, 20, 12, 20, 6, 7, 3, 0, 17], [12, 7, 20, 20, 0, 19, 8, 3, 20, 17], [20, 20, 19, 0, 7, 20, 20, 12, 8, 17], [20, 20, 20, 0, 20, 20, 7, 19, 12, 8], [20, 12, 20, 8, 20, 20, 19, 20, 20, 7], [20, 19, 20, 7, 20, 20, 8, 20, 20, 20], [20, 19, 20, 20, 20, 20, 8, 20, 20, 20], [20, 19, 20, 20, 20, 20, 20, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([4, 3, 8, 1, 2, 6, 9, 7, 5, 0]), array([1, 7, 2, 3, 0, 6, 8, 4, 9, 5]), array([4, 7, 8, 9, 6, 5, 0, 1, 3, 2]), array([4, 7, 8, 0, 3, 1, 5, 6, 2, 9]), array([4, 5, 8, 6, 1, 9, 0, 2, 7, 3]), array([4, 5, 2, 3, 6, 8, 0, 9, 1, 7]), array([5, 9, 4, 7, 1, 6, 2, 8, 0, 3]), array([6, 2, 3, 1, 4, 7, 9, 8, 0, 5]), array([5, 9, 8, 4, 7, 2, 0, 3, 6, 1]), array([5, 7, 0, 8, 3, 6, 9, 1, 4, 2]), array([7, 9, 5, 0, 1, 4, 6, 2, 3, 8]), array([9, 7, 2, 4, 8, 3, 0, 5, 1, 6]), array([3, 9, 8, 6, 7, 1, 4, 0, 2, 5]), array([6, 9, 3, 1, 2, 4, 5, 7, 0, 8]), array([1, 6, 3, 5, 9, 2, 4, 8, 0, 7]), array([6, 1, 9, 5, 8, 3, 2, 0, 7, 4]), array([1, 2, 7, 9, 3, 6, 0, 8, 4, 5])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
        True, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False, False, False,
        True, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False,  True, False, False,
        True, False]), array([False, False, False, False, False,  True, False, False, False,
       False, False, False, False,  True, False,  True, False, False,
        True, False]), array([False, False, False, False, False,  True, False, False, False,
       False, False,  True, False,  True, False,  True, False, False,
        True, False]), array([False,  True, False, False, False,  True, False, False, False,
       False, False,  True, False,  True, False,  True, False, False,
        True, False]), array([False,  True, False, False, False,  True, False, False, False,
        True, False,  True, False,  True, False,  True, False, False,
        True, False]), array([False,  True,  True, False, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True, False, False,
        True, False]), array([False,  True,  True, False, False,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([False,  True,  True, False,  True,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([False,  True,  True, False,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([False,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([False,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False])], 18
 next_t : [3, 2, 10, 2, 4, 3, 3, 5, 8, 6, 4, 2, 7, 7, 16, 17, 2, 10], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 3, 18, 12,  8, 13,  7, 11,  2,  9, 14],
        [ 6, 15, 17, 11, 13,  1, 10,  5,  3, 14],
        [ 7, 15,  6,  4,  9, 12,  2, 11,  1,  5],
        [ 2,  0, 12,  8,  9,  6, 10, 11,  1,  5],
        [ 4,  7,  0, 12,  9, 10,  8, 11,  1,  6],
        [12,  4,  8, 17,  9, 10, 19, 14,  1,  7],
        [ 6, 17,  3,  4,  9, 10, 19,  0,  2, 14],
        [ 3, 19, 17,  8,  6, 10, 16,  2,  0, 14],
        [19,  8, 12, 17,  7,  6, 16,  3,  0,  4],
        [ 0, 20, 12,  7, 19,  6, 17,  3,  8,  4],
        [19,  8, 20, 12, 20,  6,  7,  3,  0, 17],
        [12,  7, 20, 20,  0, 19,  8,  3, 20, 17],
        [20, 20, 19,  0,  7, 20, 20, 12,  8, 17],
        [20, 20, 20,  0, 20, 20,  7, 19, 12,  8],
        [20, 12, 20,  8, 20, 20, 19, 20, 20,  7],
        [20, 19, 20,  7, 20, 20,  8, 20, 20, 20],
        [20, 19, 20, 20, 20, 20,  8, 20, 20, 20],
        [20, 19, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[ 3],
        [18],
        [12],
        [ 8],
        [13],
        [ 7],
        [11],
        [ 2],
        [ 9],
        [14],
        [ 6],
        [15],
        [17],
        [11],
        [13],
        [ 1],
        [10],
        [ 5],
        [ 3],
        [14],
        [ 7],
        [15],
        [ 6],
        [ 4],
        [ 9],
        [12],
        [ 2],
        [11],
        [ 1],
        [ 5],
        [ 2],
        [ 0],
        [12],
        [ 8],
        [ 9],
        [ 6],
        [10],
        [11],
        [ 1],
        [ 5],
        [ 4],
        [ 7],
        [ 0],
        [12],
        [ 9],
        [10],
        [ 8],
        [11],
        [ 1],
        [ 6],
        [12],
        [ 4],
        [ 8],
        [17],
        [ 9],
        [10],
        [19],
        [14],
        [ 1],
        [ 7],
        [ 6],
        [17],
        [ 3],
        [ 4],
        [ 9],
        [10],
        [19],
        [ 0],
        [ 2],
        [14],
        [ 3],
        [19],
        [17],
        [ 8],
        [ 6],
        [10],
        [16],
        [ 2],
        [ 0],
        [14],
        [19],
        [ 8],
        [12],
        [17],
        [ 7],
        [ 6],
        [16],
        [ 3],
        [ 0],
        [ 4],
        [ 0],
        [20],
        [12],
        [ 7],
        [19],
        [ 6],
        [17],
        [ 3],
        [ 8],
        [ 4],
        [19],
        [ 8],
        [20],
        [12],
        [20],
        [ 6],
        [ 7],
        [ 3],
        [ 0],
        [17],
        [12],
        [ 7],
        [20],
        [20],
        [ 0],
        [19],
        [ 8],
        [ 3],
        [20],
        [17],
        [20],
        [20],
        [19],
        [ 0],
        [ 7],
        [20],
        [20],
        [12],
        [ 8],
        [17],
        [20],
        [20],
        [20],
        [ 0],
        [20],
        [20],
        [ 7],
        [19],
        [12],
        [ 8],
        [20],
        [12],
        [20],
        [ 8],
        [20],
        [20],
        [19],
        [20],
        [20],
        [ 7],
        [20],
        [19],
        [20],
        [ 7],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 3,  2, 10,  2,  4,  3,  3,  5,  8,  6,  4,  2,  7,  7, 16, 17,  2, 10]), torch.Size([18])
 ret : tensor([94, 92, 91, 82, 81, 78, 76, 74, 70, 63, 58, 55, 54, 48, 42, 27, 11, 10]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -26.3906,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[8, 2, 19], [7, 9, 12, 1], [0, 14], [17], [5, 11], [16], [18], [13, 15], [4, 10], [6, 3]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[1, 7, 0, 17, 8, 16, 3, 13, 4, 6], [8, 7, 2, 17, 5, 10, 3, 13, 4, 14], [8, 10, 19, 17, 9, 2, 14, 13, 4, 18], [8, 9, 12, 17, 18, 11, 19, 13, 15, 3], [8, 9, 2, 16, 10, 11, 15, 13, 18, 3], [8, 9, 16, 18, 14, 11, 1, 2, 10, 3], [15, 12, 16, 19, 14, 2, 1, 11, 10, 3], [1, 12, 14, 18, 11, 16, 19, 15, 10, 2], [2, 12, 19, 20, 11, 16, 18, 15, 14, 1], [20, 12, 1, 2, 11, 14, 18, 15, 19, 20], [20, 12, 20, 1, 11, 14, 18, 19, 20, 2], [2, 1, 14, 20, 11, 19, 18, 20, 20, 20], [20, 1, 14, 20, 19, 20, 18, 20, 20, 2], [2, 1, 14, 19, 20, 20, 20, 20, 20, 20], [2, 1, 20, 20, 20, 20, 20, 20, 19, 20], [2, 20, 19, 20, 20, 20, 20, 20, 20, 20], [19, 20, 20, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 3, 7, 8, 6, 0, 9, 5, 4, 2]), array([0, 3, 7, 8, 6, 2, 9, 1, 5, 4]), array([0, 3, 7, 6, 2, 8, 5, 9, 4, 1]), array([0, 1, 7, 9, 5, 2, 3, 4, 8, 6]), array([0, 1, 9, 6, 5, 2, 3, 7, 8, 4]), array([8, 9, 5, 4, 3, 1, 7, 2, 6, 0]), array([1, 8, 5, 9, 7, 2, 6, 4, 0, 3]), array([1, 5, 7, 4, 8, 9, 2, 0, 6, 3]), array([1, 4, 6, 7, 8, 3, 5, 2, 9, 0]), array([1, 4, 6, 5, 9, 3, 7, 2, 0, 8]), array([4, 6, 0, 1, 5, 2, 8, 9, 3, 7]), array([1, 2, 6, 4, 9, 0, 7, 5, 3, 8]), array([1, 2, 0, 3, 8, 9, 6, 5, 7, 4]), array([0, 1, 8, 6, 9, 4, 3, 2, 5, 7]), array([0, 2, 9, 3, 8, 1, 7, 4, 6, 5]), array([0, 3, 7, 8, 2, 9, 6, 5, 1, 4])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False,  True,  True,  True, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False,  True,  True,  True,  True, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False,  True,  True,  True,  True, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([ True, False, False, False,  True,  True,  True,  True, False,
       False, False, False, False,  True, False, False, False,  True,
       False, False]), array([ True, False, False, False,  True,  True,  True,  True,  True,
        True, False, False, False,  True, False, False, False,  True,
       False, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True, False, False, False,  True, False, False, False,  True,
       False, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True, False, False,  True, False, False, False,  True,
       False, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True, False, False,  True, False, False,  True,  True,
       False, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True, False, False,  True, False,  True,  True,  True,
       False, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True, False,  True,  True,  True,
       False, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True, False,  True,  True,  True,
       False, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True, False,  True,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False])], 17
 next_t : [12, 3, 2, 5, 3, 3, 2, 5, 4, 2, 2, 7, 2, 7, 2, 9, 3], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 1,  7,  0, 17,  8, 16,  3, 13,  4,  6],
        [ 8,  7,  2, 17,  5, 10,  3, 13,  4, 14],
        [ 8, 10, 19, 17,  9,  2, 14, 13,  4, 18],
        [ 8,  9, 12, 17, 18, 11, 19, 13, 15,  3],
        [ 8,  9,  2, 16, 10, 11, 15, 13, 18,  3],
        [ 8,  9, 16, 18, 14, 11,  1,  2, 10,  3],
        [15, 12, 16, 19, 14,  2,  1, 11, 10,  3],
        [ 1, 12, 14, 18, 11, 16, 19, 15, 10,  2],
        [ 2, 12, 19, 20, 11, 16, 18, 15, 14,  1],
        [20, 12,  1,  2, 11, 14, 18, 15, 19, 20],
        [20, 12, 20,  1, 11, 14, 18, 19, 20,  2],
        [ 2,  1, 14, 20, 11, 19, 18, 20, 20, 20],
        [20,  1, 14, 20, 19, 20, 18, 20, 20,  2],
        [ 2,  1, 14, 19, 20, 20, 20, 20, 20, 20],
        [ 2,  1, 20, 20, 20, 20, 20, 20, 19, 20],
        [ 2, 20, 19, 20, 20, 20, 20, 20, 20, 20],
        [19, 20, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 1],
        [ 7],
        [ 0],
        [17],
        [ 8],
        [16],
        [ 3],
        [13],
        [ 4],
        [ 6],
        [ 8],
        [ 7],
        [ 2],
        [17],
        [ 5],
        [10],
        [ 3],
        [13],
        [ 4],
        [14],
        [ 8],
        [10],
        [19],
        [17],
        [ 9],
        [ 2],
        [14],
        [13],
        [ 4],
        [18],
        [ 8],
        [ 9],
        [12],
        [17],
        [18],
        [11],
        [19],
        [13],
        [15],
        [ 3],
        [ 8],
        [ 9],
        [ 2],
        [16],
        [10],
        [11],
        [15],
        [13],
        [18],
        [ 3],
        [ 8],
        [ 9],
        [16],
        [18],
        [14],
        [11],
        [ 1],
        [ 2],
        [10],
        [ 3],
        [15],
        [12],
        [16],
        [19],
        [14],
        [ 2],
        [ 1],
        [11],
        [10],
        [ 3],
        [ 1],
        [12],
        [14],
        [18],
        [11],
        [16],
        [19],
        [15],
        [10],
        [ 2],
        [ 2],
        [12],
        [19],
        [20],
        [11],
        [16],
        [18],
        [15],
        [14],
        [ 1],
        [20],
        [12],
        [ 1],
        [ 2],
        [11],
        [14],
        [18],
        [15],
        [19],
        [20],
        [20],
        [12],
        [20],
        [ 1],
        [11],
        [14],
        [18],
        [19],
        [20],
        [ 2],
        [ 2],
        [ 1],
        [14],
        [20],
        [11],
        [19],
        [18],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [14],
        [20],
        [19],
        [20],
        [18],
        [20],
        [20],
        [ 2],
        [ 2],
        [ 1],
        [14],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [ 2],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([12,  3,  2,  5,  3,  3,  2,  5,  4,  2,  2,  7,  2,  7,  2,  9,  3]), torch.Size([17])
 ret : tensor([57, 46, 44, 43, 39, 37, 35, 34, 30, 27, 26, 25, 19, 18, 12, 11,  3]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.3321,  -27.7259,  -27.0805,  -26.3906,
         -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[9], [14, 19], [1, 17, 16], [7], [3, 12, 10], [2, 18], [], [5, 6], [15, 11], [4, 0, 13, 8]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[19, 8, 1, 7, 3, 14, 6, 17, 16, 4], [19, 16, 1, 7, 3, 2, 6, 18, 15, 0], [16, 14, 1, 7, 9, 2, 6, 5, 15, 0], [12, 14, 1, 7, 11, 2, 6, 16, 15, 0], [9, 14, 1, 11, 8, 2, 18, 6, 15, 13], [9, 14, 18, 17, 16, 2, 12, 6, 11, 13], [9, 16, 12, 19, 8, 2, 18, 6, 11, 13], [9, 16, 10, 8, 12, 18, 19, 6, 17, 13], [9, 8, 17, 16, 12, 18, 20, 10, 11, 19], [20, 8, 17, 20, 12, 18, 16, 10, 11, 19], [10, 19, 8, 20, 12, 18, 16, 20, 11, 20], [10, 19, 20, 8, 12, 20, 20, 20, 11, 16], [20, 19, 20, 20, 10, 20, 16, 20, 11, 8], [16, 19, 20, 20, 10, 20, 20, 20, 20, 8], [16, 20, 20, 20, 10, 20, 20, 20, 20, 8], [20, 20, 20, 20, 20, 20, 20, 16, 20, 8], [20, 20, 16, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 3, 4, 6, 9, 5, 0, 7, 8, 1]), array([2, 3, 5, 8, 9, 4, 0, 6, 1, 7]), array([1, 2, 3, 5, 8, 9, 6, 0, 4, 7]), array([1, 2, 5, 8, 0, 9, 6, 4, 3, 7]), array([0, 1, 5, 7, 9, 4, 6, 3, 8, 2]), array([0, 5, 7, 9, 2, 4, 6, 1, 8, 3]), array([0, 7, 9, 8, 3, 1, 4, 5, 6, 2]), array([0, 4, 5, 3, 9, 1, 8, 2, 7, 6]), array([2, 4, 5, 7, 1, 6, 9, 8, 3, 0]), array([4, 5, 8, 0, 2, 1, 6, 9, 7, 3]), array([1, 4, 8, 0, 3, 9, 6, 2, 5, 7]), array([1, 8, 4, 6, 9, 7, 0, 2, 5, 3]), array([1, 4, 9, 0, 5, 8, 7, 3, 6, 2]), array([4, 9, 0, 6, 2, 1, 7, 3, 5, 8]), array([9, 7, 8, 1, 5, 6, 3, 2, 0, 4]), array([2, 0, 5, 3, 7, 8, 1, 4, 6, 9])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True,  True,  True, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False,  True,  True,  True, False,  True, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True,  True, False,  True,  True,  True, False,  True, False,
       False, False, False, False, False, False,  True, False, False,
       False, False]), array([ True,  True, False,  True,  True,  True, False,  True, False,
       False, False, False, False, False,  True,  True, False, False,
       False, False]), array([ True,  True,  True,  True,  True,  True, False,  True, False,
       False, False, False, False, False,  True,  True, False, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
       False, False, False, False,  True,  True,  True, False, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False, False, False,  True,  True,  True, False, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False, False, False,  True,  True,  True, False,  True,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False, False, False,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False, False,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False,  True,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True, False,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 17
 next_t : [5, 4, 3, 3, 3, 3, 2, 2, 6, 3, 2, 2, 7, 3, 7, 2, 22], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[19,  8,  1,  7,  3, 14,  6, 17, 16,  4],
        [19, 16,  1,  7,  3,  2,  6, 18, 15,  0],
        [16, 14,  1,  7,  9,  2,  6,  5, 15,  0],
        [12, 14,  1,  7, 11,  2,  6, 16, 15,  0],
        [ 9, 14,  1, 11,  8,  2, 18,  6, 15, 13],
        [ 9, 14, 18, 17, 16,  2, 12,  6, 11, 13],
        [ 9, 16, 12, 19,  8,  2, 18,  6, 11, 13],
        [ 9, 16, 10,  8, 12, 18, 19,  6, 17, 13],
        [ 9,  8, 17, 16, 12, 18, 20, 10, 11, 19],
        [20,  8, 17, 20, 12, 18, 16, 10, 11, 19],
        [10, 19,  8, 20, 12, 18, 16, 20, 11, 20],
        [10, 19, 20,  8, 12, 20, 20, 20, 11, 16],
        [20, 19, 20, 20, 10, 20, 16, 20, 11,  8],
        [16, 19, 20, 20, 10, 20, 20, 20, 20,  8],
        [16, 20, 20, 20, 10, 20, 20, 20, 20,  8],
        [20, 20, 20, 20, 20, 20, 20, 16, 20,  8],
        [20, 20, 16, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[19],
        [ 8],
        [ 1],
        [ 7],
        [ 3],
        [14],
        [ 6],
        [17],
        [16],
        [ 4],
        [19],
        [16],
        [ 1],
        [ 7],
        [ 3],
        [ 2],
        [ 6],
        [18],
        [15],
        [ 0],
        [16],
        [14],
        [ 1],
        [ 7],
        [ 9],
        [ 2],
        [ 6],
        [ 5],
        [15],
        [ 0],
        [12],
        [14],
        [ 1],
        [ 7],
        [11],
        [ 2],
        [ 6],
        [16],
        [15],
        [ 0],
        [ 9],
        [14],
        [ 1],
        [11],
        [ 8],
        [ 2],
        [18],
        [ 6],
        [15],
        [13],
        [ 9],
        [14],
        [18],
        [17],
        [16],
        [ 2],
        [12],
        [ 6],
        [11],
        [13],
        [ 9],
        [16],
        [12],
        [19],
        [ 8],
        [ 2],
        [18],
        [ 6],
        [11],
        [13],
        [ 9],
        [16],
        [10],
        [ 8],
        [12],
        [18],
        [19],
        [ 6],
        [17],
        [13],
        [ 9],
        [ 8],
        [17],
        [16],
        [12],
        [18],
        [20],
        [10],
        [11],
        [19],
        [20],
        [ 8],
        [17],
        [20],
        [12],
        [18],
        [16],
        [10],
        [11],
        [19],
        [10],
        [19],
        [ 8],
        [20],
        [12],
        [18],
        [16],
        [20],
        [11],
        [20],
        [10],
        [19],
        [20],
        [ 8],
        [12],
        [20],
        [20],
        [20],
        [11],
        [16],
        [20],
        [19],
        [20],
        [20],
        [10],
        [20],
        [16],
        [20],
        [11],
        [ 8],
        [16],
        [19],
        [20],
        [20],
        [10],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [16],
        [20],
        [20],
        [20],
        [10],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [ 8],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 5,  4,  3,  3,  3,  3,  2,  2,  6,  3,  2,  2,  7,  3,  7,  2, 22]), torch.Size([17])
 ret : tensor([63, 59, 56, 54, 52, 50, 48, 47, 46, 41, 39, 38, 37, 31, 29, 23, 22]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -26.3906,
         -25.6495,  -24.8491,  -32.2362,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:08<00:00,  8.53s/it]
[[0, 17, 18], [1, 13], [2, 6, 10], [12], [15], [5, 4, 19], [14], [7, 8], [16], [9, 3, 11]]
  0%|                                                                                                                                                                                           | 0/5 [00:00<?, ?it/s]
[[19, 4], [6, 14], [7, 8, 11], [13, 15], [0, 3, 1], [2], [18], [17, 12], [10], [9, 5, 16]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[2, 6, 7, 8, 3, 18, 5, 17, 10, 9], [1, 6, 7, 11, 3, 18, 12, 8, 10, 9], [18, 6, 4, 13, 0, 15, 3, 12, 8, 2], [19, 15, 2, 13, 0, 11, 14, 12, 3, 4], [19, 18, 16, 13, 0, 2, 11, 3, 14, 1], [19, 15, 11, 13, 3, 2, 18, 5, 16, 8], [16, 15, 8, 14, 3, 2, 18, 1, 4, 5], [4, 1, 8, 15, 11, 2, 18, 14, 16, 5], [15, 1, 8, 14, 11, 2, 18, 20, 16, 4], [15, 11, 8, 4, 20, 16, 18, 1, 14, 20], [20, 14, 1, 15, 11, 20, 18, 16, 20, 4], [20, 14, 20, 15, 4, 11, 20, 16, 20, 1], [4, 20, 16, 15, 20, 1, 11, 20, 20, 20], [4, 11, 20, 20, 20, 20, 20, 1, 20, 16], [20, 20, 11, 20, 20, 20, 1, 20, 20, 16], [20, 20, 11, 20, 1, 20, 20, 20, 20, 20], [20, 20, 20, 20, 1, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 2, 8, 9, 4, 0, 5, 6, 7, 3]), array([1, 6, 9, 3, 0, 7, 5, 2, 8, 4]), array([3, 4, 7, 6, 1, 0, 2, 9, 8, 5]), array([0, 3, 4, 6, 7, 5, 8, 1, 9, 2]), array([0, 3, 5, 7, 2, 4, 8, 9, 1, 6]), array([4, 5, 9, 0, 3, 8, 6, 2, 1, 7]), array([2, 5, 6, 9, 4, 8, 0, 7, 1, 3]), array([2, 5, 6, 1, 0, 8, 4, 3, 9, 7]), array([2, 6, 5, 3, 0, 7, 8, 1, 4, 9]), array([6, 7, 4, 3, 9, 1, 2, 8, 5, 0]), array([1, 3, 7, 5, 4, 9, 8, 6, 2, 0]), array([3, 6, 0, 5, 2, 7, 1, 4, 9, 8]), array([0, 7, 1, 9, 2, 5, 8, 3, 6, 4]), array([9, 6, 2, 4, 0, 1, 5, 8, 7, 3]), array([4, 2, 0, 8, 3, 9, 1, 6, 7, 5]), array([4, 5, 2, 9, 6, 0, 1, 7, 8, 3])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False, False, False, False, False,  True, False,
        True,  True, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False, False, False, False,  True,  True, False,
        True,  True, False, False, False, False, False, False,  True,
       False, False]), array([False, False, False, False, False, False,  True,  True, False,
        True,  True, False,  True, False, False, False, False,  True,
       False, False]), array([ True, False, False, False, False, False,  True,  True, False,
        True,  True, False,  True, False, False, False, False,  True,
       False, False]), array([ True, False, False, False, False, False,  True,  True, False,
        True,  True, False,  True,  True, False, False, False,  True,
       False,  True]), array([ True, False, False,  True, False, False,  True,  True, False,
        True,  True, False,  True,  True, False, False, False,  True,
       False,  True]), array([ True, False, False,  True, False,  True,  True,  True, False,
        True,  True, False,  True,  True, False, False, False,  True,
       False,  True]), array([ True, False,  True,  True, False,  True,  True,  True, False,
        True,  True, False,  True,  True, False, False, False,  True,
       False,  True]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True, False, False, False,  True,
       False,  True]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True, False, False, False,  True,
        True,  True]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False, False,  True,
        True,  True]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [11, 7, 3, 4, 3, 3, 3, 3, 2, 3, 5, 5, 2, 9, 6, 13, 4], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 2,  6,  7,  8,  3, 18,  5, 17, 10,  9],
        [ 1,  6,  7, 11,  3, 18, 12,  8, 10,  9],
        [18,  6,  4, 13,  0, 15,  3, 12,  8,  2],
        [19, 15,  2, 13,  0, 11, 14, 12,  3,  4],
        [19, 18, 16, 13,  0,  2, 11,  3, 14,  1],
        [19, 15, 11, 13,  3,  2, 18,  5, 16,  8],
        [16, 15,  8, 14,  3,  2, 18,  1,  4,  5],
        [ 4,  1,  8, 15, 11,  2, 18, 14, 16,  5],
        [15,  1,  8, 14, 11,  2, 18, 20, 16,  4],
        [15, 11,  8,  4, 20, 16, 18,  1, 14, 20],
        [20, 14,  1, 15, 11, 20, 18, 16, 20,  4],
        [20, 14, 20, 15,  4, 11, 20, 16, 20,  1],
        [ 4, 20, 16, 15, 20,  1, 11, 20, 20, 20],
        [ 4, 11, 20, 20, 20, 20, 20,  1, 20, 16],
        [20, 20, 11, 20, 20, 20,  1, 20, 20, 16],
        [20, 20, 11, 20,  1, 20, 20, 20, 20, 20],
        [20, 20, 20, 20,  1, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 2],
        [ 6],
        [ 7],
        [ 8],
        [ 3],
        [18],
        [ 5],
        [17],
        [10],
        [ 9],
        [ 1],
        [ 6],
        [ 7],
        [11],
        [ 3],
        [18],
        [12],
        [ 8],
        [10],
        [ 9],
        [18],
        [ 6],
        [ 4],
        [13],
        [ 0],
        [15],
        [ 3],
        [12],
        [ 8],
        [ 2],
        [19],
        [15],
        [ 2],
        [13],
        [ 0],
        [11],
        [14],
        [12],
        [ 3],
        [ 4],
        [19],
        [18],
        [16],
        [13],
        [ 0],
        [ 2],
        [11],
        [ 3],
        [14],
        [ 1],
        [19],
        [15],
        [11],
        [13],
        [ 3],
        [ 2],
        [18],
        [ 5],
        [16],
        [ 8],
        [16],
        [15],
        [ 8],
        [14],
        [ 3],
        [ 2],
        [18],
        [ 1],
        [ 4],
        [ 5],
        [ 4],
        [ 1],
        [ 8],
        [15],
        [11],
        [ 2],
        [18],
        [14],
        [16],
        [ 5],
        [15],
        [ 1],
        [ 8],
        [14],
        [11],
        [ 2],
        [18],
        [20],
        [16],
        [ 4],
        [15],
        [11],
        [ 8],
        [ 4],
        [20],
        [16],
        [18],
        [ 1],
        [14],
        [20],
        [20],
        [14],
        [ 1],
        [15],
        [11],
        [20],
        [18],
        [16],
        [20],
        [ 4],
        [20],
        [14],
        [20],
        [15],
        [ 4],
        [11],
        [20],
        [16],
        [20],
        [ 1],
        [ 4],
        [20],
        [16],
        [15],
        [20],
        [ 1],
        [11],
        [20],
        [20],
        [20],
        [ 4],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [16],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [16],
        [20],
        [20],
        [11],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([11,  7,  3,  4,  3,  3,  3,  3,  2,  3,  5,  5,  2,  9,  6, 13,  4]), torch.Size([17])
 ret : tensor([70, 60, 54, 52, 49, 47, 45, 43, 41, 40, 38, 34, 30, 29, 21, 16,  4]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 5.0000e-01, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 5.0000e-01, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 5.0000e-01, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -28.3321,  -27.7259,  -27.0805,  -26.3906,
         -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[12], [17], [15, 16, 9], [13, 5], [14, 4, 18], [11, 19, 1], [7, 8], [6], [0, 10], [3, 2]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 13
 joint_action : [[8, 10, 15, 17, 14, 11, 7, 6, 0, 12], [2, 17, 16, 13, 14, 11, 7, 1, 19, 3], [12, 17, 16, 13, 4, 11, 7, 2, 8, 19], [12, 17, 16, 13, 4, 10, 7, 19, 6, 2], [12, 17, 16, 5, 4, 6, 7, 9, 18, 2], [12, 17, 16, 5, 4, 9, 8, 18, 10, 2], [12, 17, 16, 5, 4, 9, 8, 18, 10, 1], [12, 17, 16, 5, 19, 9, 8, 6, 10, 18], [12, 17, 18, 5, 1, 19, 8, 6, 10, 9], [20, 1, 9, 20, 18, 19, 8, 20, 10, 20], [20, 20, 9, 20, 18, 1, 20, 20, 10, 20], [20, 20, 9, 20, 18, 20, 20, 20, 20, 20], [20, 20, 20, 20, 18, 20, 20, 20, 20, 20]], 13
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([4, 5, 6, 7, 3, 0, 2, 1, 8, 9]), array([2, 3, 5, 6, 7, 4, 0, 1, 9, 8]), array([0, 1, 2, 3, 4, 6, 9, 5, 8, 7]), array([0, 1, 2, 4, 6, 9, 3, 7, 8, 5]), array([0, 1, 2, 3, 4, 9, 8, 7, 5, 6]), array([0, 1, 2, 3, 4, 6, 8, 7, 5, 9]), array([0, 1, 2, 3, 6, 8, 4, 5, 7, 9]), array([0, 1, 3, 6, 7, 8, 5, 2, 9, 4]), array([5, 6, 8, 2, 1, 4, 7, 3, 9, 0]), array([2, 4, 8, 5, 1, 7, 6, 9, 0, 3]), array([2, 4, 8, 7, 3, 1, 6, 0, 5, 9]), array([4, 9, 0, 2, 6, 3, 5, 8, 1, 7])], 13
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
       False, False, False, False, False,  True,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
       False, False,  True, False, False,  True,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
       False, False,  True, False,  True,  True,  True, False, False,
       False, False]), array([ True, False, False,  True, False, False, False,  True, False,
       False, False,  True, False,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True,  True, False, False, False,  True, False,
       False, False,  True, False,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True,  True,  True, False, False,  True, False,
       False, False,  True, False,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True,  True,  True, False, False,  True, False,
       False, False,  True, False,  True,  True,  True,  True, False,
       False, False]), array([ True, False,  True,  True,  True,  True,  True,  True, False,
       False, False,  True,  True,  True,  True,  True,  True,  True,
       False, False]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
       False, False,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True])], 13
 next_t : [13, 6, 2, 2, 2, 2, 3, 4, 2, 2, 3, 5, 4], 13
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, True], 13
iteration : 13
joint_action : tensor([[ 8, 10, 15, 17, 14, 11,  7,  6,  0, 12],
        [ 2, 17, 16, 13, 14, 11,  7,  1, 19,  3],
        [12, 17, 16, 13,  4, 11,  7,  2,  8, 19],
        [12, 17, 16, 13,  4, 10,  7, 19,  6,  2],
        [12, 17, 16,  5,  4,  6,  7,  9, 18,  2],
        [12, 17, 16,  5,  4,  9,  8, 18, 10,  2],
        [12, 17, 16,  5,  4,  9,  8, 18, 10,  1],
        [12, 17, 16,  5, 19,  9,  8,  6, 10, 18],
        [12, 17, 18,  5,  1, 19,  8,  6, 10,  9],
        [20,  1,  9, 20, 18, 19,  8, 20, 10, 20],
        [20, 20,  9, 20, 18,  1, 20, 20, 10, 20],
        [20, 20,  9, 20, 18, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 18, 20, 20, 20, 20, 20]]), torch.Size([13, 10])
 all_action : tensor([[ 8],
        [10],
        [15],
        [17],
        [14],
        [11],
        [ 7],
        [ 6],
        [ 0],
        [12],
        [ 2],
        [17],
        [16],
        [13],
        [14],
        [11],
        [ 7],
        [ 1],
        [19],
        [ 3],
        [12],
        [17],
        [16],
        [13],
        [ 4],
        [11],
        [ 7],
        [ 2],
        [ 8],
        [19],
        [12],
        [17],
        [16],
        [13],
        [ 4],
        [10],
        [ 7],
        [19],
        [ 6],
        [ 2],
        [12],
        [17],
        [16],
        [ 5],
        [ 4],
        [ 6],
        [ 7],
        [ 9],
        [18],
        [ 2],
        [12],
        [17],
        [16],
        [ 5],
        [ 4],
        [ 9],
        [ 8],
        [18],
        [10],
        [ 2],
        [12],
        [17],
        [16],
        [ 5],
        [ 4],
        [ 9],
        [ 8],
        [18],
        [10],
        [ 1],
        [12],
        [17],
        [16],
        [ 5],
        [19],
        [ 9],
        [ 8],
        [ 6],
        [10],
        [18],
        [12],
        [17],
        [18],
        [ 5],
        [ 1],
        [19],
        [ 8],
        [ 6],
        [10],
        [ 9],
        [20],
        [ 1],
        [ 9],
        [20],
        [18],
        [19],
        [ 8],
        [20],
        [10],
        [20],
        [20],
        [20],
        [ 9],
        [20],
        [18],
        [ 1],
        [20],
        [20],
        [10],
        [20],
        [20],
        [20],
        [ 9],
        [20],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([130, 1])
next_t : tensor([13,  6,  2,  2,  2,  2,  3,  4,  2,  2,  3,  5,  4]), torch.Size([13])
 ret : tensor([38, 26, 21, 20, 19, 18, 17, 15, 12, 11, 10,  8,  4]), torch.Size([13])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([130, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([130, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.3321,  -27.7259,  -27.0805,  -26.3906,
         -25.6495,  -24.8491,  -23.9790,  -57.7272,  -75.5153,  -94.3006,
        -104.3095], grad_fn=<SumBackward1>), torch.Size([13])
[[5, 6], [10, 13, 8], [2, 14], [16, 11, 9], [17, 4], [18], [7], [3, 15, 12], [19, 1], [0]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[1, 7, 2, 9, 17, 10, 6, 14, 15, 0], [5, 10, 4, 16, 17, 18, 12, 3, 7, 0], [5, 10, 12, 16, 9, 18, 14, 3, 15, 0], [7, 10, 14, 16, 1, 18, 12, 3, 11, 0], [12, 13, 8, 16, 9, 18, 15, 11, 19, 0], [9, 13, 6, 14, 4, 18, 15, 8, 19, 7], [12, 13, 8, 11, 4, 9, 1, 14, 19, 7], [12, 13, 7, 11, 4, 1, 8, 15, 6, 9], [1, 9, 12, 11, 4, 8, 6, 15, 14, 7], [7, 8, 12, 9, 20, 20, 6, 15, 1, 14], [20, 8, 20, 9, 7, 20, 12, 14, 1, 6], [20, 12, 14, 20, 7, 20, 20, 8, 1, 6], [20, 20, 14, 7, 20, 8, 20, 6, 20, 12], [6, 8, 20, 20, 7, 20, 20, 12, 20, 20], [6, 8, 20, 20, 20, 20, 20, 20, 7, 20], [20, 8, 20, 20, 20, 20, 20, 20, 7, 20], [20, 20, 20, 20, 20, 20, 7, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([4, 9, 3, 5, 6, 2, 0, 1, 8, 7]), array([0, 1, 3, 5, 7, 9, 2, 4, 8, 6]), array([1, 3, 5, 7, 9, 4, 8, 0, 6, 2]), array([3, 5, 9, 2, 1, 6, 7, 0, 4, 8]), array([1, 5, 8, 0, 6, 9, 3, 7, 2, 4]), array([1, 4, 8, 3, 5, 7, 9, 0, 2, 6]), array([1, 3, 4, 6, 0, 8, 7, 2, 5, 9]), array([3, 4, 7, 6, 2, 0, 8, 9, 5, 1]), array([7, 9, 1, 3, 0, 8, 2, 6, 4, 5]), array([3, 8, 4, 9, 7, 1, 6, 2, 0, 5]), array([8, 4, 7, 9, 1, 2, 5, 3, 6, 0]), array([2, 5, 9, 3, 7, 8, 0, 1, 6, 4]), array([1, 7, 4, 0, 2, 6, 5, 3, 8, 9]), array([0, 1, 8, 7, 6, 2, 4, 9, 3, 5]), array([1, 8, 3, 0, 9, 7, 6, 2, 4, 5]), array([6, 3, 4, 1, 8, 2, 7, 9, 5, 0])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False,  True, False, False,  True, False, False, False,
       False, False, False, False, False, False, False, False,  True,
       False, False]), array([False, False,  True,  True, False,  True, False, False, False,
       False,  True, False, False, False, False, False, False,  True,
       False, False]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True, False, False, False, False, False,  True,  True,
       False, False]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True, False, False, False, False, False,  True,  True,
        True, False]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True, False, False, False, False, False,  True,  True,
        True,  True]), array([ True, False,  True,  True, False,  True, False, False, False,
       False,  True, False, False,  True, False, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True, False, False, False,
       False,  True,  True, False,  True, False, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True, False, False, False,
       False,  True,  True, False,  True, False,  True,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True, False, False, False,
        True,  True,  True, False,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True, False, False, False,
        True,  True,  True, False,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True, False, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True, False, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [3, 5, 2, 2, 2, 6, 2, 2, 5, 4, 2, 5, 2, 25, 2, 7, 23], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 1,  7,  2,  9, 17, 10,  6, 14, 15,  0],
        [ 5, 10,  4, 16, 17, 18, 12,  3,  7,  0],
        [ 5, 10, 12, 16,  9, 18, 14,  3, 15,  0],
        [ 7, 10, 14, 16,  1, 18, 12,  3, 11,  0],
        [12, 13,  8, 16,  9, 18, 15, 11, 19,  0],
        [ 9, 13,  6, 14,  4, 18, 15,  8, 19,  7],
        [12, 13,  8, 11,  4,  9,  1, 14, 19,  7],
        [12, 13,  7, 11,  4,  1,  8, 15,  6,  9],
        [ 1,  9, 12, 11,  4,  8,  6, 15, 14,  7],
        [ 7,  8, 12,  9, 20, 20,  6, 15,  1, 14],
        [20,  8, 20,  9,  7, 20, 12, 14,  1,  6],
        [20, 12, 14, 20,  7, 20, 20,  8,  1,  6],
        [20, 20, 14,  7, 20,  8, 20,  6, 20, 12],
        [ 6,  8, 20, 20,  7, 20, 20, 12, 20, 20],
        [ 6,  8, 20, 20, 20, 20, 20, 20,  7, 20],
        [20,  8, 20, 20, 20, 20, 20, 20,  7, 20],
        [20, 20, 20, 20, 20, 20,  7, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 1],
        [ 7],
        [ 2],
        [ 9],
        [17],
        [10],
        [ 6],
        [14],
        [15],
        [ 0],
        [ 5],
        [10],
        [ 4],
        [16],
        [17],
        [18],
        [12],
        [ 3],
        [ 7],
        [ 0],
        [ 5],
        [10],
        [12],
        [16],
        [ 9],
        [18],
        [14],
        [ 3],
        [15],
        [ 0],
        [ 7],
        [10],
        [14],
        [16],
        [ 1],
        [18],
        [12],
        [ 3],
        [11],
        [ 0],
        [12],
        [13],
        [ 8],
        [16],
        [ 9],
        [18],
        [15],
        [11],
        [19],
        [ 0],
        [ 9],
        [13],
        [ 6],
        [14],
        [ 4],
        [18],
        [15],
        [ 8],
        [19],
        [ 7],
        [12],
        [13],
        [ 8],
        [11],
        [ 4],
        [ 9],
        [ 1],
        [14],
        [19],
        [ 7],
        [12],
        [13],
        [ 7],
        [11],
        [ 4],
        [ 1],
        [ 8],
        [15],
        [ 6],
        [ 9],
        [ 1],
        [ 9],
        [12],
        [11],
        [ 4],
        [ 8],
        [ 6],
        [15],
        [14],
        [ 7],
        [ 7],
        [ 8],
        [12],
        [ 9],
        [20],
        [20],
        [ 6],
        [15],
        [ 1],
        [14],
        [20],
        [ 8],
        [20],
        [ 9],
        [ 7],
        [20],
        [12],
        [14],
        [ 1],
        [ 6],
        [20],
        [12],
        [14],
        [20],
        [ 7],
        [20],
        [20],
        [ 8],
        [ 1],
        [ 6],
        [20],
        [20],
        [14],
        [ 7],
        [20],
        [ 8],
        [20],
        [ 6],
        [20],
        [12],
        [ 6],
        [ 8],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [12],
        [20],
        [20],
        [ 6],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 3,  5,  2,  2,  2,  6,  2,  2,  5,  4,  2,  5,  2, 25,  2,  7, 23]), torch.Size([17])
 ret : tensor([83, 81, 77, 76, 75, 74, 69, 68, 67, 63, 60, 59, 55, 54, 30, 29, 23]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -26.3906,
         -25.6495,  -24.8491,  -23.9790,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[5, 17], [0, 15, 2], [9], [10, 8, 13, 18], [16, 6], [12, 14, 7], [3], [11], [4], [1, 19]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 15
 joint_action : [[5, 11, 7, 15, 0, 12, 9, 8, 3, 2], [5, 0, 9, 11, 14, 4, 3, 6, 19, 15], [17, 0, 9, 10, 2, 16, 8, 11, 4, 1], [17, 16, 9, 10, 8, 14, 15, 11, 4, 1], [17, 19, 9, 8, 16, 14, 13, 11, 4, 1], [17, 19, 18, 8, 16, 14, 7, 11, 4, 1], [15, 2, 18, 19, 16, 13, 7, 11, 3, 1], [20, 18, 3, 13, 6, 7, 19, 15, 2, 1], [2, 15, 18, 13, 6, 7, 20, 3, 20, 19], [18, 15, 20, 13, 6, 7, 3, 2, 20, 20], [15, 20, 18, 13, 20, 7, 3, 20, 2, 20], [20, 20, 15, 2, 18, 20, 3, 20, 20, 20], [20, 15, 2, 18, 20, 20, 20, 20, 20, 20], [20, 15, 2, 20, 20, 20, 20, 20, 20, 20], [20, 2, 20, 20, 20, 20, 20, 20, 20, 20]], 15
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 7, 6, 5, 1, 8, 9, 3, 4, 2]), array([1, 2, 9, 3, 0, 8, 6, 7, 5, 4]), array([0, 2, 3, 7, 8, 1, 5, 4, 6, 9]), array([0, 2, 5, 7, 8, 9, 4, 3, 1, 6]), array([0, 3, 4, 5, 7, 8, 9, 2, 1, 6]), array([4, 7, 9, 5, 1, 0, 8, 3, 6, 2]), array([9, 6, 3, 4, 2, 7, 5, 1, 8, 0]), array([3, 4, 5, 2, 0, 9, 7, 1, 8, 6]), array([3, 4, 5, 1, 6, 7, 0, 2, 8, 9]), array([3, 5, 6, 0, 8, 2, 4, 7, 1, 9]), array([6, 2, 4, 3, 5, 7, 1, 8, 9, 0]), array([1, 2, 3, 6, 5, 7, 0, 9, 4, 8]), array([1, 2, 3, 6, 7, 5, 8, 9, 4, 0]), array([1, 2, 9, 4, 5, 3, 0, 8, 7, 6])], 15
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False, False, False,  True, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False,  True, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False,  True, False, False, False,
       False,  True, False,  True, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False,  True, False, False, False,
        True,  True, False,  True, False, False, False, False, False,
       False, False]), array([ True, False, False, False,  True,  True, False, False,  True,
        True,  True, False,  True, False,  True, False, False,  True,
       False, False]), array([ True, False, False, False,  True,  True, False, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
       False, False]), array([ True,  True, False, False,  True,  True, False, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
       False, False]), array([ True,  True, False, False,  True,  True, False, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
       False,  True]), array([ True,  True, False, False,  True,  True,  True, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
       False,  True]), array([ True,  True, False, False,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 15
 next_t : [9, 8, 4, 2, 3, 5, 2, 3, 3, 6, 3, 4, 8, 6, 19], 15
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 15
iteration : 15
joint_action : tensor([[ 5, 11,  7, 15,  0, 12,  9,  8,  3,  2],
        [ 5,  0,  9, 11, 14,  4,  3,  6, 19, 15],
        [17,  0,  9, 10,  2, 16,  8, 11,  4,  1],
        [17, 16,  9, 10,  8, 14, 15, 11,  4,  1],
        [17, 19,  9,  8, 16, 14, 13, 11,  4,  1],
        [17, 19, 18,  8, 16, 14,  7, 11,  4,  1],
        [15,  2, 18, 19, 16, 13,  7, 11,  3,  1],
        [20, 18,  3, 13,  6,  7, 19, 15,  2,  1],
        [ 2, 15, 18, 13,  6,  7, 20,  3, 20, 19],
        [18, 15, 20, 13,  6,  7,  3,  2, 20, 20],
        [15, 20, 18, 13, 20,  7,  3, 20,  2, 20],
        [20, 20, 15,  2, 18, 20,  3, 20, 20, 20],
        [20, 15,  2, 18, 20, 20, 20, 20, 20, 20],
        [20, 15,  2, 20, 20, 20, 20, 20, 20, 20],
        [20,  2, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([15, 10])
 all_action : tensor([[ 5],
        [11],
        [ 7],
        [15],
        [ 0],
        [12],
        [ 9],
        [ 8],
        [ 3],
        [ 2],
        [ 5],
        [ 0],
        [ 9],
        [11],
        [14],
        [ 4],
        [ 3],
        [ 6],
        [19],
        [15],
        [17],
        [ 0],
        [ 9],
        [10],
        [ 2],
        [16],
        [ 8],
        [11],
        [ 4],
        [ 1],
        [17],
        [16],
        [ 9],
        [10],
        [ 8],
        [14],
        [15],
        [11],
        [ 4],
        [ 1],
        [17],
        [19],
        [ 9],
        [ 8],
        [16],
        [14],
        [13],
        [11],
        [ 4],
        [ 1],
        [17],
        [19],
        [18],
        [ 8],
        [16],
        [14],
        [ 7],
        [11],
        [ 4],
        [ 1],
        [15],
        [ 2],
        [18],
        [19],
        [16],
        [13],
        [ 7],
        [11],
        [ 3],
        [ 1],
        [20],
        [18],
        [ 3],
        [13],
        [ 6],
        [ 7],
        [19],
        [15],
        [ 2],
        [ 1],
        [ 2],
        [15],
        [18],
        [13],
        [ 6],
        [ 7],
        [20],
        [ 3],
        [20],
        [19],
        [18],
        [15],
        [20],
        [13],
        [ 6],
        [ 7],
        [ 3],
        [ 2],
        [20],
        [20],
        [15],
        [20],
        [18],
        [13],
        [20],
        [ 7],
        [ 3],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [15],
        [ 2],
        [18],
        [20],
        [ 3],
        [20],
        [20],
        [20],
        [20],
        [15],
        [ 2],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [15],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([150, 1])
next_t : tensor([ 9,  8,  4,  2,  3,  5,  2,  3,  3,  6,  3,  4,  8,  6, 19]), torch.Size([15])
 ret : tensor([71, 63, 56, 53, 52, 50, 46, 45, 43, 41, 36, 34, 31, 24, 19]), torch.Size([15])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([150, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([150, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -24.8491,  -32.2362,  -40.6036,  -49.0949,  -57.7272,  -75.5153,
         -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([15])
[[11, 16], [13, 10], [4], [6, 12], [0, 18], [2, 9], [8, 1, 19, 17], [5, 15, 7], [14], [3]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[11, 13, 16, 6, 0, 2, 8, 19, 1, 7], [11, 13, 19, 6, 16, 2, 5, 10, 14, 3], [11, 13, 4, 6, 16, 19, 1, 9, 14, 3], [11, 13, 4, 6, 7, 16, 1, 9, 5, 3], [12, 9, 4, 6, 17, 18, 1, 5, 15, 3], [15, 10, 4, 7, 18, 16, 1, 5, 12, 3], [16, 10, 15, 12, 18, 17, 1, 5, 19, 9], [16, 10, 9, 12, 7, 17, 19, 5, 18, 15], [16, 10, 20, 20, 7, 9, 19, 17, 15, 18], [16, 17, 20, 7, 18, 9, 19, 20, 20, 15], [20, 20, 17, 7, 18, 9, 19, 15, 20, 20], [20, 20, 20, 17, 18, 9, 7, 15, 20, 20], [20, 20, 20, 20, 18, 20, 20, 15, 7, 17], [20, 20, 20, 20, 18, 20, 20, 20, 7, 17], [7, 20, 20, 20, 20, 20, 17, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 7, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 1, 3, 5, 8, 6, 9, 7, 2, 4]), array([0, 1, 3, 8, 9, 7, 6, 5, 4, 2]), array([0, 1, 2, 3, 6, 9, 5, 8, 4, 7]), array([2, 3, 6, 9, 0, 7, 4, 1, 5, 8]), array([2, 6, 7, 9, 4, 1, 3, 5, 8, 0]), array([1, 6, 7, 0, 2, 5, 9, 4, 8, 3]), array([0, 1, 3, 7, 4, 9, 2, 5, 6, 8]), array([0, 1, 6, 7, 4, 8, 9, 5, 3, 2]), array([0, 5, 6, 4, 3, 9, 1, 8, 2, 7]), array([4, 5, 6, 2, 3, 7, 1, 9, 8, 0]), array([4, 5, 7, 6, 3, 8, 1, 0, 9, 2]), array([4, 7, 8, 9, 2, 5, 3, 6, 1, 0]), array([4, 9, 8, 6, 7, 1, 5, 0, 2, 3]), array([0, 6, 8, 4, 5, 1, 2, 9, 3, 7]), array([7, 4, 6, 1, 2, 3, 9, 8, 5, 0])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False, False, False, False, False, False, False,  True,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False,  True, False, False, False, False, False,  True,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([ True, False,  True, False, False, False, False, False,  True,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([ True, False,  True, False, False, False, False, False,  True,
       False, False,  True, False,  True,  True, False, False, False,
       False, False]), array([ True, False,  True, False, False, False,  True, False,  True,
       False, False,  True, False,  True,  True, False, False, False,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False,  True,
       False, False,  True, False,  True,  True, False, False, False,
       False, False]), array([ True,  True,  True,  True,  True, False,  True, False,  True,
       False, False,  True, False,  True,  True, False, False, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
       False, False,  True,  True,  True,  True, False, False, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True,  True,  True,  True,  True, False, False, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True,  True,  True,  True,  True, False,  True, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True,  True,  True,  True,  True, False,  True, False,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True, False,  True, False,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [11, 3, 4, 2, 2, 2, 5, 2, 3, 5, 3, 3, 2, 3, 5, 20], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[11, 13, 16,  6,  0,  2,  8, 19,  1,  7],
        [11, 13, 19,  6, 16,  2,  5, 10, 14,  3],
        [11, 13,  4,  6, 16, 19,  1,  9, 14,  3],
        [11, 13,  4,  6,  7, 16,  1,  9,  5,  3],
        [12,  9,  4,  6, 17, 18,  1,  5, 15,  3],
        [15, 10,  4,  7, 18, 16,  1,  5, 12,  3],
        [16, 10, 15, 12, 18, 17,  1,  5, 19,  9],
        [16, 10,  9, 12,  7, 17, 19,  5, 18, 15],
        [16, 10, 20, 20,  7,  9, 19, 17, 15, 18],
        [16, 17, 20,  7, 18,  9, 19, 20, 20, 15],
        [20, 20, 17,  7, 18,  9, 19, 15, 20, 20],
        [20, 20, 20, 17, 18,  9,  7, 15, 20, 20],
        [20, 20, 20, 20, 18, 20, 20, 15,  7, 17],
        [20, 20, 20, 20, 18, 20, 20, 20,  7, 17],
        [ 7, 20, 20, 20, 20, 20, 17, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20,  7, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[11],
        [13],
        [16],
        [ 6],
        [ 0],
        [ 2],
        [ 8],
        [19],
        [ 1],
        [ 7],
        [11],
        [13],
        [19],
        [ 6],
        [16],
        [ 2],
        [ 5],
        [10],
        [14],
        [ 3],
        [11],
        [13],
        [ 4],
        [ 6],
        [16],
        [19],
        [ 1],
        [ 9],
        [14],
        [ 3],
        [11],
        [13],
        [ 4],
        [ 6],
        [ 7],
        [16],
        [ 1],
        [ 9],
        [ 5],
        [ 3],
        [12],
        [ 9],
        [ 4],
        [ 6],
        [17],
        [18],
        [ 1],
        [ 5],
        [15],
        [ 3],
        [15],
        [10],
        [ 4],
        [ 7],
        [18],
        [16],
        [ 1],
        [ 5],
        [12],
        [ 3],
        [16],
        [10],
        [15],
        [12],
        [18],
        [17],
        [ 1],
        [ 5],
        [19],
        [ 9],
        [16],
        [10],
        [ 9],
        [12],
        [ 7],
        [17],
        [19],
        [ 5],
        [18],
        [15],
        [16],
        [10],
        [20],
        [20],
        [ 7],
        [ 9],
        [19],
        [17],
        [15],
        [18],
        [16],
        [17],
        [20],
        [ 7],
        [18],
        [ 9],
        [19],
        [20],
        [20],
        [15],
        [20],
        [20],
        [17],
        [ 7],
        [18],
        [ 9],
        [19],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [17],
        [18],
        [ 9],
        [ 7],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [15],
        [ 7],
        [17],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [20],
        [20],
        [ 7],
        [17],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [17],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([11,  3,  4,  2,  2,  2,  5,  2,  3,  5,  3,  3,  2,  3,  5, 20]), torch.Size([16])
 ret : tensor([60, 50, 48, 45, 44, 43, 42, 38, 37, 35, 31, 29, 27, 26, 24, 20]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.9037,  -28.3321,  -27.0805,  -26.3906,
         -24.8491,  -23.9790,  -40.6036,  -49.0949,  -57.7272,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:10<00:00, 10.05s/it]
[[0], [1, 6, 13], [2, 4], [10, 12], [19], [5, 15, 11], [14], [7, 17], [18], [9, 3, 8, 16]]
  0%|                                                                                                                                                                      | 0/5 [00:00<?, ?it/s]
[[17], [16, 14], [9, 6], [2, 18, 4], [13, 15], [5, 0, 3, 1], [19, 11], [12, 8], [10], [7]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[0, 8, 9, 15, 1, 5, 14, 12, 17, 7], [0, 16, 9, 2, 3, 8, 10, 12, 11, 7], [10, 16, 6, 2, 1, 4, 3, 12, 13, 11], [10, 16, 6, 1, 19, 18, 8, 12, 15, 4], [4, 16, 15, 18, 19, 0, 10, 12, 1, 3], [15, 14, 19, 18, 8, 0, 11, 3, 10, 1], [17, 14, 1, 8, 4, 0, 19, 11, 10, 15], [17, 14, 13, 1, 4, 15, 19, 8, 10, 11], [17, 14, 15, 13, 3, 1, 19, 8, 11, 4], [17, 14, 3, 11, 13, 4, 19, 1, 20, 15], [17, 15, 1, 4, 20, 3, 19, 13, 20, 11], [17, 20, 1, 4, 20, 3, 13, 20, 11, 15], [20, 20, 1, 4, 13, 3, 15, 11, 20, 20], [20, 20, 20, 4, 13, 11, 20, 1, 15, 20], [20, 20, 11, 4, 20, 20, 20, 1, 15, 20], [11, 20, 20, 20, 15, 20, 20, 20, 20, 1], [20, 20, 11, 20, 20, 1, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 11, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 7, 9, 1, 6, 3, 0, 5, 4, 8]), array([1, 3, 7, 6, 2, 8, 0, 9, 5, 4]), array([1, 2, 7, 8, 9, 4, 5, 0, 3, 6]), array([1, 7, 5, 3, 9, 0, 6, 8, 4, 2]), array([3, 5, 4, 0, 6, 9, 2, 8, 7, 1]), array([5, 8, 7, 6, 2, 9, 1, 0, 4, 3]), array([1, 6, 8, 7, 2, 9, 5, 0, 4, 3]), array([0, 1, 6, 7, 8, 3, 4, 2, 5, 9]), array([0, 1, 6, 9, 2, 3, 7, 4, 5, 8]), array([0, 6, 9, 7, 1, 3, 2, 5, 4, 8]), array([0, 5, 2, 3, 9, 8, 6, 4, 7, 1]), array([5, 3, 2, 6, 4, 7, 0, 8, 1, 9]), array([3, 4, 5, 7, 8, 6, 2, 1, 0, 9]), array([3, 7, 8, 2, 1, 6, 4, 9, 0, 5]), array([0, 4, 9, 2, 8, 6, 5, 7, 3, 1]), array([5, 2, 7, 3, 1, 8, 4, 0, 6, 9]), array([6, 7, 5, 0, 2, 1, 8, 3, 4, 9])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False,  True, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False,  True, False,  True, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False,  True, False,  True, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False,  True,  True,  True, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False,  True,  True,  True, False,
        True, False, False,  True, False, False, False,  True, False,
       False, False]), array([False, False,  True, False, False,  True,  True,  True, False,
        True, False, False,  True, False, False, False,  True, False,
        True, False]), array([ True, False,  True, False, False,  True,  True,  True, False,
        True, False, False,  True, False, False, False,  True, False,
        True, False]), array([ True, False,  True, False, False,  True,  True,  True, False,
        True,  True, False,  True, False, False, False,  True, False,
        True, False]), array([ True, False,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True, False, False, False,  True, False,
        True, False]), array([ True, False,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True, False,  True, False,  True, False,
        True, False]), array([ True, False,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True, False,  True, False,  True, False,
        True,  True]), array([ True, False,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True, False,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True, False,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [7, 5, 4, 2, 2, 6, 3, 7, 2, 2, 2, 3, 4, 9, 2, 11, 17, 37], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 0,  8,  9, 15,  1,  5, 14, 12, 17,  7],
        [ 0, 16,  9,  2,  3,  8, 10, 12, 11,  7],
        [10, 16,  6,  2,  1,  4,  3, 12, 13, 11],
        [10, 16,  6,  1, 19, 18,  8, 12, 15,  4],
        [ 4, 16, 15, 18, 19,  0, 10, 12,  1,  3],
        [15, 14, 19, 18,  8,  0, 11,  3, 10,  1],
        [17, 14,  1,  8,  4,  0, 19, 11, 10, 15],
        [17, 14, 13,  1,  4, 15, 19,  8, 10, 11],
        [17, 14, 15, 13,  3,  1, 19,  8, 11,  4],
        [17, 14,  3, 11, 13,  4, 19,  1, 20, 15],
        [17, 15,  1,  4, 20,  3, 19, 13, 20, 11],
        [17, 20,  1,  4, 20,  3, 13, 20, 11, 15],
        [20, 20,  1,  4, 13,  3, 15, 11, 20, 20],
        [20, 20, 20,  4, 13, 11, 20,  1, 15, 20],
        [20, 20, 11,  4, 20, 20, 20,  1, 15, 20],
        [11, 20, 20, 20, 15, 20, 20, 20, 20,  1],
        [20, 20, 11, 20, 20,  1, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 11, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[ 0],
        [ 8],
        [ 9],
        [15],
        [ 1],
        [ 5],
        [14],
        [12],
        [17],
        [ 7],
        [ 0],
        [16],
        [ 9],
        [ 2],
        [ 3],
        [ 8],
        [10],
        [12],
        [11],
        [ 7],
        [10],
        [16],
        [ 6],
        [ 2],
        [ 1],
        [ 4],
        [ 3],
        [12],
        [13],
        [11],
        [10],
        [16],
        [ 6],
        [ 1],
        [19],
        [18],
        [ 8],
        [12],
        [15],
        [ 4],
        [ 4],
        [16],
        [15],
        [18],
        [19],
        [ 0],
        [10],
        [12],
        [ 1],
        [ 3],
        [15],
        [14],
        [19],
        [18],
        [ 8],
        [ 0],
        [11],
        [ 3],
        [10],
        [ 1],
        [17],
        [14],
        [ 1],
        [ 8],
        [ 4],
        [ 0],
        [19],
        [11],
        [10],
        [15],
        [17],
        [14],
        [13],
        [ 1],
        [ 4],
        [15],
        [19],
        [ 8],
        [10],
        [11],
        [17],
        [14],
        [15],
        [13],
        [ 3],
        [ 1],
        [19],
        [ 8],
        [11],
        [ 4],
        [17],
        [14],
        [ 3],
        [11],
        [13],
        [ 4],
        [19],
        [ 1],
        [20],
        [15],
        [17],
        [15],
        [ 1],
        [ 4],
        [20],
        [ 3],
        [19],
        [13],
        [20],
        [11],
        [17],
        [20],
        [ 1],
        [ 4],
        [20],
        [ 3],
        [13],
        [20],
        [11],
        [15],
        [20],
        [20],
        [ 1],
        [ 4],
        [13],
        [ 3],
        [15],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 4],
        [13],
        [11],
        [20],
        [ 1],
        [15],
        [20],
        [20],
        [20],
        [11],
        [ 4],
        [20],
        [20],
        [20],
        [ 1],
        [15],
        [20],
        [11],
        [20],
        [20],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [11],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 7,  5,  4,  2,  2,  6,  3,  7,  2,  2,  2,  3,  4,  9,  2, 11, 17, 37]), torch.Size([18])
 ret : tensor([107, 102,  98,  95,  94,  93,  88,  86,  80,  79,  78,  77,  75,  72,
         64,  63,  53,  37]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -28.9037,  -28.3321,  -27.7259,  -26.3906,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[9, 12, 10, 17, 18], [16, 3], [14, 7], [], [4, 6], [11], [1, 5], [0], [15], [13, 19, 8, 2]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[9, 7, 14, 16, 8, 1, 12, 0, 2, 13], [2, 16, 14, 6, 4, 11, 5, 0, 15, 13], [12, 16, 14, 10, 4, 11, 5, 0, 15, 19], [12, 16, 14, 2, 6, 11, 7, 1, 15, 19], [12, 16, 7, 17, 6, 11, 2, 8, 15, 19], [10, 16, 7, 17, 6, 11, 3, 5, 15, 19], [5, 10, 7, 18, 6, 11, 1, 2, 15, 8], [8, 2, 7, 10, 6, 11, 1, 18, 17, 3], [3, 17, 7, 18, 6, 2, 1, 8, 5, 10], [10, 3, 20, 17, 6, 18, 1, 5, 2, 8], [10, 3, 5, 2, 8, 20, 1, 20, 18, 17], [10, 3, 2, 8, 20, 18, 5, 20, 20, 17], [20, 3, 20, 20, 2, 18, 5, 20, 8, 17], [17, 20, 20, 18, 20, 20, 5, 2, 20, 8], [17, 18, 20, 20, 20, 20, 8, 20, 2, 20], [18, 20, 20, 20, 2, 20, 20, 20, 20, 8], [20, 20, 20, 20, 20, 20, 20, 20, 2, 8], [20, 20, 20, 20, 20, 20, 20, 20, 20, 2]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 7, 9, 3, 5, 8, 6, 0, 1, 4]), array([1, 2, 4, 5, 7, 8, 9, 0, 3, 6]), array([0, 1, 2, 5, 8, 9, 3, 6, 7, 4]), array([0, 1, 4, 5, 8, 9, 7, 6, 2, 3]), array([1, 2, 4, 5, 8, 9, 6, 0, 3, 7]), array([2, 4, 5, 8, 6, 9, 7, 3, 0, 1]), array([2, 4, 5, 6, 1, 7, 9, 8, 0, 3]), array([2, 4, 6, 5, 0, 8, 9, 3, 7, 1]), array([4, 6, 5, 9, 7, 8, 0, 3, 1, 2]), array([6, 3, 2, 0, 4, 1, 9, 8, 7, 5]), array([0, 1, 6, 5, 2, 3, 9, 7, 8, 4]), array([1, 6, 9, 4, 5, 8, 3, 2, 0, 7]), array([2, 6, 7, 9, 3, 0, 1, 5, 8, 4]), array([0, 6, 1, 8, 9, 4, 3, 2, 7, 5]), array([9, 4, 0, 1, 2, 8, 5, 3, 6, 7]), array([9, 8, 1, 3, 7, 4, 5, 6, 0, 2]), array([9, 7, 8, 4, 5, 6, 0, 2, 3, 1])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False,  True, False, False, False, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
        True, False, False, False,  True, False, False, False, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
        True, False, False, False,  True,  True, False, False, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
        True, False, False,  True,  True,  True, False, False, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
        True, False, False,  True,  True,  True, False,  True, False,
       False,  True]), array([ True, False, False, False,  True, False, False, False, False,
        True, False, False,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True, False, False, False,  True, False, False, False, False,
        True, False,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True, False, False, False,  True, False, False,  True, False,
        True, False,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True, False, False, False,  True, False,  True,  True, False,
        True, False,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True, False, False,  True, False,  True,  True, False,
        True, False,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True, False, False,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True, False,  True,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 18
 next_t : [4, 8, 2, 2, 2, 4, 2, 2, 2, 2, 6, 6, 2, 5, 3, 10, 2, 29], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[ 9,  7, 14, 16,  8,  1, 12,  0,  2, 13],
        [ 2, 16, 14,  6,  4, 11,  5,  0, 15, 13],
        [12, 16, 14, 10,  4, 11,  5,  0, 15, 19],
        [12, 16, 14,  2,  6, 11,  7,  1, 15, 19],
        [12, 16,  7, 17,  6, 11,  2,  8, 15, 19],
        [10, 16,  7, 17,  6, 11,  3,  5, 15, 19],
        [ 5, 10,  7, 18,  6, 11,  1,  2, 15,  8],
        [ 8,  2,  7, 10,  6, 11,  1, 18, 17,  3],
        [ 3, 17,  7, 18,  6,  2,  1,  8,  5, 10],
        [10,  3, 20, 17,  6, 18,  1,  5,  2,  8],
        [10,  3,  5,  2,  8, 20,  1, 20, 18, 17],
        [10,  3,  2,  8, 20, 18,  5, 20, 20, 17],
        [20,  3, 20, 20,  2, 18,  5, 20,  8, 17],
        [17, 20, 20, 18, 20, 20,  5,  2, 20,  8],
        [17, 18, 20, 20, 20, 20,  8, 20,  2, 20],
        [18, 20, 20, 20,  2, 20, 20, 20, 20,  8],
        [20, 20, 20, 20, 20, 20, 20, 20,  2,  8],
        [20, 20, 20, 20, 20, 20, 20, 20, 20,  2]]), torch.Size([18, 10])
 all_action : tensor([[ 9],
        [ 7],
        [14],
        [16],
        [ 8],
        [ 1],
        [12],
        [ 0],
        [ 2],
        [13],
        [ 2],
        [16],
        [14],
        [ 6],
        [ 4],
        [11],
        [ 5],
        [ 0],
        [15],
        [13],
        [12],
        [16],
        [14],
        [10],
        [ 4],
        [11],
        [ 5],
        [ 0],
        [15],
        [19],
        [12],
        [16],
        [14],
        [ 2],
        [ 6],
        [11],
        [ 7],
        [ 1],
        [15],
        [19],
        [12],
        [16],
        [ 7],
        [17],
        [ 6],
        [11],
        [ 2],
        [ 8],
        [15],
        [19],
        [10],
        [16],
        [ 7],
        [17],
        [ 6],
        [11],
        [ 3],
        [ 5],
        [15],
        [19],
        [ 5],
        [10],
        [ 7],
        [18],
        [ 6],
        [11],
        [ 1],
        [ 2],
        [15],
        [ 8],
        [ 8],
        [ 2],
        [ 7],
        [10],
        [ 6],
        [11],
        [ 1],
        [18],
        [17],
        [ 3],
        [ 3],
        [17],
        [ 7],
        [18],
        [ 6],
        [ 2],
        [ 1],
        [ 8],
        [ 5],
        [10],
        [10],
        [ 3],
        [20],
        [17],
        [ 6],
        [18],
        [ 1],
        [ 5],
        [ 2],
        [ 8],
        [10],
        [ 3],
        [ 5],
        [ 2],
        [ 8],
        [20],
        [ 1],
        [20],
        [18],
        [17],
        [10],
        [ 3],
        [ 2],
        [ 8],
        [20],
        [18],
        [ 5],
        [20],
        [20],
        [17],
        [20],
        [ 3],
        [20],
        [20],
        [ 2],
        [18],
        [ 5],
        [20],
        [ 8],
        [17],
        [17],
        [20],
        [20],
        [18],
        [20],
        [20],
        [ 5],
        [ 2],
        [20],
        [ 8],
        [17],
        [18],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [ 2],
        [20],
        [18],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 2]]), torch.Size([180, 1])
next_t : tensor([ 4,  8,  2,  2,  2,  4,  2,  2,  2,  2,  6,  6,  2,  5,  3, 10,  2, 29]), torch.Size([18])
 ret : tensor([76, 73, 66, 65, 64, 63, 60, 59, 58, 57, 56, 51, 46, 45, 41, 39, 30, 29]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 5.0000e-01,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.3321,  -27.7259,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
[[14], [13, 6, 17], [11, 15, 5, 1], [0], [2], [16, 18, 4, 12], [7, 8], [3], [19], [9, 10]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[0, 13, 11, 10, 15, 16, 6, 3, 18, 9], [10, 2, 15, 14, 5, 16, 18, 12, 17, 9], [6, 5, 4, 10, 19, 16, 2, 8, 18, 9], [1, 6, 5, 8, 2, 18, 7, 4, 10, 12], [14, 10, 5, 8, 2, 18, 7, 4, 12, 17], [14, 8, 19, 0, 2, 18, 7, 12, 4, 10], [14, 19, 17, 0, 12, 18, 7, 8, 1, 10], [14, 17, 4, 0, 8, 12, 7, 19, 1, 10], [8, 17, 4, 0, 19, 1, 12, 20, 20, 10], [19, 17, 12, 0, 20, 8, 20, 1, 20, 4], [12, 17, 19, 20, 8, 20, 1, 4, 20, 20], [20, 20, 20, 19, 20, 4, 8, 1, 12, 20], [20, 12, 20, 20, 20, 4, 1, 20, 19, 20], [20, 1, 20, 20, 20, 20, 20, 12, 19, 20], [20, 20, 1, 20, 20, 12, 20, 20, 20, 20], [20, 20, 20, 20, 20, 12, 20, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([5, 9, 1, 2, 8, 3, 7, 0, 4, 6]), array([5, 9, 2, 4, 6, 1, 3, 7, 0, 8]), array([4, 6, 3, 9, 1, 0, 2, 8, 7, 5]), array([2, 4, 5, 6, 8, 3, 0, 7, 1, 9]), array([0, 4, 5, 6, 2, 9, 1, 7, 8, 3]), array([0, 3, 5, 6, 9, 1, 2, 4, 8, 7]), array([0, 3, 6, 9, 7, 2, 1, 5, 4, 8]), array([1, 3, 9, 0, 6, 4, 2, 5, 7, 8]), array([1, 3, 5, 7, 2, 9, 0, 4, 6, 8]), array([1, 7, 6, 4, 0, 2, 5, 3, 8, 9]), array([3, 5, 6, 8, 7, 2, 9, 1, 4, 0]), array([5, 6, 8, 1, 0, 9, 2, 4, 3, 7]), array([8, 7, 1, 6, 4, 3, 2, 9, 5, 0]), array([5, 2, 6, 4, 3, 0, 7, 9, 8, 1]), array([5, 7, 9, 3, 8, 4, 6, 1, 0, 2])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False,  True, False,  True, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False,  True, False,  True, False,  True, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
        True, False,  True, False,  True, False,  True,  True, False,
       False, False]), array([False, False, False,  True, False, False,  True, False, False,
        True, False,  True, False,  True, False,  True,  True, False,
       False, False]), array([False, False, False,  True, False,  True,  True, False, False,
        True, False,  True, False,  True, False,  True,  True, False,
       False, False]), array([False, False,  True,  True, False,  True,  True, False, False,
        True, False,  True, False,  True, False,  True,  True, False,
       False, False]), array([False, False,  True,  True, False,  True,  True, False, False,
        True, False,  True, False,  True, False,  True,  True, False,
        True, False]), array([False, False,  True,  True, False,  True,  True,  True, False,
        True, False,  True, False,  True,  True,  True,  True, False,
        True, False]), array([False, False,  True,  True, False,  True,  True,  True, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True, False,  True,  True, False,  True,  True,  True, False,
        True,  True,  True, False,  True,  True,  True,  True, False,
        True, False]), array([ True, False,  True,  True, False,  True,  True,  True, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True, False,  True,  True, False,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [5, 2, 2, 8, 3, 4, 3, 3, 2, 3, 7, 10, 10, 4, 10, 29], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[ 0, 13, 11, 10, 15, 16,  6,  3, 18,  9],
        [10,  2, 15, 14,  5, 16, 18, 12, 17,  9],
        [ 6,  5,  4, 10, 19, 16,  2,  8, 18,  9],
        [ 1,  6,  5,  8,  2, 18,  7,  4, 10, 12],
        [14, 10,  5,  8,  2, 18,  7,  4, 12, 17],
        [14,  8, 19,  0,  2, 18,  7, 12,  4, 10],
        [14, 19, 17,  0, 12, 18,  7,  8,  1, 10],
        [14, 17,  4,  0,  8, 12,  7, 19,  1, 10],
        [ 8, 17,  4,  0, 19,  1, 12, 20, 20, 10],
        [19, 17, 12,  0, 20,  8, 20,  1, 20,  4],
        [12, 17, 19, 20,  8, 20,  1,  4, 20, 20],
        [20, 20, 20, 19, 20,  4,  8,  1, 12, 20],
        [20, 12, 20, 20, 20,  4,  1, 20, 19, 20],
        [20,  1, 20, 20, 20, 20, 20, 12, 19, 20],
        [20, 20,  1, 20, 20, 12, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 12, 20, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[ 0],
        [13],
        [11],
        [10],
        [15],
        [16],
        [ 6],
        [ 3],
        [18],
        [ 9],
        [10],
        [ 2],
        [15],
        [14],
        [ 5],
        [16],
        [18],
        [12],
        [17],
        [ 9],
        [ 6],
        [ 5],
        [ 4],
        [10],
        [19],
        [16],
        [ 2],
        [ 8],
        [18],
        [ 9],
        [ 1],
        [ 6],
        [ 5],
        [ 8],
        [ 2],
        [18],
        [ 7],
        [ 4],
        [10],
        [12],
        [14],
        [10],
        [ 5],
        [ 8],
        [ 2],
        [18],
        [ 7],
        [ 4],
        [12],
        [17],
        [14],
        [ 8],
        [19],
        [ 0],
        [ 2],
        [18],
        [ 7],
        [12],
        [ 4],
        [10],
        [14],
        [19],
        [17],
        [ 0],
        [12],
        [18],
        [ 7],
        [ 8],
        [ 1],
        [10],
        [14],
        [17],
        [ 4],
        [ 0],
        [ 8],
        [12],
        [ 7],
        [19],
        [ 1],
        [10],
        [ 8],
        [17],
        [ 4],
        [ 0],
        [19],
        [ 1],
        [12],
        [20],
        [20],
        [10],
        [19],
        [17],
        [12],
        [ 0],
        [20],
        [ 8],
        [20],
        [ 1],
        [20],
        [ 4],
        [12],
        [17],
        [19],
        [20],
        [ 8],
        [20],
        [ 1],
        [ 4],
        [20],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [ 4],
        [ 8],
        [ 1],
        [12],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [ 4],
        [ 1],
        [20],
        [19],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [19],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 5,  2,  2,  8,  3,  4,  3,  3,  2,  3,  7, 10, 10,  4, 10, 29]), torch.Size([16])
 ret : tensor([90, 86, 85, 84, 77, 75, 72, 70, 68, 67, 65, 59, 50, 41, 38, 29]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -28.9037,  -28.3321,  -27.0805,  -26.3906,  -25.6495,
         -24.8491,  -23.9790,  -40.6036,  -49.0949,  -57.7272,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[18, 2, 19], [10, 5], [11], [17], [4, 9, 7], [14, 12, 1], [16, 3], [6], [], [0, 8, 13, 15]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[2, 10, 11, 9, 4, 14, 16, 1, 12, 0], [15, 10, 11, 17, 12, 14, 16, 1, 7, 0], [18, 10, 11, 17, 3, 12, 16, 2, 8, 0], [18, 10, 11, 17, 7, 12, 16, 1, 13, 8], [18, 10, 6, 17, 7, 12, 2, 19, 1, 8], [18, 7, 19, 17, 15, 12, 2, 6, 13, 8], [9, 1, 5, 7, 2, 12, 13, 6, 15, 8], [2, 5, 1, 13, 9, 19, 3, 6, 15, 8], [2, 5, 13, 7, 9, 1, 3, 6, 19, 15], [2, 13, 15, 20, 9, 1, 3, 6, 19, 7], [2, 19, 13, 20, 7, 1, 3, 6, 15, 20], [2, 20, 20, 15, 7, 1, 3, 20, 19, 13], [2, 15, 19, 20, 7, 1, 20, 20, 20, 13], [20, 20, 19, 20, 7, 1, 20, 15, 20, 13], [19, 20, 20, 20, 7, 20, 20, 20, 15, 13], [19, 20, 20, 15, 20, 20, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 15]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 2, 5, 6, 9, 3, 7, 8, 0, 4]), array([1, 2, 3, 6, 9, 4, 7, 0, 8, 5]), array([0, 1, 2, 3, 5, 6, 7, 4, 8, 9]), array([0, 1, 3, 5, 9, 8, 7, 6, 2, 4]), array([0, 3, 5, 9, 4, 8, 1, 2, 7, 6]), array([5, 7, 9, 4, 8, 3, 1, 0, 2, 6]), array([7, 9, 2, 3, 8, 6, 1, 4, 0, 5]), array([0, 1, 4, 6, 7, 8, 3, 5, 9, 2]), array([0, 4, 5, 6, 7, 9, 2, 8, 1, 3]), array([0, 5, 6, 7, 8, 2, 4, 1, 3, 9]), array([0, 4, 5, 6, 8, 3, 9, 2, 7, 1]), array([0, 4, 5, 9, 2, 1, 3, 7, 6, 8]), array([4, 5, 9, 2, 7, 8, 6, 1, 0, 3]), array([4, 9, 8, 0, 6, 7, 2, 1, 5, 3]), array([0, 3, 4, 1, 5, 9, 2, 6, 7, 8]), array([9, 2, 5, 4, 0, 8, 6, 1, 3, 7])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
       False, False,  True, False, False,  True, False,  True, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
       False,  True,  True, False, False,  True, False,  True, False,
       False, False]), array([ True, False, False, False,  True, False, False, False, False,
       False,  True,  True, False, False,  True, False,  True,  True,
        True, False]), array([ True, False, False, False,  True, False, False, False, False,
       False,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True, False, False, False,  True, False, False, False,  True,
       False,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True, False, False, False,  True,  True, False, False,  True,
       False,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True, False, False, False,  True,  True, False, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True, False, False, False,  True,  True,  True, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True, False,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True, False,  True, False,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True])], 17
 next_t : [11, 4, 2, 4, 2, 3, 3, 5, 2, 2, 2, 6, 2, 2, 2, 2, 10], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 2, 10, 11,  9,  4, 14, 16,  1, 12,  0],
        [15, 10, 11, 17, 12, 14, 16,  1,  7,  0],
        [18, 10, 11, 17,  3, 12, 16,  2,  8,  0],
        [18, 10, 11, 17,  7, 12, 16,  1, 13,  8],
        [18, 10,  6, 17,  7, 12,  2, 19,  1,  8],
        [18,  7, 19, 17, 15, 12,  2,  6, 13,  8],
        [ 9,  1,  5,  7,  2, 12, 13,  6, 15,  8],
        [ 2,  5,  1, 13,  9, 19,  3,  6, 15,  8],
        [ 2,  5, 13,  7,  9,  1,  3,  6, 19, 15],
        [ 2, 13, 15, 20,  9,  1,  3,  6, 19,  7],
        [ 2, 19, 13, 20,  7,  1,  3,  6, 15, 20],
        [ 2, 20, 20, 15,  7,  1,  3, 20, 19, 13],
        [ 2, 15, 19, 20,  7,  1, 20, 20, 20, 13],
        [20, 20, 19, 20,  7,  1, 20, 15, 20, 13],
        [19, 20, 20, 20,  7, 20, 20, 20, 15, 13],
        [19, 20, 20, 15, 20, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20, 20, 20, 15]]), torch.Size([17, 10])
 all_action : tensor([[ 2],
        [10],
        [11],
        [ 9],
        [ 4],
        [14],
        [16],
        [ 1],
        [12],
        [ 0],
        [15],
        [10],
        [11],
        [17],
        [12],
        [14],
        [16],
        [ 1],
        [ 7],
        [ 0],
        [18],
        [10],
        [11],
        [17],
        [ 3],
        [12],
        [16],
        [ 2],
        [ 8],
        [ 0],
        [18],
        [10],
        [11],
        [17],
        [ 7],
        [12],
        [16],
        [ 1],
        [13],
        [ 8],
        [18],
        [10],
        [ 6],
        [17],
        [ 7],
        [12],
        [ 2],
        [19],
        [ 1],
        [ 8],
        [18],
        [ 7],
        [19],
        [17],
        [15],
        [12],
        [ 2],
        [ 6],
        [13],
        [ 8],
        [ 9],
        [ 1],
        [ 5],
        [ 7],
        [ 2],
        [12],
        [13],
        [ 6],
        [15],
        [ 8],
        [ 2],
        [ 5],
        [ 1],
        [13],
        [ 9],
        [19],
        [ 3],
        [ 6],
        [15],
        [ 8],
        [ 2],
        [ 5],
        [13],
        [ 7],
        [ 9],
        [ 1],
        [ 3],
        [ 6],
        [19],
        [15],
        [ 2],
        [13],
        [15],
        [20],
        [ 9],
        [ 1],
        [ 3],
        [ 6],
        [19],
        [ 7],
        [ 2],
        [19],
        [13],
        [20],
        [ 7],
        [ 1],
        [ 3],
        [ 6],
        [15],
        [20],
        [ 2],
        [20],
        [20],
        [15],
        [ 7],
        [ 1],
        [ 3],
        [20],
        [19],
        [13],
        [ 2],
        [15],
        [19],
        [20],
        [ 7],
        [ 1],
        [20],
        [20],
        [20],
        [13],
        [20],
        [20],
        [19],
        [20],
        [ 7],
        [ 1],
        [20],
        [15],
        [20],
        [13],
        [19],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [15],
        [13],
        [19],
        [20],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [15]]), torch.Size([170, 1])
next_t : tensor([11,  4,  2,  4,  2,  3,  3,  5,  2,  2,  2,  6,  2,  2,  2,  2, 10]), torch.Size([17])
 ret : tensor([48, 38, 35, 34, 31, 30, 28, 26, 22, 21, 20, 19, 14, 13, 12, 11, 10]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -27.7259,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -49.0949,
         -57.7272,  -66.5234,  -75.5153,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[15, 6], [13, 19], [], [10], [3, 1], [4, 2, 16], [9, 18], [12, 7], [11, 14, 5], [0, 17, 8]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 18
 joint_action : [[15, 13, 6, 16, 19, 8, 9, 10, 1, 12], [15, 13, 17, 2, 3, 4, 5, 11, 10, 0], [8, 13, 16, 12, 3, 4, 7, 10, 19, 0], [6, 13, 17, 2, 3, 7, 19, 12, 11, 0], [6, 13, 1, 10, 17, 16, 7, 12, 11, 0], [6, 19, 17, 10, 14, 7, 8, 12, 11, 0], [6, 5, 19, 10, 17, 2, 16, 12, 11, 14], [6, 7, 18, 16, 8, 2, 5, 12, 11, 1], [18, 5, 8, 16, 19, 2, 7, 12, 11, 17], [1, 8, 14, 5, 16, 2, 19, 18, 17, 7], [18, 19, 20, 8, 1, 5, 16, 7, 14, 17], [20, 19, 18, 16, 1, 20, 8, 7, 5, 17], [20, 19, 20, 20, 1, 8, 16, 18, 5, 17], [20, 19, 16, 18, 1, 20, 20, 8, 5, 20], [20, 16, 20, 20, 20, 20, 18, 20, 5, 8], [20, 20, 16, 20, 20, 20, 20, 20, 18, 8], [20, 20, 20, 20, 20, 20, 18, 16, 20, 20], [20, 20, 20, 20, 20, 16, 20, 20, 20, 20]], 18
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 1, 2, 6, 5, 4, 8, 9, 3, 7]), array([1, 4, 5, 9, 7, 8, 6, 3, 0, 2]), array([1, 4, 9, 3, 6, 7, 0, 8, 2, 5]), array([0, 1, 7, 8, 9, 2, 3, 6, 4, 5]), array([0, 3, 7, 8, 9, 1, 4, 2, 5, 6]), array([0, 3, 7, 8, 4, 5, 9, 2, 6, 1]), array([0, 5, 7, 8, 9, 4, 3, 2, 6, 1]), array([5, 7, 8, 1, 4, 3, 0, 2, 6, 9]), array([5, 9, 8, 1, 7, 2, 4, 6, 3, 0]), array([4, 3, 9, 5, 0, 1, 6, 7, 8, 2]), array([1, 4, 7, 9, 6, 2, 3, 8, 5, 0]), array([1, 4, 9, 5, 7, 6, 8, 3, 0, 2]), array([1, 4, 8, 2, 3, 7, 9, 5, 0, 6]), array([8, 1, 6, 9, 5, 4, 0, 2, 3, 7]), array([9, 2, 8, 3, 7, 4, 1, 6, 5, 0]), array([7, 6, 4, 9, 1, 2, 0, 5, 3, 8]), array([5, 7, 2, 4, 3, 0, 8, 1, 6, 9])], 18
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
        True, False, False, False, False, False,  True, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
        True, False, False, False, False, False,  True, False, False,
       False, False]), array([False, False, False,  True,  True, False, False, False, False,
        True, False, False, False, False, False,  True, False, False,
       False, False]), array([False, False, False,  True,  True, False, False, False, False,
        True, False, False, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False,  True,  True, False, False, False, False,
        True, False, False, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False,  True,  True, False, False, False, False,
        True,  True, False, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False,  True,  True, False,  True, False, False,
        True,  True, False, False,  True, False,  True, False, False,
       False, False]), array([ True, False, False,  True,  True, False,  True, False, False,
        True,  True,  True,  True,  True, False,  True, False, False,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False, False,
        True,  True,  True,  True,  True, False,  True, False, False,
       False, False]), array([ True, False,  True,  True,  True, False,  True, False, False,
        True,  True,  True,  True,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True,  True,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False, False,
       False, False]), array([ True, False,  True,  True,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False, False]), array([ True,  True,  True,  True,  True, False,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 18
 next_t : [9, 4, 4, 2, 2, 2, 3, 4, 2, 2, 12, 5, 3, 4, 6, 9, 27, 32], 18
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 18
iteration : 18
joint_action : tensor([[15, 13,  6, 16, 19,  8,  9, 10,  1, 12],
        [15, 13, 17,  2,  3,  4,  5, 11, 10,  0],
        [ 8, 13, 16, 12,  3,  4,  7, 10, 19,  0],
        [ 6, 13, 17,  2,  3,  7, 19, 12, 11,  0],
        [ 6, 13,  1, 10, 17, 16,  7, 12, 11,  0],
        [ 6, 19, 17, 10, 14,  7,  8, 12, 11,  0],
        [ 6,  5, 19, 10, 17,  2, 16, 12, 11, 14],
        [ 6,  7, 18, 16,  8,  2,  5, 12, 11,  1],
        [18,  5,  8, 16, 19,  2,  7, 12, 11, 17],
        [ 1,  8, 14,  5, 16,  2, 19, 18, 17,  7],
        [18, 19, 20,  8,  1,  5, 16,  7, 14, 17],
        [20, 19, 18, 16,  1, 20,  8,  7,  5, 17],
        [20, 19, 20, 20,  1,  8, 16, 18,  5, 17],
        [20, 19, 16, 18,  1, 20, 20,  8,  5, 20],
        [20, 16, 20, 20, 20, 20, 18, 20,  5,  8],
        [20, 20, 16, 20, 20, 20, 20, 20, 18,  8],
        [20, 20, 20, 20, 20, 20, 18, 16, 20, 20],
        [20, 20, 20, 20, 20, 16, 20, 20, 20, 20]]), torch.Size([18, 10])
 all_action : tensor([[15],
        [13],
        [ 6],
        [16],
        [19],
        [ 8],
        [ 9],
        [10],
        [ 1],
        [12],
        [15],
        [13],
        [17],
        [ 2],
        [ 3],
        [ 4],
        [ 5],
        [11],
        [10],
        [ 0],
        [ 8],
        [13],
        [16],
        [12],
        [ 3],
        [ 4],
        [ 7],
        [10],
        [19],
        [ 0],
        [ 6],
        [13],
        [17],
        [ 2],
        [ 3],
        [ 7],
        [19],
        [12],
        [11],
        [ 0],
        [ 6],
        [13],
        [ 1],
        [10],
        [17],
        [16],
        [ 7],
        [12],
        [11],
        [ 0],
        [ 6],
        [19],
        [17],
        [10],
        [14],
        [ 7],
        [ 8],
        [12],
        [11],
        [ 0],
        [ 6],
        [ 5],
        [19],
        [10],
        [17],
        [ 2],
        [16],
        [12],
        [11],
        [14],
        [ 6],
        [ 7],
        [18],
        [16],
        [ 8],
        [ 2],
        [ 5],
        [12],
        [11],
        [ 1],
        [18],
        [ 5],
        [ 8],
        [16],
        [19],
        [ 2],
        [ 7],
        [12],
        [11],
        [17],
        [ 1],
        [ 8],
        [14],
        [ 5],
        [16],
        [ 2],
        [19],
        [18],
        [17],
        [ 7],
        [18],
        [19],
        [20],
        [ 8],
        [ 1],
        [ 5],
        [16],
        [ 7],
        [14],
        [17],
        [20],
        [19],
        [18],
        [16],
        [ 1],
        [20],
        [ 8],
        [ 7],
        [ 5],
        [17],
        [20],
        [19],
        [20],
        [20],
        [ 1],
        [ 8],
        [16],
        [18],
        [ 5],
        [17],
        [20],
        [19],
        [16],
        [18],
        [ 1],
        [20],
        [20],
        [ 8],
        [ 5],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20],
        [ 5],
        [ 8],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20]]), torch.Size([180, 1])
next_t : tensor([ 9,  4,  4,  2,  2,  2,  3,  4,  2,  2, 12,  5,  3,  4,  6,  9, 27, 32]), torch.Size([18])
 ret : tensor([112, 105, 103, 101, 100,  99,  98,  96,  93,  92,  91,  80,  76,  74,
         71,  66,  58,  32]), torch.Size([18])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([180, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([180, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -26.3906,  -25.6495,  -23.9790,  -32.2362,  -40.6036,
         -49.0949,  -57.7272,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([18])
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:11<00:00, 11.21s/it]
[[0, 8], [1, 4], [2, 15], [13, 6, 11], [19], [5], [], [7, 14, 18], [10, 12], [9, 3, 16, 17]]
  0%|                                                                                                                                                                      | 0/5 [00:00<?, ?it/s]
[[4, 18], [7], [12, 13, 5], [6], [14, 9], [2, 0, 1], [17, 11, 10], [15], [3, 19], [8, 16]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[4, 7, 12, 11, 16, 17, 8, 9, 3, 18], [4, 7, 13, 14, 18, 1, 16, 6, 15, 8], [18, 7, 13, 10, 15, 1, 11, 9, 2, 8], [18, 1, 13, 19, 6, 5, 17, 16, 15, 8], [18, 16, 5, 14, 11, 2, 17, 15, 19, 8], [18, 1, 11, 15, 16, 2, 6, 9, 10, 8], [6, 15, 5, 19, 14, 9, 10, 16, 11, 8], [11, 1, 5, 6, 14, 0, 16, 15, 10, 9], [9, 11, 1, 6, 14, 0, 16, 15, 10, 19], [9, 11, 10, 6, 1, 0, 19, 15, 20, 16], [11, 20, 20, 20, 9, 1, 10, 20, 19, 16], [20, 20, 20, 10, 20, 1, 11, 20, 19, 16], [20, 10, 20, 20, 20, 11, 20, 20, 19, 16], [20, 20, 20, 20, 10, 11, 20, 20, 19, 20], [20, 20, 20, 20, 20, 20, 11, 10, 20, 20], [20, 20, 20, 20, 20, 20, 10, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 1, 9, 6, 3, 8, 5, 2, 7, 4]), array([1, 2, 0, 9, 4, 3, 8, 6, 5, 7]), array([0, 2, 9, 6, 4, 1, 8, 3, 7, 5]), array([0, 6, 9, 8, 1, 7, 4, 5, 2, 3]), array([0, 5, 9, 7, 6, 8, 1, 3, 2, 4]), array([9, 0, 2, 8, 7, 6, 5, 3, 4, 1]), array([2, 8, 9, 1, 7, 4, 6, 0, 5, 3]), array([3, 4, 5, 7, 2, 6, 8, 0, 1, 9]), array([3, 5, 7, 2, 0, 1, 4, 6, 9, 8]), array([6, 5, 8, 9, 0, 4, 3, 2, 1, 7]), array([5, 8, 9, 6, 3, 4, 2, 1, 0, 7]), array([8, 9, 5, 1, 7, 4, 2, 3, 0, 6]), array([8, 4, 5, 0, 6, 9, 3, 2, 7, 1]), array([6, 7, 9, 3, 8, 4, 5, 0, 2, 1]), array([6, 2, 9, 0, 1, 8, 7, 5, 4, 3])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False,  True,  True, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False,  True,  True, False, False,  True, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False,  True,  True, False, False,  True, False,
       False, False, False,  True,  True, False, False, False, False,
       False, False]), array([False, False, False,  True,  True, False, False,  True, False,
       False, False, False,  True,  True, False, False, False,  True,
       False, False]), array([False, False,  True,  True,  True, False, False,  True, False,
       False, False, False,  True,  True, False, False, False,  True,
        True, False]), array([False, False,  True,  True,  True, False, False,  True,  True,
       False, False, False,  True,  True, False, False, False,  True,
        True, False]), array([False, False,  True,  True,  True,  True, False,  True,  True,
       False, False, False,  True,  True, False, False, False,  True,
        True, False]), array([False, False,  True,  True,  True,  True, False,  True,  True,
       False, False, False,  True,  True,  True, False, False,  True,
        True, False]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
       False, False, False,  True,  True,  True,  True, False,  True,
        True, False]), array([ True, False,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [17, 2, 8, 2, 5, 2, 3, 10, 7, 4, 8, 6, 2, 3, 21, 20], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[ 4,  7, 12, 11, 16, 17,  8,  9,  3, 18],
        [ 4,  7, 13, 14, 18,  1, 16,  6, 15,  8],
        [18,  7, 13, 10, 15,  1, 11,  9,  2,  8],
        [18,  1, 13, 19,  6,  5, 17, 16, 15,  8],
        [18, 16,  5, 14, 11,  2, 17, 15, 19,  8],
        [18,  1, 11, 15, 16,  2,  6,  9, 10,  8],
        [ 6, 15,  5, 19, 14,  9, 10, 16, 11,  8],
        [11,  1,  5,  6, 14,  0, 16, 15, 10,  9],
        [ 9, 11,  1,  6, 14,  0, 16, 15, 10, 19],
        [ 9, 11, 10,  6,  1,  0, 19, 15, 20, 16],
        [11, 20, 20, 20,  9,  1, 10, 20, 19, 16],
        [20, 20, 20, 10, 20,  1, 11, 20, 19, 16],
        [20, 10, 20, 20, 20, 11, 20, 20, 19, 16],
        [20, 20, 20, 20, 10, 11, 20, 20, 19, 20],
        [20, 20, 20, 20, 20, 20, 11, 10, 20, 20],
        [20, 20, 20, 20, 20, 20, 10, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[ 4],
        [ 7],
        [12],
        [11],
        [16],
        [17],
        [ 8],
        [ 9],
        [ 3],
        [18],
        [ 4],
        [ 7],
        [13],
        [14],
        [18],
        [ 1],
        [16],
        [ 6],
        [15],
        [ 8],
        [18],
        [ 7],
        [13],
        [10],
        [15],
        [ 1],
        [11],
        [ 9],
        [ 2],
        [ 8],
        [18],
        [ 1],
        [13],
        [19],
        [ 6],
        [ 5],
        [17],
        [16],
        [15],
        [ 8],
        [18],
        [16],
        [ 5],
        [14],
        [11],
        [ 2],
        [17],
        [15],
        [19],
        [ 8],
        [18],
        [ 1],
        [11],
        [15],
        [16],
        [ 2],
        [ 6],
        [ 9],
        [10],
        [ 8],
        [ 6],
        [15],
        [ 5],
        [19],
        [14],
        [ 9],
        [10],
        [16],
        [11],
        [ 8],
        [11],
        [ 1],
        [ 5],
        [ 6],
        [14],
        [ 0],
        [16],
        [15],
        [10],
        [ 9],
        [ 9],
        [11],
        [ 1],
        [ 6],
        [14],
        [ 0],
        [16],
        [15],
        [10],
        [19],
        [ 9],
        [11],
        [10],
        [ 6],
        [ 1],
        [ 0],
        [19],
        [15],
        [20],
        [16],
        [11],
        [20],
        [20],
        [20],
        [ 9],
        [ 1],
        [10],
        [20],
        [19],
        [16],
        [20],
        [20],
        [20],
        [10],
        [20],
        [ 1],
        [11],
        [20],
        [19],
        [16],
        [20],
        [10],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [19],
        [16],
        [20],
        [20],
        [20],
        [20],
        [10],
        [11],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [10],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [10],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([17,  2,  8,  2,  5,  2,  3, 10,  7,  4,  8,  6,  2,  3, 21, 20]), torch.Size([16])
 ret : tensor([105,  89,  88,  81,  80,  76,  75,  73,  64,  58,  55,  48,  43,  42,
         40,  20]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.4444,  -28.9037,  -28.3321,  -27.7259,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -57.7272,  -66.5234,
         -75.5153,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[9], [0, 12, 16], [14], [3, 5], [10, 4, 18], [6, 7], [19, 11, 8], [17], [15], [13, 1, 2]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[11, 8, 1, 4, 10, 18, 12, 7, 15, 13], [17, 1, 14, 16, 4, 9, 19, 11, 15, 13], [16, 0, 14, 3, 4, 9, 19, 7, 15, 2], [1, 0, 14, 3, 9, 8, 19, 7, 5, 18], [5, 0, 16, 3, 18, 6, 19, 17, 12, 2], [5, 0, 11, 9, 18, 6, 19, 17, 12, 2], [2, 12, 11, 8, 18, 6, 19, 17, 7, 1], [5, 12, 9, 7, 18, 2, 11, 16, 8, 1], [9, 12, 2, 5, 16, 8, 11, 20, 7, 1], [9, 12, 16, 5, 20, 8, 11, 7, 20, 2], [9, 12, 8, 5, 16, 7, 20, 20, 20, 2], [9, 20, 8, 5, 20, 7, 16, 20, 20, 2], [9, 20, 20, 16, 20, 7, 8, 20, 20, 2], [9, 16, 20, 20, 20, 20, 8, 20, 20, 2], [20, 16, 20, 20, 20, 20, 8, 20, 20, 2], [20, 20, 20, 20, 20, 20, 8, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([8, 9, 0, 4, 1, 5, 3, 7, 2, 6]), array([2, 4, 6, 8, 5, 0, 1, 7, 3, 9]), array([1, 2, 3, 6, 8, 7, 5, 0, 4, 9]), array([1, 3, 6, 8, 0, 4, 9, 7, 2, 5]), array([1, 4, 5, 6, 7, 2, 8, 9, 3, 0]), array([4, 5, 6, 7, 2, 1, 9, 0, 8, 3]), array([1, 4, 9, 3, 0, 2, 6, 5, 7, 8]), array([1, 6, 9, 8, 3, 4, 5, 2, 0, 7]), array([0, 1, 3, 6, 7, 2, 9, 5, 8, 4]), array([0, 1, 3, 9, 2, 5, 4, 8, 7, 6]), array([0, 3, 5, 9, 2, 6, 8, 7, 1, 4]), array([0, 5, 9, 3, 6, 2, 1, 7, 8, 4]), array([0, 6, 9, 1, 8, 7, 3, 5, 2, 4]), array([1, 6, 9, 2, 4, 5, 0, 3, 8, 7]), array([6, 4, 1, 5, 8, 9, 7, 3, 2, 0])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False,  True, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False,  True, False, False,  True, False,  True, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
       False,  True, False, False,  True,  True,  True, False, False,
       False, False]), array([False, False, False,  True,  True, False, False, False, False,
       False,  True, False, False,  True,  True,  True, False, False,
       False, False]), array([ True, False, False,  True,  True, False, False, False, False,
       False,  True, False, False,  True,  True,  True, False, False,
       False, False]), array([ True, False, False,  True,  True, False,  True, False, False,
       False,  True, False, False,  True,  True,  True, False,  True,
       False,  True]), array([ True, False, False,  True,  True, False,  True, False, False,
       False,  True, False, False,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False,  True,  True, False,  True, False, False,
       False,  True, False, False,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False,  True,  True, False,  True, False, False,
       False,  True,  True, False,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False,  True,  True, False,  True, False, False,
       False,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True, False, False,
       False,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True, False,
       False,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [3, 9, 2, 4, 3, 2, 3, 3, 4, 2, 4, 2, 3, 3, 5, 3], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[11,  8,  1,  4, 10, 18, 12,  7, 15, 13],
        [17,  1, 14, 16,  4,  9, 19, 11, 15, 13],
        [16,  0, 14,  3,  4,  9, 19,  7, 15,  2],
        [ 1,  0, 14,  3,  9,  8, 19,  7,  5, 18],
        [ 5,  0, 16,  3, 18,  6, 19, 17, 12,  2],
        [ 5,  0, 11,  9, 18,  6, 19, 17, 12,  2],
        [ 2, 12, 11,  8, 18,  6, 19, 17,  7,  1],
        [ 5, 12,  9,  7, 18,  2, 11, 16,  8,  1],
        [ 9, 12,  2,  5, 16,  8, 11, 20,  7,  1],
        [ 9, 12, 16,  5, 20,  8, 11,  7, 20,  2],
        [ 9, 12,  8,  5, 16,  7, 20, 20, 20,  2],
        [ 9, 20,  8,  5, 20,  7, 16, 20, 20,  2],
        [ 9, 20, 20, 16, 20,  7,  8, 20, 20,  2],
        [ 9, 16, 20, 20, 20, 20,  8, 20, 20,  2],
        [20, 16, 20, 20, 20, 20,  8, 20, 20,  2],
        [20, 20, 20, 20, 20, 20,  8, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[11],
        [ 8],
        [ 1],
        [ 4],
        [10],
        [18],
        [12],
        [ 7],
        [15],
        [13],
        [17],
        [ 1],
        [14],
        [16],
        [ 4],
        [ 9],
        [19],
        [11],
        [15],
        [13],
        [16],
        [ 0],
        [14],
        [ 3],
        [ 4],
        [ 9],
        [19],
        [ 7],
        [15],
        [ 2],
        [ 1],
        [ 0],
        [14],
        [ 3],
        [ 9],
        [ 8],
        [19],
        [ 7],
        [ 5],
        [18],
        [ 5],
        [ 0],
        [16],
        [ 3],
        [18],
        [ 6],
        [19],
        [17],
        [12],
        [ 2],
        [ 5],
        [ 0],
        [11],
        [ 9],
        [18],
        [ 6],
        [19],
        [17],
        [12],
        [ 2],
        [ 2],
        [12],
        [11],
        [ 8],
        [18],
        [ 6],
        [19],
        [17],
        [ 7],
        [ 1],
        [ 5],
        [12],
        [ 9],
        [ 7],
        [18],
        [ 2],
        [11],
        [16],
        [ 8],
        [ 1],
        [ 9],
        [12],
        [ 2],
        [ 5],
        [16],
        [ 8],
        [11],
        [20],
        [ 7],
        [ 1],
        [ 9],
        [12],
        [16],
        [ 5],
        [20],
        [ 8],
        [11],
        [ 7],
        [20],
        [ 2],
        [ 9],
        [12],
        [ 8],
        [ 5],
        [16],
        [ 7],
        [20],
        [20],
        [20],
        [ 2],
        [ 9],
        [20],
        [ 8],
        [ 5],
        [20],
        [ 7],
        [16],
        [20],
        [20],
        [ 2],
        [ 9],
        [20],
        [20],
        [16],
        [20],
        [ 7],
        [ 8],
        [20],
        [20],
        [ 2],
        [ 9],
        [16],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [ 2],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [ 2],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([3, 9, 2, 4, 3, 2, 3, 3, 4, 2, 4, 2, 3, 3, 5, 3]), torch.Size([16])
 ret : tensor([40, 38, 30, 29, 26, 24, 23, 21, 19, 16, 15, 12, 11,  9,  7,  3]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.3321,  -27.7259,  -27.0805,
         -26.3906,  -23.9790,  -32.2362,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[15, 13], [14, 19, 8], [5, 7], [16], [6, 17], [11, 10], [], [3, 0], [4, 1, 12], [9, 2, 18]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[10, 8, 5, 1, 19, 11, 14, 3, 18, 9], [15, 14, 5, 1, 4, 11, 6, 19, 17, 9], [15, 14, 5, 1, 8, 11, 10, 18, 17, 7], [15, 14, 5, 12, 6, 10, 2, 0, 4, 19], [15, 14, 5, 12, 6, 10, 1, 17, 4, 8], [17, 14, 12, 18, 6, 10, 19, 1, 4, 2], [17, 14, 12, 1, 16, 8, 18, 19, 4, 2], [12, 7, 18, 16, 17, 19, 13, 1, 4, 2], [1, 18, 13, 7, 17, 12, 19, 8, 4, 2], [18, 13, 8, 7, 17, 12, 20, 19, 1, 2], [20, 8, 20, 12, 17, 7, 19, 18, 1, 13], [13, 20, 7, 20, 8, 20, 19, 12, 20, 18], [13, 20, 20, 20, 20, 7, 20, 12, 8, 19], [20, 19, 7, 20, 20, 20, 20, 20, 12, 8], [8, 19, 20, 20, 20, 20, 20, 20, 12, 20], [20, 20, 20, 20, 20, 20, 20, 20, 12, 8], [20, 8, 20, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 5, 9, 6, 8, 3, 4, 7, 1, 0]), array([0, 1, 2, 5, 8, 4, 7, 6, 9, 3]), array([0, 1, 2, 4, 3, 8, 6, 9, 7, 5]), array([0, 1, 2, 4, 5, 8, 3, 6, 7, 9]), array([1, 4, 5, 8, 6, 9, 2, 0, 7, 3]), array([1, 8, 9, 4, 6, 2, 3, 5, 7, 0]), array([8, 9, 2, 7, 3, 4, 1, 6, 0, 5]), array([4, 8, 9, 3, 1, 5, 0, 6, 2, 7]), array([4, 9, 5, 3, 7, 0, 2, 1, 8, 6]), array([4, 8, 3, 1, 6, 9, 7, 5, 0, 2]), array([4, 0, 7, 9, 6, 2, 5, 8, 3, 1]), array([0, 7, 9, 5, 8, 3, 6, 4, 1, 2]), array([2, 1, 8, 9, 5, 7, 3, 0, 4, 6]), array([1, 8, 0, 5, 7, 4, 6, 3, 9, 2]), array([8, 9, 1, 6, 4, 7, 2, 0, 3, 5]), array([1, 6, 7, 2, 4, 5, 0, 9, 3, 8])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
        True, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
        True, False,  True, False, False, False, False, False, False,
       False, False]), array([ True, False, False,  True, False, False, False, False, False,
        True, False,  True, False, False, False, False, False, False,
       False, False]), array([ True, False, False,  True, False,  True, False, False, False,
        True, False,  True, False, False, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False,  True,  True, False, False,
        True,  True,  True, False, False, False,  True, False, False,
       False, False]), array([ True, False, False,  True, False,  True,  True, False, False,
        True,  True,  True, False, False,  True,  True, False, False,
       False, False]), array([ True, False, False,  True, False,  True,  True, False, False,
        True,  True,  True, False, False,  True,  True,  True, False,
       False, False]), array([ True, False, False,  True,  True,  True,  True, False, False,
        True,  True,  True, False, False,  True,  True,  True, False,
       False, False]), array([ True, False,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False, False,  True,  True,  True, False,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False, False,  True,  True,  True,  True,
       False, False]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False, False,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [5, 3, 2, 3, 3, 2, 2, 5, 2, 3, 3, 6, 9, 22, 6, 2, 30], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[10,  8,  5,  1, 19, 11, 14,  3, 18,  9],
        [15, 14,  5,  1,  4, 11,  6, 19, 17,  9],
        [15, 14,  5,  1,  8, 11, 10, 18, 17,  7],
        [15, 14,  5, 12,  6, 10,  2,  0,  4, 19],
        [15, 14,  5, 12,  6, 10,  1, 17,  4,  8],
        [17, 14, 12, 18,  6, 10, 19,  1,  4,  2],
        [17, 14, 12,  1, 16,  8, 18, 19,  4,  2],
        [12,  7, 18, 16, 17, 19, 13,  1,  4,  2],
        [ 1, 18, 13,  7, 17, 12, 19,  8,  4,  2],
        [18, 13,  8,  7, 17, 12, 20, 19,  1,  2],
        [20,  8, 20, 12, 17,  7, 19, 18,  1, 13],
        [13, 20,  7, 20,  8, 20, 19, 12, 20, 18],
        [13, 20, 20, 20, 20,  7, 20, 12,  8, 19],
        [20, 19,  7, 20, 20, 20, 20, 20, 12,  8],
        [ 8, 19, 20, 20, 20, 20, 20, 20, 12, 20],
        [20, 20, 20, 20, 20, 20, 20, 20, 12,  8],
        [20,  8, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[10],
        [ 8],
        [ 5],
        [ 1],
        [19],
        [11],
        [14],
        [ 3],
        [18],
        [ 9],
        [15],
        [14],
        [ 5],
        [ 1],
        [ 4],
        [11],
        [ 6],
        [19],
        [17],
        [ 9],
        [15],
        [14],
        [ 5],
        [ 1],
        [ 8],
        [11],
        [10],
        [18],
        [17],
        [ 7],
        [15],
        [14],
        [ 5],
        [12],
        [ 6],
        [10],
        [ 2],
        [ 0],
        [ 4],
        [19],
        [15],
        [14],
        [ 5],
        [12],
        [ 6],
        [10],
        [ 1],
        [17],
        [ 4],
        [ 8],
        [17],
        [14],
        [12],
        [18],
        [ 6],
        [10],
        [19],
        [ 1],
        [ 4],
        [ 2],
        [17],
        [14],
        [12],
        [ 1],
        [16],
        [ 8],
        [18],
        [19],
        [ 4],
        [ 2],
        [12],
        [ 7],
        [18],
        [16],
        [17],
        [19],
        [13],
        [ 1],
        [ 4],
        [ 2],
        [ 1],
        [18],
        [13],
        [ 7],
        [17],
        [12],
        [19],
        [ 8],
        [ 4],
        [ 2],
        [18],
        [13],
        [ 8],
        [ 7],
        [17],
        [12],
        [20],
        [19],
        [ 1],
        [ 2],
        [20],
        [ 8],
        [20],
        [12],
        [17],
        [ 7],
        [19],
        [18],
        [ 1],
        [13],
        [13],
        [20],
        [ 7],
        [20],
        [ 8],
        [20],
        [19],
        [12],
        [20],
        [18],
        [13],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [12],
        [ 8],
        [19],
        [20],
        [19],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [ 8],
        [ 8],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [ 8],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 5,  3,  2,  3,  3,  2,  2,  5,  2,  3,  3,  6,  9, 22,  6,  2, 30]), torch.Size([17])
 ret : tensor([92, 88, 86, 85, 83, 81, 80, 79, 75, 74, 72, 70, 65, 57, 36, 31, 30]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[3], [14, 0], [18, 19, 2], [6, 8, 16], [11, 10, 7], [1], [17, 5], [13], [12], [9, 4, 15]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[13, 14, 19, 12, 11, 5, 6, 8, 18, 1], [13, 19, 7, 6, 11, 5, 17, 0, 8, 9], [0, 5, 3, 15, 11, 13, 17, 12, 7, 9], [3, 19, 7, 2, 12, 13, 17, 15, 18, 4], [3, 15, 18, 19, 13, 7, 5, 1, 12, 4], [3, 2, 18, 13, 10, 8, 5, 19, 12, 7], [3, 7, 18, 8, 10, 16, 2, 15, 12, 0], [16, 0, 18, 8, 10, 2, 12, 13, 7, 1], [12, 0, 19, 16, 10, 2, 15, 13, 1, 7], [15, 0, 19, 16, 7, 1, 20, 13, 12, 2], [2, 7, 19, 16, 15, 1, 20, 20, 12, 20], [20, 7, 20, 16, 20, 1, 20, 2, 12, 15], [20, 7, 20, 20, 20, 1, 20, 2, 12, 15], [20, 20, 2, 20, 7, 20, 20, 20, 20, 15], [20, 20, 20, 20, 20, 20, 20, 7, 20, 15], [20, 20, 20, 20, 7, 20, 20, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([4, 8, 9, 2, 3, 0, 5, 6, 1, 7]), array([4, 6, 9, 7, 1, 5, 2, 8, 0, 3]), array([6, 1, 9, 5, 2, 8, 7, 0, 4, 3]), array([9, 5, 6, 0, 1, 4, 7, 2, 3, 8]), array([0, 2, 6, 7, 5, 8, 1, 4, 3, 9]), array([0, 2, 4, 9, 3, 6, 1, 8, 5, 7]), array([2, 3, 4, 5, 7, 0, 6, 8, 9, 1]), array([1, 4, 7, 2, 0, 8, 6, 9, 5, 3]), array([1, 2, 3, 7, 5, 9, 0, 4, 8, 6]), array([2, 3, 5, 8, 0, 4, 1, 9, 6, 7]), array([3, 5, 8, 9, 7, 1, 2, 0, 4, 6]), array([5, 8, 1, 9, 7, 2, 4, 0, 6, 3]), array([2, 9, 4, 8, 3, 0, 5, 1, 7, 6]), array([7, 9, 5, 2, 6, 3, 0, 1, 8, 4]), array([4, 0, 9, 1, 8, 3, 7, 6, 2, 5])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
        True, False,  True, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
        True, False,  True, False, False,  True, False, False,  True,
       False, False]), array([False, False, False, False,  True, False,  True, False, False,
        True, False,  True, False, False,  True, False, False,  True,
       False, False]), array([False, False, False, False,  True,  True,  True, False, False,
        True, False,  True, False, False,  True, False, False,  True,
       False, False]), array([False, False, False,  True,  True,  True,  True, False, False,
        True, False,  True, False, False,  True, False, False,  True,
       False, False]), array([False, False, False,  True,  True,  True,  True, False,  True,
        True, False,  True, False, False,  True, False, False,  True,
        True, False]), array([False, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False, False,  True, False, False,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False, False,  True,
        True, False]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False, False,  True,
        True,  True]), array([ True, False, False,  True,  True,  True,  True, False,  True,
        True,  True,  True, False,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True, False,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True, False,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 16
 next_t : [6, 6, 3, 5, 9, 3, 2, 7, 2, 5, 5, 2, 4, 3, 22, 28], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[13, 14, 19, 12, 11,  5,  6,  8, 18,  1],
        [13, 19,  7,  6, 11,  5, 17,  0,  8,  9],
        [ 0,  5,  3, 15, 11, 13, 17, 12,  7,  9],
        [ 3, 19,  7,  2, 12, 13, 17, 15, 18,  4],
        [ 3, 15, 18, 19, 13,  7,  5,  1, 12,  4],
        [ 3,  2, 18, 13, 10,  8,  5, 19, 12,  7],
        [ 3,  7, 18,  8, 10, 16,  2, 15, 12,  0],
        [16,  0, 18,  8, 10,  2, 12, 13,  7,  1],
        [12,  0, 19, 16, 10,  2, 15, 13,  1,  7],
        [15,  0, 19, 16,  7,  1, 20, 13, 12,  2],
        [ 2,  7, 19, 16, 15,  1, 20, 20, 12, 20],
        [20,  7, 20, 16, 20,  1, 20,  2, 12, 15],
        [20,  7, 20, 20, 20,  1, 20,  2, 12, 15],
        [20, 20,  2, 20,  7, 20, 20, 20, 20, 15],
        [20, 20, 20, 20, 20, 20, 20,  7, 20, 15],
        [20, 20, 20, 20,  7, 20, 20, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[13],
        [14],
        [19],
        [12],
        [11],
        [ 5],
        [ 6],
        [ 8],
        [18],
        [ 1],
        [13],
        [19],
        [ 7],
        [ 6],
        [11],
        [ 5],
        [17],
        [ 0],
        [ 8],
        [ 9],
        [ 0],
        [ 5],
        [ 3],
        [15],
        [11],
        [13],
        [17],
        [12],
        [ 7],
        [ 9],
        [ 3],
        [19],
        [ 7],
        [ 2],
        [12],
        [13],
        [17],
        [15],
        [18],
        [ 4],
        [ 3],
        [15],
        [18],
        [19],
        [13],
        [ 7],
        [ 5],
        [ 1],
        [12],
        [ 4],
        [ 3],
        [ 2],
        [18],
        [13],
        [10],
        [ 8],
        [ 5],
        [19],
        [12],
        [ 7],
        [ 3],
        [ 7],
        [18],
        [ 8],
        [10],
        [16],
        [ 2],
        [15],
        [12],
        [ 0],
        [16],
        [ 0],
        [18],
        [ 8],
        [10],
        [ 2],
        [12],
        [13],
        [ 7],
        [ 1],
        [12],
        [ 0],
        [19],
        [16],
        [10],
        [ 2],
        [15],
        [13],
        [ 1],
        [ 7],
        [15],
        [ 0],
        [19],
        [16],
        [ 7],
        [ 1],
        [20],
        [13],
        [12],
        [ 2],
        [ 2],
        [ 7],
        [19],
        [16],
        [15],
        [ 1],
        [20],
        [20],
        [12],
        [20],
        [20],
        [ 7],
        [20],
        [16],
        [20],
        [ 1],
        [20],
        [ 2],
        [12],
        [15],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [ 1],
        [20],
        [ 2],
        [12],
        [15],
        [20],
        [20],
        [ 2],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [15],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 6,  6,  3,  5,  9,  3,  2,  7,  2,  5,  5,  2,  4,  3, 22, 28]), torch.Size([16])
 ret : tensor([97, 92, 87, 85, 81, 73, 71, 70, 64, 63, 59, 55, 54, 51, 49, 28]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.3321,  -27.7259,  -27.0805,
         -26.3906,  -25.6495,  -23.9790,  -32.2362,  -49.0949,  -57.7272,
         -66.5234,  -84.7494,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
[[5], [15], [13], [12, 6], [4, 2], [3, 18], [14, 17, 8, 16], [1, 19], [11, 9], [10, 0, 7]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 16
 joint_action : [[11, 19, 13, 14, 5, 16, 3, 7, 0, 18], [8, 18, 11, 12, 17, 3, 14, 1, 9, 10], [6, 15, 18, 12, 1, 17, 14, 19, 11, 10], [6, 15, 19, 12, 17, 9, 14, 1, 11, 8], [0, 15, 18, 12, 5, 1, 2, 8, 11, 17], [6, 15, 17, 2, 18, 19, 8, 0, 11, 5], [5, 8, 0, 19, 4, 18, 17, 1, 11, 6], [5, 16, 19, 6, 4, 18, 17, 1, 8, 0], [5, 8, 16, 7, 4, 18, 17, 1, 19, 0], [5, 19, 8, 2, 16, 18, 17, 1, 7, 0], [5, 8, 7, 16, 2, 9, 20, 20, 20, 19], [20, 20, 20, 19, 2, 20, 8, 16, 9, 7], [20, 20, 16, 20, 20, 20, 8, 19, 9, 7], [20, 20, 16, 20, 20, 20, 8, 19, 20, 7], [20, 20, 20, 20, 20, 20, 16, 19, 20, 20], [20, 20, 20, 20, 20, 20, 16, 20, 20, 20]], 16
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([0, 2, 8, 1, 5, 3, 4, 6, 9, 7]), array([3, 6, 9, 4, 1, 5, 7, 2, 8, 0]), array([1, 3, 6, 8, 5, 9, 0, 7, 2, 4]), array([1, 3, 8, 5, 4, 6, 0, 7, 2, 9]), array([1, 8, 6, 2, 7, 3, 9, 5, 4, 0]), array([8, 5, 3, 9, 2, 0, 7, 1, 6, 4]), array([0, 4, 5, 6, 7, 9, 8, 2, 1, 3]), array([0, 4, 5, 6, 7, 9, 1, 3, 2, 8]), array([0, 5, 6, 7, 9, 1, 4, 8, 2, 3]), array([0, 4, 1, 2, 3, 9, 5, 6, 7, 8]), array([4, 9, 3, 7, 8, 6, 1, 0, 2, 5]), array([6, 8, 9, 2, 7, 5, 3, 0, 1, 4]), array([6, 7, 9, 2, 3, 1, 0, 8, 5, 4]), array([7, 6, 2, 4, 9, 8, 1, 0, 3, 5]), array([6, 8, 9, 5, 3, 4, 7, 0, 2, 1])], 16
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False, False, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True, False, False,  True,  True, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True, False,  True,  True,  True, False, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True, False,  True,  True,  True,  True, False, False,
       False, False]), array([False, False, False,  True, False, False, False, False, False,
       False,  True,  True,  True,  True,  True,  True, False, False,
       False, False]), array([False, False, False,  True, False, False,  True, False, False,
       False,  True,  True,  True,  True,  True,  True, False, False,
       False, False]), array([False, False, False,  True,  True, False,  True, False, False,
       False,  True,  True,  True,  True,  True,  True, False, False,
       False, False]), array([ True,  True, False,  True,  True, False,  True, False, False,
       False,  True,  True,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True, False, False,
       False,  True,  True,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
       False,  True,  True,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True])], 16
 next_t : [3, 7, 6, 4, 2, 2, 2, 5, 3, 3, 2, 8, 4, 4, 5, 30], 16
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 16
iteration : 16
joint_action : tensor([[11, 19, 13, 14,  5, 16,  3,  7,  0, 18],
        [ 8, 18, 11, 12, 17,  3, 14,  1,  9, 10],
        [ 6, 15, 18, 12,  1, 17, 14, 19, 11, 10],
        [ 6, 15, 19, 12, 17,  9, 14,  1, 11,  8],
        [ 0, 15, 18, 12,  5,  1,  2,  8, 11, 17],
        [ 6, 15, 17,  2, 18, 19,  8,  0, 11,  5],
        [ 5,  8,  0, 19,  4, 18, 17,  1, 11,  6],
        [ 5, 16, 19,  6,  4, 18, 17,  1,  8,  0],
        [ 5,  8, 16,  7,  4, 18, 17,  1, 19,  0],
        [ 5, 19,  8,  2, 16, 18, 17,  1,  7,  0],
        [ 5,  8,  7, 16,  2,  9, 20, 20, 20, 19],
        [20, 20, 20, 19,  2, 20,  8, 16,  9,  7],
        [20, 20, 16, 20, 20, 20,  8, 19,  9,  7],
        [20, 20, 16, 20, 20, 20,  8, 19, 20,  7],
        [20, 20, 20, 20, 20, 20, 16, 19, 20, 20],
        [20, 20, 20, 20, 20, 20, 16, 20, 20, 20]]), torch.Size([16, 10])
 all_action : tensor([[11],
        [19],
        [13],
        [14],
        [ 5],
        [16],
        [ 3],
        [ 7],
        [ 0],
        [18],
        [ 8],
        [18],
        [11],
        [12],
        [17],
        [ 3],
        [14],
        [ 1],
        [ 9],
        [10],
        [ 6],
        [15],
        [18],
        [12],
        [ 1],
        [17],
        [14],
        [19],
        [11],
        [10],
        [ 6],
        [15],
        [19],
        [12],
        [17],
        [ 9],
        [14],
        [ 1],
        [11],
        [ 8],
        [ 0],
        [15],
        [18],
        [12],
        [ 5],
        [ 1],
        [ 2],
        [ 8],
        [11],
        [17],
        [ 6],
        [15],
        [17],
        [ 2],
        [18],
        [19],
        [ 8],
        [ 0],
        [11],
        [ 5],
        [ 5],
        [ 8],
        [ 0],
        [19],
        [ 4],
        [18],
        [17],
        [ 1],
        [11],
        [ 6],
        [ 5],
        [16],
        [19],
        [ 6],
        [ 4],
        [18],
        [17],
        [ 1],
        [ 8],
        [ 0],
        [ 5],
        [ 8],
        [16],
        [ 7],
        [ 4],
        [18],
        [17],
        [ 1],
        [19],
        [ 0],
        [ 5],
        [19],
        [ 8],
        [ 2],
        [16],
        [18],
        [17],
        [ 1],
        [ 7],
        [ 0],
        [ 5],
        [ 8],
        [ 7],
        [16],
        [ 2],
        [ 9],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [19],
        [ 2],
        [20],
        [ 8],
        [16],
        [ 9],
        [ 7],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [ 8],
        [19],
        [ 9],
        [ 7],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [ 8],
        [19],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20]]), torch.Size([160, 1])
next_t : tensor([ 3,  7,  6,  4,  2,  2,  2,  5,  3,  3,  2,  8,  4,  4,  5, 30]), torch.Size([16])
 ret : tensor([75, 73, 67, 62, 59, 58, 57, 56, 52, 50, 48, 47, 40, 37, 34, 30]), torch.Size([16])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([160, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([160, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -26.3906,  -25.6495,  -24.8491,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -94.3006, -104.3095], grad_fn=<SumBackward1>), torch.Size([16])
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:08<00:00,  8.72s/it]
[[0, 17], [1, 15, 8], [2, 13, 18], [10, 4, 19, 11], [16], [5, 12, 6], [14], [7], [], [9, 3]]
  0%|                                                                                                                                                                      | 0/5 [00:00<?, ?it/s]
[[13, 12], [2], [18, 1, 0], [15, 11], [10], [6, 16, 3], [19, 4], [17], [7, 8], [9, 14, 5]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 19
 joint_action : [[19, 12, 18, 4, 1, 6, 0, 10, 7, 9], [13, 10, 18, 12, 17, 19, 4, 11, 7, 9], [13, 3, 18, 15, 10, 16, 17, 2, 4, 9], [14, 12, 18, 8, 10, 16, 17, 0, 5, 9], [19, 12, 18, 3, 10, 16, 11, 8, 17, 14], [17, 0, 4, 5, 10, 16, 15, 1, 8, 14], [12, 3, 5, 17, 10, 2, 1, 11, 8, 14], [12, 2, 5, 15, 4, 19, 11, 1, 3, 14], [12, 2, 1, 15, 19, 11, 0, 3, 4, 5], [11, 2, 1, 15, 4, 19, 3, 17, 0, 5], [0, 2, 1, 15, 20, 3, 19, 17, 11, 4], [20, 4, 1, 15, 0, 3, 19, 17, 11, 20], [4, 20, 0, 15, 11, 3, 19, 17, 20, 20], [0, 11, 20, 20, 4, 3, 19, 17, 20, 20], [20, 20, 0, 20, 20, 3, 19, 4, 20, 11], [20, 11, 0, 20, 20, 4, 19, 20, 20, 20], [20, 20, 0, 11, 20, 20, 20, 20, 20, 4], [20, 20, 20, 11, 20, 20, 4, 20, 20, 20], [20, 20, 20, 11, 20, 20, 20, 20, 20, 20]], 19
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([8, 9, 3, 5, 0, 4, 2, 6, 1, 7]), array([0, 2, 9, 6, 3, 1, 4, 8, 7, 5]), array([2, 5, 9, 8, 6, 4, 1, 7, 0, 3]), array([2, 4, 5, 6, 3, 1, 9, 0, 7, 8]), array([4, 5, 9, 0, 3, 8, 7, 1, 2, 6]), array([4, 8, 9, 7, 5, 1, 6, 2, 0, 3]), array([0, 9, 7, 1, 4, 2, 3, 8, 6, 5]), array([0, 1, 6, 9, 2, 3, 5, 7, 8, 4]), array([1, 2, 3, 9, 0, 4, 7, 5, 6, 8]), array([1, 2, 3, 7, 9, 5, 8, 6, 0, 4]), array([2, 3, 5, 6, 7, 4, 1, 8, 0, 9]), array([3, 5, 6, 7, 2, 4, 0, 9, 8, 1]), array([5, 6, 7, 4, 0, 1, 9, 3, 8, 2]), array([5, 6, 7, 2, 9, 4, 0, 1, 3, 8]), array([2, 6, 5, 1, 4, 3, 0, 9, 8, 7]), array([2, 3, 9, 4, 1, 7, 8, 6, 0, 5]), array([6, 3, 9, 0, 1, 8, 7, 5, 2, 4]), array([3, 0, 8, 6, 4, 1, 7, 9, 5, 2])], 19
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True,  True, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True,  True, False,
       False, False, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True,  True, False,
        True, False, False, False,  True, False, False, False, False,
       False, False]), array([False, False, False, False, False, False,  True,  True, False,
        True, False, False, False,  True, False, False, False, False,
        True, False]), array([False, False, False, False, False, False,  True,  True, False,
        True, False, False, False,  True, False, False,  True, False,
        True, False]), array([False, False, False, False, False, False,  True,  True,  True,
        True,  True, False, False,  True, False, False,  True, False,
        True, False]), array([False, False, False, False, False, False,  True,  True,  True,
        True,  True, False, False,  True,  True, False,  True, False,
        True, False]), array([False, False, False, False, False, False,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True, False,
        True, False]), array([False, False, False, False, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True, False,
        True, False]), array([False, False,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True, False,
        True, False]), array([False,  True,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True, False,
        True, False]), array([False,  True,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True, False,
        True, False]), array([False,  True,  True, False, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True, False]), array([False,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True, False]), array([False,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 19
 next_t : [8, 5, 3, 4, 2, 2, 8, 2, 3, 4, 5, 2, 2, 2, 3, 2, 9, 11, 2], 19
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 19
iteration : 19
joint_action : tensor([[19, 12, 18,  4,  1,  6,  0, 10,  7,  9],
        [13, 10, 18, 12, 17, 19,  4, 11,  7,  9],
        [13,  3, 18, 15, 10, 16, 17,  2,  4,  9],
        [14, 12, 18,  8, 10, 16, 17,  0,  5,  9],
        [19, 12, 18,  3, 10, 16, 11,  8, 17, 14],
        [17,  0,  4,  5, 10, 16, 15,  1,  8, 14],
        [12,  3,  5, 17, 10,  2,  1, 11,  8, 14],
        [12,  2,  5, 15,  4, 19, 11,  1,  3, 14],
        [12,  2,  1, 15, 19, 11,  0,  3,  4,  5],
        [11,  2,  1, 15,  4, 19,  3, 17,  0,  5],
        [ 0,  2,  1, 15, 20,  3, 19, 17, 11,  4],
        [20,  4,  1, 15,  0,  3, 19, 17, 11, 20],
        [ 4, 20,  0, 15, 11,  3, 19, 17, 20, 20],
        [ 0, 11, 20, 20,  4,  3, 19, 17, 20, 20],
        [20, 20,  0, 20, 20,  3, 19,  4, 20, 11],
        [20, 11,  0, 20, 20,  4, 19, 20, 20, 20],
        [20, 20,  0, 11, 20, 20, 20, 20, 20,  4],
        [20, 20, 20, 11, 20, 20,  4, 20, 20, 20],
        [20, 20, 20, 11, 20, 20, 20, 20, 20, 20]]), torch.Size([19, 10])
 all_action : tensor([[19],
        [12],
        [18],
        [ 4],
        [ 1],
        [ 6],
        [ 0],
        [10],
        [ 7],
        [ 9],
        [13],
        [10],
        [18],
        [12],
        [17],
        [19],
        [ 4],
        [11],
        [ 7],
        [ 9],
        [13],
        [ 3],
        [18],
        [15],
        [10],
        [16],
        [17],
        [ 2],
        [ 4],
        [ 9],
        [14],
        [12],
        [18],
        [ 8],
        [10],
        [16],
        [17],
        [ 0],
        [ 5],
        [ 9],
        [19],
        [12],
        [18],
        [ 3],
        [10],
        [16],
        [11],
        [ 8],
        [17],
        [14],
        [17],
        [ 0],
        [ 4],
        [ 5],
        [10],
        [16],
        [15],
        [ 1],
        [ 8],
        [14],
        [12],
        [ 3],
        [ 5],
        [17],
        [10],
        [ 2],
        [ 1],
        [11],
        [ 8],
        [14],
        [12],
        [ 2],
        [ 5],
        [15],
        [ 4],
        [19],
        [11],
        [ 1],
        [ 3],
        [14],
        [12],
        [ 2],
        [ 1],
        [15],
        [19],
        [11],
        [ 0],
        [ 3],
        [ 4],
        [ 5],
        [11],
        [ 2],
        [ 1],
        [15],
        [ 4],
        [19],
        [ 3],
        [17],
        [ 0],
        [ 5],
        [ 0],
        [ 2],
        [ 1],
        [15],
        [20],
        [ 3],
        [19],
        [17],
        [11],
        [ 4],
        [20],
        [ 4],
        [ 1],
        [15],
        [ 0],
        [ 3],
        [19],
        [17],
        [11],
        [20],
        [ 4],
        [20],
        [ 0],
        [15],
        [11],
        [ 3],
        [19],
        [17],
        [20],
        [20],
        [ 0],
        [11],
        [20],
        [20],
        [ 4],
        [ 3],
        [19],
        [17],
        [20],
        [20],
        [20],
        [20],
        [ 0],
        [20],
        [20],
        [ 3],
        [19],
        [ 4],
        [20],
        [11],
        [20],
        [11],
        [ 0],
        [20],
        [20],
        [ 4],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 0],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([190, 1])
next_t : tensor([ 8,  5,  3,  4,  2,  2,  8,  2,  3,  4,  5,  2,  2,  2,  3,  2,  9, 11,
         2]), torch.Size([19])
 ret : tensor([61, 54, 50, 48, 45, 44, 43, 36, 35, 33, 30, 26, 25, 24, 23, 21, 20, 12,
         2]), torch.Size([19])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([190, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([190, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,
         -49.0949,  -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006,
        -104.3095], grad_fn=<SumBackward1>), torch.Size([19])
[[10, 7], [8], [15, 12, 0], [19, 13], [1, 5], [11, 2], [14, 4, 6], [17], [3, 18], [16, 9]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 19
 joint_action : [[19, 18, 3, 16, 1, 5, 14, 17, 11, 12], [11, 7, 15, 19, 1, 9, 13, 17, 18, 10], [10, 18, 15, 8, 1, 11, 16, 9, 2, 7], [10, 2, 12, 19, 1, 11, 9, 13, 18, 5], [10, 6, 9, 19, 0, 11, 4, 5, 3, 18], [10, 3, 0, 19, 5, 12, 4, 16, 8, 7], [8, 2, 9, 19, 5, 16, 4, 18, 3, 6], [18, 16, 7, 12, 5, 8, 13, 3, 0, 6], [7, 8, 12, 6, 18, 3, 9, 2, 0, 16], [2, 13, 12, 8, 6, 18, 7, 0, 3, 9], [2, 7, 18, 13, 20, 0, 6, 8, 3, 9], [2, 7, 8, 13, 20, 20, 6, 0, 3, 18], [7, 18, 0, 13, 20, 2, 6, 20, 8, 20], [20, 8, 0, 13, 2, 18, 20, 7, 20, 20], [20, 8, 0, 20, 18, 20, 2, 7, 20, 20], [20, 8, 20, 20, 20, 2, 20, 18, 20, 7], [7, 8, 20, 18, 20, 20, 20, 20, 20, 20], [7, 20, 18, 20, 20, 20, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 20, 20, 18, 20]], 19
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([4, 7, 1, 6, 2, 0, 8, 5, 9, 3]), array([2, 4, 6, 1, 8, 0, 3, 5, 7, 9]), array([0, 4, 5, 8, 7, 6, 9, 3, 2, 1]), array([0, 3, 5, 7, 8, 4, 2, 6, 9, 1]), array([0, 3, 6, 1, 4, 9, 8, 5, 7, 2]), array([3, 4, 6, 8, 7, 0, 1, 9, 5, 2]), array([4, 3, 6, 9, 1, 0, 2, 5, 8, 7]), array([5, 8, 3, 4, 1, 2, 9, 0, 7, 6]), array([2, 5, 3, 7, 0, 4, 8, 9, 1, 6]), array([8, 9, 5, 2, 0, 3, 7, 1, 6, 4]), array([3, 6, 8, 0, 7, 2, 9, 1, 5, 4]), array([3, 6, 5, 0, 2, 1, 8, 7, 4, 9]), array([2, 3, 5, 7, 4, 1, 0, 6, 9, 8]), array([2, 7, 1, 6, 4, 8, 0, 9, 5, 3]), array([7, 1, 9, 5, 2, 0, 6, 3, 8, 4]), array([1, 0, 3, 9, 6, 5, 8, 7, 2, 4]), array([0, 2, 1, 4, 5, 6, 8, 9, 3, 7]), array([8, 5, 7, 6, 4, 3, 0, 1, 9, 2])], 19
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True, False, False,  True,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False,  True,  True, False,  True,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False, False, False, False, False,  True,  True, False,  True,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False, False,  True, False, False,  True,  True, False,  True,
       False, False]), array([False,  True, False, False, False, False, False, False, False,
       False,  True,  True, False, False,  True,  True, False,  True,
       False, False]), array([False,  True, False, False,  True, False, False, False, False,
       False,  True,  True, False, False,  True,  True, False,  True,
       False,  True]), array([False,  True, False, False,  True,  True, False, False, False,
       False,  True,  True, False, False,  True,  True, False,  True,
       False,  True]), array([False,  True, False, False,  True,  True, False, False, False,
       False,  True,  True, False, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False, False,  True,  True, False, False, False,
       False,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False, False,  True,  True, False, False, False,
        True,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False,  True,  True,  True, False, False, False,
        True,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False,  True,  True,  True,  True, False, False,
        True,  True,  True,  True, False,  True,  True,  True,  True,
       False,  True]), array([False,  True, False,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True, False,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True])], 19
 next_t : [14, 3, 4, 2, 4, 5, 2, 3, 10, 5, 5, 3, 3, 4, 2, 17, 4, 8, 44], 19
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 19
iteration : 19
joint_action : tensor([[19, 18,  3, 16,  1,  5, 14, 17, 11, 12],
        [11,  7, 15, 19,  1,  9, 13, 17, 18, 10],
        [10, 18, 15,  8,  1, 11, 16,  9,  2,  7],
        [10,  2, 12, 19,  1, 11,  9, 13, 18,  5],
        [10,  6,  9, 19,  0, 11,  4,  5,  3, 18],
        [10,  3,  0, 19,  5, 12,  4, 16,  8,  7],
        [ 8,  2,  9, 19,  5, 16,  4, 18,  3,  6],
        [18, 16,  7, 12,  5,  8, 13,  3,  0,  6],
        [ 7,  8, 12,  6, 18,  3,  9,  2,  0, 16],
        [ 2, 13, 12,  8,  6, 18,  7,  0,  3,  9],
        [ 2,  7, 18, 13, 20,  0,  6,  8,  3,  9],
        [ 2,  7,  8, 13, 20, 20,  6,  0,  3, 18],
        [ 7, 18,  0, 13, 20,  2,  6, 20,  8, 20],
        [20,  8,  0, 13,  2, 18, 20,  7, 20, 20],
        [20,  8,  0, 20, 18, 20,  2,  7, 20, 20],
        [20,  8, 20, 20, 20,  2, 20, 18, 20,  7],
        [ 7,  8, 20, 18, 20, 20, 20, 20, 20, 20],
        [ 7, 20, 18, 20, 20, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 20, 20, 18, 20]]), torch.Size([19, 10])
 all_action : tensor([[19],
        [18],
        [ 3],
        [16],
        [ 1],
        [ 5],
        [14],
        [17],
        [11],
        [12],
        [11],
        [ 7],
        [15],
        [19],
        [ 1],
        [ 9],
        [13],
        [17],
        [18],
        [10],
        [10],
        [18],
        [15],
        [ 8],
        [ 1],
        [11],
        [16],
        [ 9],
        [ 2],
        [ 7],
        [10],
        [ 2],
        [12],
        [19],
        [ 1],
        [11],
        [ 9],
        [13],
        [18],
        [ 5],
        [10],
        [ 6],
        [ 9],
        [19],
        [ 0],
        [11],
        [ 4],
        [ 5],
        [ 3],
        [18],
        [10],
        [ 3],
        [ 0],
        [19],
        [ 5],
        [12],
        [ 4],
        [16],
        [ 8],
        [ 7],
        [ 8],
        [ 2],
        [ 9],
        [19],
        [ 5],
        [16],
        [ 4],
        [18],
        [ 3],
        [ 6],
        [18],
        [16],
        [ 7],
        [12],
        [ 5],
        [ 8],
        [13],
        [ 3],
        [ 0],
        [ 6],
        [ 7],
        [ 8],
        [12],
        [ 6],
        [18],
        [ 3],
        [ 9],
        [ 2],
        [ 0],
        [16],
        [ 2],
        [13],
        [12],
        [ 8],
        [ 6],
        [18],
        [ 7],
        [ 0],
        [ 3],
        [ 9],
        [ 2],
        [ 7],
        [18],
        [13],
        [20],
        [ 0],
        [ 6],
        [ 8],
        [ 3],
        [ 9],
        [ 2],
        [ 7],
        [ 8],
        [13],
        [20],
        [20],
        [ 6],
        [ 0],
        [ 3],
        [18],
        [ 7],
        [18],
        [ 0],
        [13],
        [20],
        [ 2],
        [ 6],
        [20],
        [ 8],
        [20],
        [20],
        [ 8],
        [ 0],
        [13],
        [ 2],
        [18],
        [20],
        [ 7],
        [20],
        [20],
        [20],
        [ 8],
        [ 0],
        [20],
        [18],
        [20],
        [ 2],
        [ 7],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [ 2],
        [20],
        [18],
        [20],
        [ 7],
        [ 7],
        [ 8],
        [20],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 7],
        [20],
        [18],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [18],
        [20]]), torch.Size([190, 1])
next_t : tensor([14,  3,  4,  2,  4,  5,  2,  3, 10,  5,  5,  3,  3,  4,  2, 17,  4,  8,
        44]), torch.Size([19])
 ret : tensor([119, 107, 106, 104, 104, 102,  98,  97,  95,  86,  82,  78,  76,  74,
         71,  70,  54,  51,  44]), torch.Size([19])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 5.0000e-01, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([190, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([190, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,
         -49.0949,  -57.7272,  -66.5234,  -75.5153,  -84.7494,  -94.3006,
        -104.3095], grad_fn=<SumBackward1>), torch.Size([19])
[[5, 14], [6, 13, 17], [2, 9, 4], [8], [7], [16, 18], [3], [0], [19, 1, 12], [11, 10, 15]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 19
 joint_action : [[10, 12, 2, 9, 16, 5, 13, 7, 19, 11], [5, 6, 8, 14, 0, 16, 3, 15, 19, 11], [5, 6, 1, 4, 17, 16, 3, 18, 19, 0], [5, 6, 14, 7, 0, 16, 3, 1, 13, 8], [5, 6, 9, 17, 12, 4, 3, 7, 14, 10], [8, 6, 9, 4, 0, 18, 3, 13, 14, 10], [12, 7, 9, 14, 1, 18, 3, 0, 15, 10], [8, 13, 9, 14, 7, 18, 17, 0, 12, 10], [14, 13, 9, 12, 1, 18, 7, 0, 17, 15], [17, 13, 8, 12, 7, 18, 14, 0, 1, 15], [14, 13, 8, 17, 7, 18, 12, 0, 1, 4], [14, 4, 7, 17, 12, 18, 20, 0, 1, 8], [14, 17, 20, 8, 20, 12, 4, 0, 1, 7], [14, 17, 7, 20, 8, 20, 20, 4, 1, 12], [14, 17, 20, 4, 12, 20, 20, 7, 20, 8], [14, 20, 20, 12, 8, 7, 20, 4, 20, 20], [20, 20, 4, 8, 7, 20, 20, 20, 12, 20], [20, 20, 4, 20, 20, 20, 20, 20, 12, 20], [20, 20, 20, 20, 20, 20, 20, 20, 12, 20]], 19
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([8, 9, 0, 5, 6, 7, 4, 3, 2, 1]), array([0, 1, 5, 6, 8, 7, 3, 4, 2, 9]), array([0, 1, 5, 6, 8, 3, 9, 7, 4, 2]), array([0, 1, 6, 3, 8, 7, 2, 5, 4, 9]), array([1, 2, 6, 9, 4, 5, 3, 0, 8, 7]), array([2, 5, 6, 9, 3, 8, 1, 4, 0, 7]), array([2, 5, 7, 9, 1, 8, 6, 3, 0, 4]), array([1, 2, 5, 7, 4, 3, 0, 6, 8, 9]), array([1, 5, 7, 9, 4, 6, 2, 3, 8, 0]), array([1, 5, 7, 8, 2, 0, 3, 9, 6, 4]), array([0, 5, 7, 8, 4, 9, 2, 3, 1, 6]), array([0, 7, 8, 5, 6, 9, 1, 3, 4, 2]), array([0, 1, 8, 7, 4, 9, 2, 6, 5, 3]), array([0, 1, 9, 3, 4, 7, 6, 8, 2, 5]), array([0, 4, 3, 5, 7, 1, 6, 8, 9, 2]), array([2, 4, 3, 8, 6, 5, 9, 0, 1, 7]), array([2, 8, 6, 4, 7, 0, 5, 1, 3, 9]), array([8, 0, 2, 3, 1, 6, 7, 9, 5, 4])], 19
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False, False, False,
       False, False,  True, False, False, False, False, False, False,
       False, False]), array([False, False,  True, False, False, False, False, False, False,
       False, False,  True, False, False, False, False, False, False,
       False,  True]), array([False, False,  True, False, False, False, False, False, False,
       False, False,  True, False, False, False, False,  True, False,
       False,  True]), array([False, False,  True, False, False,  True, False, False, False,
       False, False,  True, False, False, False, False,  True, False,
       False,  True]), array([False, False,  True, False, False,  True,  True, False, False,
       False, False,  True, False, False, False, False,  True, False,
       False,  True]), array([False, False,  True,  True, False,  True,  True, False, False,
       False, False,  True, False, False, False, False,  True, False,
       False,  True]), array([False, False,  True,  True, False,  True,  True, False, False,
       False,  True,  True, False, False, False, False,  True, False,
       False,  True]), array([False, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False, False, False, False,  True, False,
       False,  True]), array([False, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False, False, False,  True,  True, False,
       False,  True]), array([False, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True, False,  True,  True, False,
       False,  True]), array([False, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True, False,  True,  True, False,
        True,  True]), array([ True, False,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True, False,  True,  True, False,
        True,  True]), array([ True,  True,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True, False,  True,  True, False,
        True,  True]), array([ True,  True,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True, False,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True, False,  True,  True, False, False,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True, False,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True])], 19
 next_t : [3, 5, 2, 2, 2, 5, 2, 2, 2, 4, 2, 3, 2, 2, 4, 2, 28, 3, 7], 19
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 19
iteration : 19
joint_action : tensor([[10, 12,  2,  9, 16,  5, 13,  7, 19, 11],
        [ 5,  6,  8, 14,  0, 16,  3, 15, 19, 11],
        [ 5,  6,  1,  4, 17, 16,  3, 18, 19,  0],
        [ 5,  6, 14,  7,  0, 16,  3,  1, 13,  8],
        [ 5,  6,  9, 17, 12,  4,  3,  7, 14, 10],
        [ 8,  6,  9,  4,  0, 18,  3, 13, 14, 10],
        [12,  7,  9, 14,  1, 18,  3,  0, 15, 10],
        [ 8, 13,  9, 14,  7, 18, 17,  0, 12, 10],
        [14, 13,  9, 12,  1, 18,  7,  0, 17, 15],
        [17, 13,  8, 12,  7, 18, 14,  0,  1, 15],
        [14, 13,  8, 17,  7, 18, 12,  0,  1,  4],
        [14,  4,  7, 17, 12, 18, 20,  0,  1,  8],
        [14, 17, 20,  8, 20, 12,  4,  0,  1,  7],
        [14, 17,  7, 20,  8, 20, 20,  4,  1, 12],
        [14, 17, 20,  4, 12, 20, 20,  7, 20,  8],
        [14, 20, 20, 12,  8,  7, 20,  4, 20, 20],
        [20, 20,  4,  8,  7, 20, 20, 20, 12, 20],
        [20, 20,  4, 20, 20, 20, 20, 20, 12, 20],
        [20, 20, 20, 20, 20, 20, 20, 20, 12, 20]]), torch.Size([19, 10])
 all_action : tensor([[10],
        [12],
        [ 2],
        [ 9],
        [16],
        [ 5],
        [13],
        [ 7],
        [19],
        [11],
        [ 5],
        [ 6],
        [ 8],
        [14],
        [ 0],
        [16],
        [ 3],
        [15],
        [19],
        [11],
        [ 5],
        [ 6],
        [ 1],
        [ 4],
        [17],
        [16],
        [ 3],
        [18],
        [19],
        [ 0],
        [ 5],
        [ 6],
        [14],
        [ 7],
        [ 0],
        [16],
        [ 3],
        [ 1],
        [13],
        [ 8],
        [ 5],
        [ 6],
        [ 9],
        [17],
        [12],
        [ 4],
        [ 3],
        [ 7],
        [14],
        [10],
        [ 8],
        [ 6],
        [ 9],
        [ 4],
        [ 0],
        [18],
        [ 3],
        [13],
        [14],
        [10],
        [12],
        [ 7],
        [ 9],
        [14],
        [ 1],
        [18],
        [ 3],
        [ 0],
        [15],
        [10],
        [ 8],
        [13],
        [ 9],
        [14],
        [ 7],
        [18],
        [17],
        [ 0],
        [12],
        [10],
        [14],
        [13],
        [ 9],
        [12],
        [ 1],
        [18],
        [ 7],
        [ 0],
        [17],
        [15],
        [17],
        [13],
        [ 8],
        [12],
        [ 7],
        [18],
        [14],
        [ 0],
        [ 1],
        [15],
        [14],
        [13],
        [ 8],
        [17],
        [ 7],
        [18],
        [12],
        [ 0],
        [ 1],
        [ 4],
        [14],
        [ 4],
        [ 7],
        [17],
        [12],
        [18],
        [20],
        [ 0],
        [ 1],
        [ 8],
        [14],
        [17],
        [20],
        [ 8],
        [20],
        [12],
        [ 4],
        [ 0],
        [ 1],
        [ 7],
        [14],
        [17],
        [ 7],
        [20],
        [ 8],
        [20],
        [20],
        [ 4],
        [ 1],
        [12],
        [14],
        [17],
        [20],
        [ 4],
        [12],
        [20],
        [20],
        [ 7],
        [20],
        [ 8],
        [14],
        [20],
        [20],
        [12],
        [ 8],
        [ 7],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [20],
        [ 4],
        [ 8],
        [ 7],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [ 4],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [12],
        [20]]), torch.Size([190, 1])
next_t : tensor([ 3,  5,  2,  2,  2,  5,  2,  2,  2,  4,  2,  3,  2,  2,  4,  2, 28,  3,
         7]), torch.Size([19])
 ret : tensor([64, 62, 58, 57, 56, 55, 51, 50, 49, 48, 45, 44, 42, 41, 40, 37, 36,  9,
         7]), torch.Size([19])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([190, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([190, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -27.0805,  -26.3906,  -25.6495,  -24.8491,  -23.9790,  -32.2362,
         -40.6036,  -49.0949,  -57.7272,  -66.5234,  -75.5153,  -94.3006,
        -104.3095], grad_fn=<SumBackward1>), torch.Size([19])
[[17], [1, 11], [0, 8, 13, 19], [16, 5, 9], [18, 10], [7, 12], [], [6, 14], [4], [3, 2, 15]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[4, 1, 15, 16, 6, 10, 8, 0, 5, 3], [17, 1, 0, 2, 13, 8, 19, 14, 4, 3], [17, 1, 8, 5, 18, 7, 19, 6, 4, 3], [17, 15, 8, 5, 18, 12, 14, 6, 4, 3], [17, 2, 8, 5, 18, 14, 19, 6, 4, 11], [17, 9, 8, 5, 18, 7, 2, 6, 12, 19], [17, 2, 8, 13, 10, 7, 14, 6, 19, 12], [11, 15, 13, 9, 10, 7, 12, 14, 19, 2], [19, 12, 13, 9, 10, 11, 20, 15, 14, 2], [19, 11, 13, 9, 14, 12, 20, 15, 20, 2], [20, 14, 19, 9, 15, 12, 20, 11, 20, 2], [20, 11, 19, 9, 14, 20, 20, 15, 20, 2], [19, 20, 20, 9, 14, 15, 20, 11, 20, 20], [20, 11, 20, 20, 19, 20, 20, 14, 20, 15], [20, 11, 19, 20, 20, 20, 20, 20, 20, 15], [20, 11, 19, 20, 20, 20, 20, 20, 20, 20], [20, 20, 19, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([1, 9, 6, 2, 4, 0, 7, 8, 3, 5]), array([1, 8, 9, 4, 6, 0, 3, 2, 7, 5]), array([0, 2, 3, 4, 7, 8, 9, 6, 5, 1]), array([0, 2, 3, 4, 7, 8, 9, 6, 1, 5]), array([0, 2, 3, 4, 7, 9, 8, 5, 1, 6]), array([0, 2, 5, 7, 6, 9, 4, 1, 3, 8]), array([4, 5, 2, 7, 3, 0, 9, 1, 8, 6]), array([2, 4, 9, 8, 5, 0, 7, 3, 1, 6]), array([2, 3, 9, 5, 0, 1, 4, 7, 6, 8]), array([3, 5, 9, 1, 2, 4, 7, 8, 0, 6]), array([3, 9, 2, 7, 4, 1, 8, 6, 5, 0]), array([3, 7, 5, 4, 0, 2, 6, 9, 8, 1]), array([7, 4, 1, 9, 5, 6, 8, 3, 0, 2]), array([1, 9, 2, 6, 5, 7, 4, 8, 0, 3]), array([1, 2, 7, 3, 8, 9, 0, 6, 4, 5]), array([2, 9, 3, 5, 0, 4, 6, 1, 7, 8])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False,  True, False,
       False, False]), array([ True, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False,  True, False,
       False, False]), array([ True,  True, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False,  True, False,
       False, False]), array([ True,  True, False,  True, False, False, False, False, False,
       False, False, False, False, False, False, False,  True, False,
       False, False]), array([ True,  True, False,  True,  True, False, False, False, False,
       False, False, False, False, False, False, False,  True, False,
       False, False]), array([ True,  True, False,  True,  True,  True, False, False, False,
       False, False, False, False, False, False, False,  True, False,
        True, False]), array([ True,  True, False,  True,  True,  True,  True, False,  True,
       False, False, False, False, False, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
       False, False, False, False, False, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True, False, False, False, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True, False, False,  True, False, False,  True,  True,
        True, False]), array([ True,  True, False,  True,  True,  True,  True,  True,  True,
       False,  True, False,  True,  True, False, False,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
       False,  True, False,  True,  True, False, False,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True, False, False,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True, False,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True, False]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True, False])], 17
 next_t : [8, 7, 4, 4, 2, 5, 2, 9, 2, 2, 2, 6, 3, 15, 5, 6, 5], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 4,  1, 15, 16,  6, 10,  8,  0,  5,  3],
        [17,  1,  0,  2, 13,  8, 19, 14,  4,  3],
        [17,  1,  8,  5, 18,  7, 19,  6,  4,  3],
        [17, 15,  8,  5, 18, 12, 14,  6,  4,  3],
        [17,  2,  8,  5, 18, 14, 19,  6,  4, 11],
        [17,  9,  8,  5, 18,  7,  2,  6, 12, 19],
        [17,  2,  8, 13, 10,  7, 14,  6, 19, 12],
        [11, 15, 13,  9, 10,  7, 12, 14, 19,  2],
        [19, 12, 13,  9, 10, 11, 20, 15, 14,  2],
        [19, 11, 13,  9, 14, 12, 20, 15, 20,  2],
        [20, 14, 19,  9, 15, 12, 20, 11, 20,  2],
        [20, 11, 19,  9, 14, 20, 20, 15, 20,  2],
        [19, 20, 20,  9, 14, 15, 20, 11, 20, 20],
        [20, 11, 20, 20, 19, 20, 20, 14, 20, 15],
        [20, 11, 19, 20, 20, 20, 20, 20, 20, 15],
        [20, 11, 19, 20, 20, 20, 20, 20, 20, 20],
        [20, 20, 19, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 4],
        [ 1],
        [15],
        [16],
        [ 6],
        [10],
        [ 8],
        [ 0],
        [ 5],
        [ 3],
        [17],
        [ 1],
        [ 0],
        [ 2],
        [13],
        [ 8],
        [19],
        [14],
        [ 4],
        [ 3],
        [17],
        [ 1],
        [ 8],
        [ 5],
        [18],
        [ 7],
        [19],
        [ 6],
        [ 4],
        [ 3],
        [17],
        [15],
        [ 8],
        [ 5],
        [18],
        [12],
        [14],
        [ 6],
        [ 4],
        [ 3],
        [17],
        [ 2],
        [ 8],
        [ 5],
        [18],
        [14],
        [19],
        [ 6],
        [ 4],
        [11],
        [17],
        [ 9],
        [ 8],
        [ 5],
        [18],
        [ 7],
        [ 2],
        [ 6],
        [12],
        [19],
        [17],
        [ 2],
        [ 8],
        [13],
        [10],
        [ 7],
        [14],
        [ 6],
        [19],
        [12],
        [11],
        [15],
        [13],
        [ 9],
        [10],
        [ 7],
        [12],
        [14],
        [19],
        [ 2],
        [19],
        [12],
        [13],
        [ 9],
        [10],
        [11],
        [20],
        [15],
        [14],
        [ 2],
        [19],
        [11],
        [13],
        [ 9],
        [14],
        [12],
        [20],
        [15],
        [20],
        [ 2],
        [20],
        [14],
        [19],
        [ 9],
        [15],
        [12],
        [20],
        [11],
        [20],
        [ 2],
        [20],
        [11],
        [19],
        [ 9],
        [14],
        [20],
        [20],
        [15],
        [20],
        [ 2],
        [19],
        [20],
        [20],
        [ 9],
        [14],
        [15],
        [20],
        [11],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [19],
        [20],
        [20],
        [14],
        [20],
        [15],
        [20],
        [11],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [15],
        [20],
        [11],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [19],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 8,  7,  4,  4,  2,  5,  2,  9,  2,  2,  2,  6,  3, 15,  5,  6,  5]), torch.Size([17])
 ret : tensor([71, 64, 58, 55, 52, 51, 47, 46, 38, 37, 36, 35, 30, 28, 14, 10,  5]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 5.0000e-01,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.2632e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -29.4444,  -28.9037,  -28.3321,  -27.7259,
         -26.3906,  -23.9790,  -32.2362,  -40.6036,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
[[13, 0, 8], [11], [10, 7, 18], [15, 16], [12, 6], [4, 2], [19, 14, 17], [5], [3], [9, 1]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[7, 11, 10, 16, 12, 8, 19, 2, 17, 9], [8, 1, 10, 15, 12, 18, 7, 5, 13, 9], [17, 13, 16, 15, 12, 8, 18, 0, 7, 9], [18, 8, 7, 15, 16, 17, 13, 0, 4, 9], [2, 11, 7, 15, 8, 17, 14, 1, 18, 3], [13, 11, 7, 8, 18, 16, 14, 0, 6, 3], [13, 11, 0, 2, 16, 4, 14, 8, 18, 3], [13, 11, 1, 8, 0, 2, 16, 17, 3, 6], [16, 11, 8, 17, 6, 2, 0, 18, 3, 1], [20, 8, 16, 17, 6, 2, 18, 0, 3, 1], [20, 20, 17, 20, 8, 16, 18, 0, 3, 1], [20, 0, 20, 20, 20, 16, 17, 18, 8, 1], [20, 0, 20, 8, 18, 20, 17, 20, 16, 20], [0, 20, 18, 20, 8, 16, 20, 20, 20, 20], [20, 8, 18, 20, 16, 20, 20, 20, 20, 20], [8, 20, 20, 16, 20, 20, 20, 20, 20, 20], [8, 20, 20, 20, 20, 20, 20, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([2, 4, 9, 6, 0, 1, 7, 8, 3, 5]), array([3, 4, 9, 8, 2, 1, 7, 5, 0, 6]), array([3, 9, 6, 4, 2, 7, 8, 5, 0, 1]), array([2, 3, 0, 9, 5, 6, 7, 1, 4, 8]), array([1, 2, 6, 4, 8, 7, 5, 0, 3, 9]), array([0, 1, 6, 7, 2, 4, 3, 8, 5, 9]), array([0, 1, 9, 7, 6, 5, 2, 8, 3, 4]), array([1, 5, 8, 9, 2, 3, 6, 0, 7, 4]), array([4, 5, 8, 9, 2, 6, 1, 7, 3, 0]), array([8, 9, 7, 2, 5, 4, 6, 0, 1, 3]), array([9, 5, 1, 6, 7, 8, 2, 4, 3, 0]), array([6, 8, 3, 1, 4, 2, 5, 9, 0, 7]), array([2, 5, 4, 0, 3, 7, 8, 6, 9, 1]), array([2, 1, 4, 0, 3, 7, 5, 9, 6, 8]), array([0, 3, 2, 7, 4, 5, 8, 6, 1, 9]), array([0, 8, 2, 6, 7, 4, 9, 5, 1, 3])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False,  True, False, False, False,
       False,  True, False, False, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False,  True, False, False, False,
       False,  True, False,  True, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False,  True, False, False, False,
        True,  True, False,  True, False, False, False, False, False,
       False,  True]), array([False, False, False, False, False,  True, False, False, False,
        True,  True, False,  True, False, False,  True, False, False,
       False,  True]), array([False, False, False, False, False,  True, False,  True, False,
        True,  True, False,  True, False, False,  True, False, False,
       False,  True]), array([False, False, False, False,  True,  True, False,  True, False,
        True,  True, False,  True, False,  True,  True, False, False,
       False,  True]), array([False, False, False, False,  True,  True, False,  True, False,
        True,  True, False,  True,  True,  True,  True, False, False,
       False,  True]), array([False, False, False, False,  True,  True, False,  True, False,
        True,  True,  True,  True,  True,  True,  True, False, False,
       False,  True]), array([False, False,  True, False,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False, False,
       False,  True]), array([False, False,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False, False,
       False,  True]), array([False,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False, False,
       False,  True]), array([False,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True, False,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [2, 5, 2, 4, 6, 4, 2, 2, 3, 4, 3, 2, 7, 8, 9, 19, 9], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[ 7, 11, 10, 16, 12,  8, 19,  2, 17,  9],
        [ 8,  1, 10, 15, 12, 18,  7,  5, 13,  9],
        [17, 13, 16, 15, 12,  8, 18,  0,  7,  9],
        [18,  8,  7, 15, 16, 17, 13,  0,  4,  9],
        [ 2, 11,  7, 15,  8, 17, 14,  1, 18,  3],
        [13, 11,  7,  8, 18, 16, 14,  0,  6,  3],
        [13, 11,  0,  2, 16,  4, 14,  8, 18,  3],
        [13, 11,  1,  8,  0,  2, 16, 17,  3,  6],
        [16, 11,  8, 17,  6,  2,  0, 18,  3,  1],
        [20,  8, 16, 17,  6,  2, 18,  0,  3,  1],
        [20, 20, 17, 20,  8, 16, 18,  0,  3,  1],
        [20,  0, 20, 20, 20, 16, 17, 18,  8,  1],
        [20,  0, 20,  8, 18, 20, 17, 20, 16, 20],
        [ 0, 20, 18, 20,  8, 16, 20, 20, 20, 20],
        [20,  8, 18, 20, 16, 20, 20, 20, 20, 20],
        [ 8, 20, 20, 16, 20, 20, 20, 20, 20, 20],
        [ 8, 20, 20, 20, 20, 20, 20, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[ 7],
        [11],
        [10],
        [16],
        [12],
        [ 8],
        [19],
        [ 2],
        [17],
        [ 9],
        [ 8],
        [ 1],
        [10],
        [15],
        [12],
        [18],
        [ 7],
        [ 5],
        [13],
        [ 9],
        [17],
        [13],
        [16],
        [15],
        [12],
        [ 8],
        [18],
        [ 0],
        [ 7],
        [ 9],
        [18],
        [ 8],
        [ 7],
        [15],
        [16],
        [17],
        [13],
        [ 0],
        [ 4],
        [ 9],
        [ 2],
        [11],
        [ 7],
        [15],
        [ 8],
        [17],
        [14],
        [ 1],
        [18],
        [ 3],
        [13],
        [11],
        [ 7],
        [ 8],
        [18],
        [16],
        [14],
        [ 0],
        [ 6],
        [ 3],
        [13],
        [11],
        [ 0],
        [ 2],
        [16],
        [ 4],
        [14],
        [ 8],
        [18],
        [ 3],
        [13],
        [11],
        [ 1],
        [ 8],
        [ 0],
        [ 2],
        [16],
        [17],
        [ 3],
        [ 6],
        [16],
        [11],
        [ 8],
        [17],
        [ 6],
        [ 2],
        [ 0],
        [18],
        [ 3],
        [ 1],
        [20],
        [ 8],
        [16],
        [17],
        [ 6],
        [ 2],
        [18],
        [ 0],
        [ 3],
        [ 1],
        [20],
        [20],
        [17],
        [20],
        [ 8],
        [16],
        [18],
        [ 0],
        [ 3],
        [ 1],
        [20],
        [ 0],
        [20],
        [20],
        [20],
        [16],
        [17],
        [18],
        [ 8],
        [ 1],
        [20],
        [ 0],
        [20],
        [ 8],
        [18],
        [20],
        [17],
        [20],
        [16],
        [20],
        [ 0],
        [20],
        [18],
        [20],
        [ 8],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [18],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [16],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 2,  5,  2,  4,  6,  4,  2,  2,  3,  4,  3,  2,  7,  8,  9, 19,  9]), torch.Size([17])
 ret : tensor([75, 74, 70, 69, 66, 61, 58, 57, 56, 54, 51, 49, 48, 42, 35, 27,  9]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [7.1429e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.2500e-01],
        [1.0000e-05],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.2500e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -28.9037,  -28.3321,  -27.7259,  -27.0805,
         -26.3906,  -24.8491,  -23.9790,  -32.2362,  -49.0949,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1/1 [00:08<00:00,  8.17s/it]
[[0], [1, 15, 10, 18], [2, 11], [13, 6, 4], [19], [5, 12], [17], [7, 14], [16, 3], [9, 8]]
  0%|                                                                                                                                                                      | 0/5 [00:00<?, ?it/s]
[[12, 13, 15], [16, 1], [7, 10, 8], [2, 18], [], [9, 6, 0, 3], [4, 19, 11], [17], [14], [5]]
gs : [Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)}), Graph(num_nodes=31, num_edges=210,
      ndata_schemes={'type': Scheme(shape=(), dtype=torch.int64), 'loc': Scheme(shape=(2,), dtype=torch.float32), 'original_loc': Scheme(shape=(2,), dtype=torch.int64), 'nf': Scheme(shape=(128,), dtype=torch.float32), 'finished': Scheme(shape=(), dtype=torch.bool)}
      edata_schemes={'dist': Scheme(shape=(), dtype=torch.float32), 'dist_m': Scheme(shape=(), dtype=torch.float32), 'delay': Scheme(shape=(), dtype=torch.float32)})], 17
 joint_action : [[12, 19, 6, 7, 16, 9, 11, 0, 10, 1], [3, 16, 7, 17, 18, 9, 4, 6, 2, 13], [13, 16, 7, 2, 15, 6, 19, 5, 14, 3], [3, 16, 7, 2, 0, 6, 19, 10, 14, 18], [15, 16, 7, 2, 1, 11, 19, 0, 14, 5], [15, 16, 3, 2, 10, 0, 19, 1, 14, 5], [15, 8, 11, 2, 10, 0, 19, 3, 18, 5], [15, 18, 10, 3, 1, 0, 19, 8, 17, 5], [15, 1, 10, 11, 8, 0, 17, 3, 18, 5], [15, 1, 10, 18, 20, 3, 8, 17, 11, 5], [15, 1, 20, 18, 20, 3, 11, 17, 8, 5], [8, 1, 20, 18, 20, 3, 20, 17, 11, 20], [8, 1, 20, 18, 20, 20, 20, 17, 11, 20], [20, 8, 11, 18, 20, 20, 20, 17, 20, 20], [20, 20, 20, 8, 20, 20, 20, 17, 11, 20], [20, 11, 8, 20, 20, 20, 20, 20, 20, 20], [20, 20, 20, 20, 20, 20, 11, 20, 20, 20]], 17
 ag_order : [array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), array([5, 7, 0, 8, 1, 6, 2, 9, 3, 4]), array([1, 2, 8, 0, 3, 4, 6, 5, 9, 7]), array([1, 2, 3, 5, 6, 8, 4, 7, 0, 9]), array([1, 2, 3, 6, 8, 7, 5, 4, 0, 9]), array([0, 1, 3, 6, 8, 9, 5, 2, 7, 4]), array([0, 3, 5, 6, 9, 1, 8, 2, 4, 7]), array([0, 5, 6, 9, 4, 8, 2, 1, 7, 3]), array([0, 2, 5, 9, 4, 3, 7, 6, 8, 1]), array([0, 1, 2, 9, 6, 5, 3, 7, 8, 4]), array([0, 1, 3, 5, 9, 7, 8, 6, 2, 4]), array([1, 3, 5, 7, 0, 8, 6, 9, 2, 4]), array([1, 3, 7, 0, 8, 5, 2, 4, 9, 6]), array([3, 7, 1, 2, 8, 5, 6, 4, 0, 9]), array([7, 8, 3, 5, 9, 2, 1, 6, 0, 4]), array([2, 1, 5, 6, 3, 8, 4, 0, 9, 7]), array([6, 4, 0, 7, 2, 1, 5, 9, 8, 3])], 17
 task_finished : [array([False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False]), array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
        True, False, False,  True, False, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False, False, False, False,
        True, False, False,  True,  True, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False,  True, False, False,
        True, False, False,  True,  True, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False,  True,  True, False,
        True, False, False,  True,  True, False, False, False, False,
       False, False]), array([False, False, False, False,  True, False,  True,  True, False,
        True, False, False,  True,  True,  True, False,  True, False,
       False, False]), array([False, False,  True, False,  True, False,  True,  True, False,
        True, False, False,  True,  True,  True, False,  True, False,
       False, False]), array([False, False,  True, False,  True, False,  True,  True, False,
        True, False, False,  True,  True,  True, False,  True, False,
       False,  True]), array([ True, False,  True, False,  True, False,  True,  True, False,
        True, False, False,  True,  True,  True, False,  True, False,
       False,  True]), array([ True, False,  True, False,  True, False,  True,  True, False,
        True,  True, False,  True,  True,  True, False,  True, False,
       False,  True]), array([ True, False,  True, False,  True,  True,  True,  True, False,
        True,  True, False,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True, False,  True,  True,  True,  True,  True,  True, False,
        True,  True, False,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True, False,  True,  True,  True,  True,  True, False,
       False,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True, False,  True,  True,  True,  True,  True, False,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True, False,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True]), array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True, False,  True,  True,  True,  True,  True,  True,
        True,  True])], 17
 next_t : [3, 10, 3, 3, 2, 2, 3, 3, 2, 2, 3, 2, 6, 2, 3, 13, 38], 17
 terminated : [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True], 17
iteration : 17
joint_action : tensor([[12, 19,  6,  7, 16,  9, 11,  0, 10,  1],
        [ 3, 16,  7, 17, 18,  9,  4,  6,  2, 13],
        [13, 16,  7,  2, 15,  6, 19,  5, 14,  3],
        [ 3, 16,  7,  2,  0,  6, 19, 10, 14, 18],
        [15, 16,  7,  2,  1, 11, 19,  0, 14,  5],
        [15, 16,  3,  2, 10,  0, 19,  1, 14,  5],
        [15,  8, 11,  2, 10,  0, 19,  3, 18,  5],
        [15, 18, 10,  3,  1,  0, 19,  8, 17,  5],
        [15,  1, 10, 11,  8,  0, 17,  3, 18,  5],
        [15,  1, 10, 18, 20,  3,  8, 17, 11,  5],
        [15,  1, 20, 18, 20,  3, 11, 17,  8,  5],
        [ 8,  1, 20, 18, 20,  3, 20, 17, 11, 20],
        [ 8,  1, 20, 18, 20, 20, 20, 17, 11, 20],
        [20,  8, 11, 18, 20, 20, 20, 17, 20, 20],
        [20, 20, 20,  8, 20, 20, 20, 17, 11, 20],
        [20, 11,  8, 20, 20, 20, 20, 20, 20, 20],
        [20, 20, 20, 20, 20, 20, 11, 20, 20, 20]]), torch.Size([17, 10])
 all_action : tensor([[12],
        [19],
        [ 6],
        [ 7],
        [16],
        [ 9],
        [11],
        [ 0],
        [10],
        [ 1],
        [ 3],
        [16],
        [ 7],
        [17],
        [18],
        [ 9],
        [ 4],
        [ 6],
        [ 2],
        [13],
        [13],
        [16],
        [ 7],
        [ 2],
        [15],
        [ 6],
        [19],
        [ 5],
        [14],
        [ 3],
        [ 3],
        [16],
        [ 7],
        [ 2],
        [ 0],
        [ 6],
        [19],
        [10],
        [14],
        [18],
        [15],
        [16],
        [ 7],
        [ 2],
        [ 1],
        [11],
        [19],
        [ 0],
        [14],
        [ 5],
        [15],
        [16],
        [ 3],
        [ 2],
        [10],
        [ 0],
        [19],
        [ 1],
        [14],
        [ 5],
        [15],
        [ 8],
        [11],
        [ 2],
        [10],
        [ 0],
        [19],
        [ 3],
        [18],
        [ 5],
        [15],
        [18],
        [10],
        [ 3],
        [ 1],
        [ 0],
        [19],
        [ 8],
        [17],
        [ 5],
        [15],
        [ 1],
        [10],
        [11],
        [ 8],
        [ 0],
        [17],
        [ 3],
        [18],
        [ 5],
        [15],
        [ 1],
        [10],
        [18],
        [20],
        [ 3],
        [ 8],
        [17],
        [11],
        [ 5],
        [15],
        [ 1],
        [20],
        [18],
        [20],
        [ 3],
        [11],
        [17],
        [ 8],
        [ 5],
        [ 8],
        [ 1],
        [20],
        [18],
        [20],
        [ 3],
        [20],
        [17],
        [11],
        [20],
        [ 8],
        [ 1],
        [20],
        [18],
        [20],
        [20],
        [20],
        [17],
        [11],
        [20],
        [20],
        [ 8],
        [11],
        [18],
        [20],
        [20],
        [20],
        [17],
        [20],
        [20],
        [20],
        [20],
        [20],
        [ 8],
        [20],
        [20],
        [20],
        [17],
        [11],
        [20],
        [20],
        [11],
        [ 8],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [20],
        [11],
        [20],
        [20],
        [20]]), torch.Size([170, 1])
next_t : tensor([ 3, 10,  3,  3,  2,  2,  3,  3,  2,  2,  3,  2,  6,  2,  3, 13, 38]), torch.Size([17])
 ret : tensor([84, 82, 73, 71, 69, 68, 67, 65, 63, 62, 61, 59, 58, 53, 52, 50, 38]), torch.Size([17])
policy : tensor([[4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        [4.7619e-02, 4.7619e-02, 4.7619e-02,  ..., 4.7619e-02, 4.7619e-02,
         1.0000e-05],
        ...,
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05],
        [0.0000e+00, 0.0000e+00, 0.0000e+00,  ..., 0.0000e+00, 0.0000e+00,
         1.0000e-05]], grad_fn=<CopySlices>), torch.Size([170, 21])
 _pol : tensor([[4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [4.7619e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.0000e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.5556e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [5.8824e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.2500e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [6.6667e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [7.6923e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [8.3333e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [9.0909e-02],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-05],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.0000e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.0000e-05],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.1111e-01],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.0000e-05],
        [1.4286e-01],
        [1.4286e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.6667e-01],
        [1.6667e-01],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [2.0000e-01],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [2.5000e-01],
        [2.5000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [3.3333e-01],
        [3.3333e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05],
        [5.0000e-01],
        [1.0000e-05],
        [1.0000e-05],
        [1.0000e-05]], grad_fn=<GatherBackward0>), torch.Size([170, 1])
joint_log_prob : tensor([ -30.4452,  -29.9573,  -28.9037,  -28.3321,  -27.7259,  -27.0805,
         -25.6495,  -24.8491,  -23.9790,  -32.2362,  -40.6036,  -57.7272,
         -66.5234,  -75.5153,  -84.7494,  -94.3006, -104.3095],
       grad_fn=<SumBackward1>), torch.Size([17])
